
thesis_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012810  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  080129e0  080129e0  000229e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135a0  080135a0  00030118  2**0
                  CONTENTS
  4 .ARM          00000008  080135a0  080135a0  000235a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135a8  080135a8  00030118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135a8  080135a8  000235a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135ac  080135ac  000235ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080135b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd00  20000118  080136c8  00030118  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000de18  080136c8  0003de18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8be  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000411d  00000000  00000000  0004baa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0004fbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d4  00000000  00000000  000512d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027424  00000000  00000000  000524ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d818  00000000  00000000  000798d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d18  00000000  00000000  000970e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ddc  00000000  00000000  0017ce00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00183bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080129c8 	.word	0x080129c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	080129c8 	.word	0x080129c8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000688:	f006 fa66 	bl	8006b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800068c:	4b58      	ldr	r3, [pc, #352]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000694:	f000 f980 	bl	8000998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 808e 	bne.w	80007c2 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01d      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80006ac:	2208      	movs	r2, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d014      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	3308      	adds	r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006e4:	bf00      	nop
 80006e6:	e7fe      	b.n	80006e6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d069      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d864      	bhi.n	80007c2 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <pvPortMallocMicroROS+0x180>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000702:	e004      	b.n	800070e <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d903      	bls.n	8000720 <pvPortMallocMicroROS+0xa4>
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f1      	bne.n	8000704 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <pvPortMallocMicroROS+0x174>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000726:	429a      	cmp	r2, r3
 8000728:	d04b      	beq.n	80007c2 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2208      	movs	r2, #8
 8000730:	4413      	add	r3, r2
 8000732:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	2308      	movs	r3, #8
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	429a      	cmp	r2, r3
 800074a:	d91f      	bls.n	800078c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800074c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	2b00      	cmp	r3, #0
 800075c:	d00a      	beq.n	8000774 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	613b      	str	r3, [r7, #16]
}
 8000770:	bf00      	nop
 8000772:	e7fe      	b.n	8000772 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000786:	69b8      	ldr	r0, [r7, #24]
 8000788:	f000 f968 	bl	8000a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 8000798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d203      	bcs.n	80007ae <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <pvPortMallocMicroROS+0x17c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <pvPortMallocMicroROS+0x184>)
 80007ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <pvPortMallocMicroROS+0x178>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	431a      	orrs	r2, r3
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007c2:	f006 f9d7 	bl	8006b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00a      	beq.n	80007e6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	60fb      	str	r3, [r7, #12]
}
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007e6:	69fb      	ldr	r3, [r7, #28]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20003d3c 	.word	0x20003d3c
 80007f4:	20003d48 	.word	0x20003d48
 80007f8:	20003d40 	.word	0x20003d40
 80007fc:	20003d34 	.word	0x20003d34
 8000800:	20003d44 	.word	0x20003d44

08000804 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d048      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000816:	2308      	movs	r3, #8
 8000818:	425b      	negs	r3, r3
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	4413      	add	r3, r2
 800081e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	60fb      	str	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	e7fe      	b.n	8000846 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000854:	f383 8811 	msr	BASEPRI, r3
 8000858:	f3bf 8f6f 	isb	sy
 800085c:	f3bf 8f4f 	dsb	sy
 8000860:	60bb      	str	r3, [r7, #8]
}
 8000862:	bf00      	nop
 8000864:	e7fe      	b.n	8000864 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	685a      	ldr	r2, [r3, #4]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <vPortFreeMicroROS+0xac>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d019      	beq.n	80008a8 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d115      	bne.n	80008a8 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <vPortFreeMicroROS+0xac>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800088c:	f006 f964 	bl	8006b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <vPortFreeMicroROS+0xb0>)
 800089c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f000 f8dc 	bl	8000a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008a4:	f006 f966 	bl	8006b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20003d48 	.word	0x20003d48
 80008b4:	20003d40 	.word	0x20003d40

080008b8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008c4:	2308      	movs	r3, #8
 80008c6:	425b      	negs	r3, r3
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <getBlockSize+0x38>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	43db      	mvns	r3, r3
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

	return count;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20003d48 	.word	0x20003d48

080008f4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008fe:	f006 f92b 	bl	8006b58 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f7ff feba 	bl	800067c <pvPortMallocMicroROS>
 8000908:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d017      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d014      	beq.n	8000940 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffce 	bl	80008b8 <getBlockSize>
 800091c:	4603      	mov	r3, r0
 800091e:	2208      	movs	r2, #8
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d201      	bcs.n	8000930 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f011 f968 	bl	8011c0a <memcpy>

		vPortFreeMicroROS(pv);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ff62 	bl	8000804 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000940:	f006 f918 	bl	8006b74 <xTaskResumeAll>

	return newmem;
 8000944:	68bb      	ldr	r3, [r7, #8]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000958:	f006 f8fe 	bl	8006b58 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff fe88 	bl	800067c <pvPortMallocMicroROS>
 800096c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000972:	e004      	b.n	800097e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	613a      	str	r2, [r7, #16]
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	617a      	str	r2, [r7, #20]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1f5      	bne.n	8000974 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000988:	f006 f8f4 	bl	8006b74 <xTaskResumeAll>
  	return mem;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800099e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <prvHeapInit+0xac>)
 80009a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00c      	beq.n	80009cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3307      	adds	r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 0307 	bic.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <prvHeapInit+0xac>)
 80009c8:	4413      	add	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <prvHeapInit+0xb0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <prvHeapInit+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009e4:	2208      	movs	r2, #8
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <prvHeapInit+0xb4>)
 80009f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <prvHeapInit+0xb4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <prvHeapInit+0xb4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	1ad2      	subs	r2, r2, r3
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <prvHeapInit+0xb4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <prvHeapInit+0xb8>)
 8000a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <prvHeapInit+0xbc>)
 8000a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <prvHeapInit+0xc0>)
 8000a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20000134 	.word	0x20000134
 8000a48:	20003d34 	.word	0x20003d34
 8000a4c:	20003d3c 	.word	0x20003d3c
 8000a50:	20003d44 	.word	0x20003d44
 8000a54:	20003d40 	.word	0x20003d40
 8000a58:	20003d48 	.word	0x20003d48

08000a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <prvInsertBlockIntoFreeList+0xac>)
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e002      	b.n	8000a70 <prvInsertBlockIntoFreeList+0x14>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f7      	bhi.n	8000a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4413      	add	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d108      	bne.n	8000a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	441a      	add	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d118      	bne.n	8000ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d00d      	beq.n	8000ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	441a      	add	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e008      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <prvInsertBlockIntoFreeList+0xb0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e003      	b.n	8000aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d002      	beq.n	8000afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20003d34 	.word	0x20003d34
 8000b0c:	20003d3c 	.word	0x20003d3c

08000b10 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <cubemx_transport_open+0x28>)
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f003 f8f0 	bl	8003d0c <HAL_UART_Receive_DMA>
    return true;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20003d4c 	.word	0x20003d4c

08000b3c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b4a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f003 f902 	bl	8003d56 <HAL_UART_DMAStop>
    return true;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b70:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d11c      	bne.n	8000bb8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f003 f850 	bl	8003c2c <HAL_UART_Transmit_DMA>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b90:	e002      	b.n	8000b98 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f004 fb7c 	bl	8005290 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <cubemx_transport_write+0x4e>
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b20      	cmp	r3, #32
 8000ba8:	d1f3      	bne.n	8000b92 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000baa:	7cfb      	ldrb	r3, [r7, #19]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <cubemx_transport_write+0x58>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	e002      	b.n	8000bba <cubemx_transport_write+0x5e>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e000      	b.n	8000bba <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000bb8:	2300      	movs	r3, #0
    }
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bd8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bde:	b672      	cpsid	i
}
 8000be0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000bf0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf2:	b662      	cpsie	i
}
 8000bf4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f004 fb47 	bl	8005290 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d103      	bne.n	8000c16 <cubemx_transport_read+0x52>
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe3      	blt.n	8000bde <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c1a:	e011      	b.n	8000c40 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	440b      	add	r3, r1
 8000c26:	4910      	ldr	r1, [pc, #64]	; (8000c68 <cubemx_transport_read+0xa4>)
 8000c28:	5c8a      	ldrb	r2, [r1, r2]
 8000c2a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c38:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <cubemx_transport_read+0xa0>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <cubemx_transport_read+0x9c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d003      	beq.n	8000c54 <cubemx_transport_read+0x90>
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3e3      	bcc.n	8000c1c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c54:	69bb      	ldr	r3, [r7, #24]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20004550 	.word	0x20004550
 8000c64:	2000454c 	.word	0x2000454c
 8000c68:	20003d4c 	.word	0x20003d4c

08000c6c <debug_led>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debug_led()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2120      	movs	r1, #32
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <debug_led+0x28>)
 8000c76:	f001 fe63 	bl	8002940 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000c7a:	20c8      	movs	r0, #200	; 0xc8
 8000c7c:	f000 ffc4 	bl	8001c08 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <debug_led+0x28>)
 8000c86:	f001 fe5b 	bl	8002940 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f000 ffbc 	bl	8001c08 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40020000 	.word	0x40020000

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9c:	f000 ff72 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f82a 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca4:	f000 f926 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca8:	f000 f8ec 	bl	8000e84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cac:	f000 f896 	bl	8000ddc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cb0:	f000 f8be 	bl	8000e30 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cb4:	f004 fa10 	bl	80050d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <main+0x48>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <main+0x4c>)
 8000cbe:	f004 fa55 	bl	800516c <osThreadNew>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <main+0x50>)
 8000cc6:	6013      	str	r3, [r2, #0]

  /* creation of task_2 */
  task_2Handle = osThreadNew(StartTask02, NULL, &task_2_attributes);
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <main+0x54>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <main+0x58>)
 8000cce:	f004 fa4d 	bl	800516c <osThreadNew>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <main+0x5c>)
 8000cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f004 fa22 	bl	8005120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x44>
 8000cde:	bf00      	nop
 8000ce0:	08012ab4 	.word	0x08012ab4
 8000ce4:	08000fd1 	.word	0x08000fd1
 8000ce8:	200047cc 	.word	0x200047cc
 8000cec:	08012ad8 	.word	0x08012ad8
 8000cf0:	08001165 	.word	0x08001165
 8000cf4:	200047d0 	.word	0x200047d0

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2234      	movs	r2, #52	; 0x34
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f010 feb6 	bl	8011a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d6c:	23b4      	movs	r3, #180	; 0xb4
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 f9c3 	bl	800310c <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d8c:	f000 fa0f 	bl	80011ae <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d90:	f001 fdf0 	bl	8002974 <HAL_PWREx_EnableOverDrive>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d9a:	f000 fa08 	bl	80011ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000daa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2105      	movs	r1, #5
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fe29 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dc8:	f000 f9f1 	bl	80011ae <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	; 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART3;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f002 feba 	bl	8003b8c <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f9c6 	bl	80011ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200045bc 	.word	0x200045bc
 8000e2c:	40004800 	.word	0x40004800

08000e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <MX_USART3_UART_Init+0x50>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART3_UART_Init+0x4c>)
 8000e68:	f002 fe90 	bl	8003b8c <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e72:	f000 f99c 	bl	80011ae <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004604 	.word	0x20004604
 8000e80:	40004800 	.word	0x40004800

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_DMA_Init+0x6c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <MX_DMA_Init+0x6c>)
 8000e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_DMA_Init+0x6c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	200c      	movs	r0, #12
 8000eac:	f000 ff88 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eb0:	200c      	movs	r0, #12
 8000eb2:	f000 ffa1 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f000 ff80 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f000 ff99 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2010      	movs	r0, #16
 8000ecc:	f000 ff78 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ed0:	2010      	movs	r0, #16
 8000ed2:	f000 ff91 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2011      	movs	r0, #17
 8000edc:	f000 ff70 	bl	8001dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f000 ff89 	bl	8001df8 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000f80:	f001 fcde 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_GPIO_Init+0xd8>)
 8000f9c:	f001 fb3c 	bl	8002618 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_GPIO_Init+0xd4>)
 8000fb8:	f001 fb2e 	bl	8002618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b0f8      	sub	sp, #480	; 0x1e0
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000fda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8000fde:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char test_array[ARRAY_LEN];
  memset(test_array, 'z', ARRAY_LEN);
 8000fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000fe4:	22c8      	movs	r2, #200	; 0xc8
 8000fe6:	217a      	movs	r1, #122	; 0x7a
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f010 fd45 	bl	8011a78 <memset>

  rmw_uros_set_custom_transport(
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <StartDefaultTask+0x148>)
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <StartDefaultTask+0x14c>)
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <StartDefaultTask+0x150>)
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	; (8001124 <StartDefaultTask+0x154>)
 8000ffa:	494b      	ldr	r1, [pc, #300]	; (8001128 <StartDefaultTask+0x158>)
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f007 fa73 	bl	80084e8 <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001002:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001006:	4618      	mov	r0, r3
 8001008:	f006 ffee 	bl	8007fe8 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800100c:	4b47      	ldr	r3, [pc, #284]	; (800112c <StartDefaultTask+0x15c>)
 800100e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <StartDefaultTask+0x160>)
 8001014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001018:	4b46      	ldr	r3, [pc, #280]	; (8001134 <StartDefaultTask+0x164>)
 800101a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <StartDefaultTask+0x168>)
 8001020:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 8001024:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001028:	4618      	mov	r0, r3
 800102a:	f006 ffeb 	bl	8008004 <rcutils_set_default_allocator>
 800102e:	4603      	mov	r3, r0
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d004      	beq.n	8001044 <StartDefaultTask+0x74>
  {
    printf("Error on default allocators (line %d)\n", __LINE__);
 800103a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800103e:	483f      	ldr	r0, [pc, #252]	; (800113c <StartDefaultTask+0x16c>)
 8001040:	f010 fc3e 	bl	80118c0 <iprintf>
  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8001044:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001048:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 800104c:	463b      	mov	r3, r7
 800104e:	4618      	mov	r0, r3
 8001050:	f006 fff8 	bl	8008044 <rcutils_get_default_allocator>
 8001054:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001058:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800105c:	461d      	mov	r5, r3
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	6023      	str	r3, [r4, #0]

  // create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001066:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800106a:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	f006 fef3 	bl	8007e5c <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "bms_node", "", &support);
 8001076:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800107a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800107e:	4a30      	ldr	r2, [pc, #192]	; (8001140 <StartDefaultTask+0x170>)
 8001080:	4930      	ldr	r1, [pc, #192]	; (8001144 <StartDefaultTask+0x174>)
 8001082:	f006 ff39 	bl	8007ef8 <rclc_node_init_default>

  // create publisher

  RCCHECK(rclc_publisher_init_best_effort(
 8001086:	f007 fe73 	bl	8008d70 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 800108a:	4602      	mov	r2, r0
 800108c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <StartDefaultTask+0x178>)
 8001092:	482e      	ldr	r0, [pc, #184]	; (800114c <StartDefaultTask+0x17c>)
 8001094:	f006 ff6c 	bl	8007f70 <rclc_publisher_init_best_effort>
 8001098:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 800109c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <StartDefaultTask+0xe4>
 80010a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010a8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80010ac:	4828      	ldr	r0, [pc, #160]	; (8001150 <StartDefaultTask+0x180>)
 80010ae:	f010 fc07 	bl	80118c0 <iprintf>
 80010b2:	e02d      	b.n	8001110 <StartDefaultTask+0x140>
      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState),
      "/battery_publisher"))


  // create executor
  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80010b4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80010b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 fec3 	bl	8007e48 <rclc_executor_get_zero_initialized_executor>

  // initialize message memory

  bms_battery_msg.header.frame_id.capacity = 100;
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <StartDefaultTask+0x184>)
 80010c4:	2264      	movs	r2, #100	; 0x64
 80010c6:	611a      	str	r2, [r3, #16]
  bms_battery_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f010 f95b 	bl	8011384 <malloc>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <StartDefaultTask+0x184>)
 80010d4:	609a      	str	r2, [r3, #8]
  bms_battery_msg.header.frame_id.size = 0;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <StartDefaultTask+0x184>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]


  bms_battery_msg.voltage = 50.0;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <StartDefaultTask+0x184>)
 80010de:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <StartDefaultTask+0x188>)
 80010e0:	615a      	str	r2, [r3, #20]

  bms_battery_msg.current = 30.0;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <StartDefaultTask+0x184>)
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <StartDefaultTask+0x18c>)
 80010e6:	61da      	str	r2, [r3, #28]

     for(;;)
    {
      rcl_ret_t ret = rcl_publish(&publisher_battery, &bms_battery_msg, NULL);
 80010e8:	2200      	movs	r2, #0
 80010ea:	491a      	ldr	r1, [pc, #104]	; (8001154 <StartDefaultTask+0x184>)
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <StartDefaultTask+0x17c>)
 80010ee:	f006 fe87 	bl	8007e00 <rcl_publish>
 80010f2:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
      if (ret != RCL_RET_OK)
 80010f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <StartDefaultTask+0x138>
      {
        printf("Error publishing (line %d)\n", __LINE__);
 80010fe:	f240 11df 	movw	r1, #479	; 0x1df
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <StartDefaultTask+0x190>)
 8001104:	f010 fbdc 	bl	80118c0 <iprintf>
      }
      //debug_led();

      osDelay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f004 f8c1 	bl	8005290 <osDelay>
    {
 800110e:	e7eb      	b.n	80010e8 <StartDefaultTask+0x118>

  // cleaning Up
  RCCHECK(rcl_publisher_fini(&publisher_battery, &node));
  RCCHECK(rcl_node_fini(&node));
  /* USER CODE END 5 */
}
 8001110:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8001114:	46bd      	mov	sp, r7
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	08000bc5 	.word	0x08000bc5
 800111c:	08000b5d 	.word	0x08000b5d
 8001120:	08000b3d 	.word	0x08000b3d
 8001124:	08000b11 	.word	0x08000b11
 8001128:	200045bc 	.word	0x200045bc
 800112c:	080011b9 	.word	0x080011b9
 8001130:	080011fd 	.word	0x080011fd
 8001134:	08001235 	.word	0x08001235
 8001138:	080012a1 	.word	0x080012a1
 800113c:	080129f4 	.word	0x080129f4
 8001140:	08012a1c 	.word	0x08012a1c
 8001144:	08012a20 	.word	0x08012a20
 8001148:	08012a2c 	.word	0x08012a2c
 800114c:	20004554 	.word	0x20004554
 8001150:	08012a40 	.word	0x08012a40
 8001154:	20004558 	.word	0x20004558
 8001158:	42480000 	.word	0x42480000
 800115c:	41f00000 	.word	0x41f00000
 8001160:	08012a6c 	.word	0x08012a6c

08001164 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	debug_led();
 800116c:	f7ff fd7e 	bl	8000c6c <debug_led>
	char * message = "Hello\n";
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <StartTask02+0x24>)
 8001172:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit_DMA(&huart2, (char *)message, sizeof(message));
 8001174:	2204      	movs	r2, #4
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <StartTask02+0x28>)
 800117a:	f002 fd57 	bl	8003c2c <HAL_UART_Transmit_DMA>
    osDelay(1000);
 800117e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001182:	f004 f885 	bl	8005290 <osDelay>
  {
 8001186:	e7f1      	b.n	800116c <StartTask02+0x8>
 8001188:	08012a88 	.word	0x08012a88
 800118c:	200045bc 	.word	0x200045bc

08001190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d101      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011a2:	f000 fd11 	bl	8001bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b2:	b672      	cpsid	i
}
 80011b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <Error_Handler+0x8>

080011b8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <microros_allocate+0x3c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <microros_allocate+0x3c>)
 80011d0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <microros_allocate+0x40>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <microros_allocate+0x40>)
 80011e0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fa4a 	bl	800067c <pvPortMallocMicroROS>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200047d4 	.word	0x200047d4
 80011f8:	200047d8 	.word	0x200047d8

080011fc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fb53 	bl	80008b8 <getBlockSize>
 8001212:	4603      	mov	r3, r0
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <microros_deallocate+0x34>)
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <microros_deallocate+0x34>)
 800121e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff faef 	bl	8000804 <vPortFreeMicroROS>
  }
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200047d8 	.word	0x200047d8

08001234 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <microros_reallocate+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <microros_reallocate+0x64>)
 800124e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <microros_reallocate+0x68>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	461a      	mov	r2, r3
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <microros_reallocate+0x68>)
 800125e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d104      	bne.n	8001270 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff fa08 	bl	800067c <pvPortMallocMicroROS>
 800126c:	4603      	mov	r3, r0
 800126e:	e00e      	b.n	800128e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff fb21 	bl	80008b8 <getBlockSize>
 8001276:	4603      	mov	r3, r0
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <microros_reallocate+0x68>)
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <microros_reallocate+0x68>)
 8001282:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fb34 	bl	80008f4 <pvPortReallocMicroROS>
 800128c:	4603      	mov	r3, r0
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200047d4 	.word	0x200047d4
 800129c:	200047d8 	.word	0x200047d8

080012a0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <microros_zero_allocate+0x48>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <microros_zero_allocate+0x48>)
 80012be:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <microros_zero_allocate+0x4c>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <microros_zero_allocate+0x4c>)
 80012d2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f7ff fb39 	bl	800094e <pvPortCallocMicroROS>
 80012dc:	4603      	mov	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200047d4 	.word	0x200047d4
 80012ec:	200047d8 	.word	0x200047d8

080012f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80012f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001306:	a320      	add	r3, pc, #128	; (adr r3, 8001388 <UTILS_NanosecondsToTimespec+0x98>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7fe ffe8 	bl	80002e0 <__aeabi_ldivmod>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800131a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131e:	a31a      	add	r3, pc, #104	; (adr r3, 8001388 <UTILS_NanosecondsToTimespec+0x98>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ffdc 	bl	80002e0 <__aeabi_ldivmod>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da20      	bge.n	8001376 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <UTILS_NanosecondsToTimespec+0x90>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1712      	asrs	r2, r2, #28
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	17c8      	asrs	r0, r1, #31
 8001352:	460c      	mov	r4, r1
 8001354:	4605      	mov	r5, r0
 8001356:	ebb2 0804 	subs.w	r8, r2, r4
 800135a:	eb63 0905 	sbc.w	r9, r3, r5
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4906      	ldr	r1, [pc, #24]	; (8001384 <UTILS_NanosecondsToTimespec+0x94>)
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	441a      	add	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
    }
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001380:	44b82fa1 	.word	0x44b82fa1
 8001384:	3b9aca00 	.word	0x3b9aca00
 8001388:	3b9aca00 	.word	0x3b9aca00
 800138c:	00000000 	.word	0x00000000

08001390 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001394:	b08e      	sub	sp, #56	; 0x38
 8001396:	af00      	add	r7, sp, #0
 8001398:	6278      	str	r0, [r7, #36]	; 0x24
 800139a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800139c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fe56 	bl	8007068 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	17da      	asrs	r2, r3, #31
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	61fa      	str	r2, [r7, #28]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	69b9      	ldr	r1, [r7, #24]
 80013ce:	000b      	movs	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2200      	movs	r2, #0
 80013da:	461c      	mov	r4, r3
 80013dc:	4615      	mov	r5, r2
 80013de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013e2:	1911      	adds	r1, r2, r4
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	416b      	adcs	r3, r5
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80013f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	f04f 0400 	mov.w	r4, #0
 80013fe:	f04f 0500 	mov.w	r5, #0
 8001402:	015d      	lsls	r5, r3, #5
 8001404:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001408:	0154      	lsls	r4, r2, #5
 800140a:	4622      	mov	r2, r4
 800140c:	462b      	mov	r3, r5
 800140e:	ebb2 0800 	subs.w	r8, r2, r0
 8001412:	eb63 0901 	sbc.w	r9, r3, r1
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001422:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001426:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800142a:	4690      	mov	r8, r2
 800142c:	4699      	mov	r9, r3
 800142e:	eb18 0a00 	adds.w	sl, r8, r0
 8001432:	eb49 0b01 	adc.w	fp, r9, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001442:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001446:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800144a:	ebb2 040a 	subs.w	r4, r2, sl
 800144e:	603c      	str	r4, [r7, #0]
 8001450:	eb63 030b 	sbc.w	r3, r3, fp
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800145a:	4623      	mov	r3, r4
 800145c:	181b      	adds	r3, r3, r0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	462b      	mov	r3, r5
 8001462:	eb41 0303 	adc.w	r3, r1, r3
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	6a3a      	ldr	r2, [r7, #32]
 800146a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800146e:	f7ff ff3f 	bl	80012f0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	4618      	mov	r0, r3
 8001476:	3738      	adds	r7, #56	; 0x38
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_MspInit+0x54>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_MspInit+0x54>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x54>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_MspInit+0x54>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_MspInit+0x54>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_MspInit+0x54>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	210f      	movs	r1, #15
 80014c2:	f06f 0001 	mvn.w	r0, #1
 80014c6:	f000 fc7b 	bl	8001dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_UART_MspInit+0x148>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f040 80a0 	bne.w	800163c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_UART_MspInit+0x14c>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a47      	ldr	r2, [pc, #284]	; (8001624 <HAL_UART_MspInit+0x14c>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_UART_MspInit+0x14c>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_UART_MspInit+0x14c>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a40      	ldr	r2, [pc, #256]	; (8001624 <HAL_UART_MspInit+0x14c>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_UART_MspInit+0x14c>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001534:	230c      	movs	r3, #12
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001544:	2307      	movs	r3, #7
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	4836      	ldr	r0, [pc, #216]	; (8001628 <HAL_UART_MspInit+0x150>)
 8001550:	f001 f862 	bl	8002618 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_UART_MspInit+0x154>)
 8001556:	4a36      	ldr	r2, [pc, #216]	; (8001630 <HAL_UART_MspInit+0x158>)
 8001558:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_UART_MspInit+0x154>)
 800155c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001560:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001562:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_UART_MspInit+0x154>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_UART_MspInit+0x154>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156e:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_UART_MspInit+0x154>)
 8001570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001574:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_UART_MspInit+0x154>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_UART_MspInit+0x154>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_UART_MspInit+0x154>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_UART_MspInit+0x154>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_UART_MspInit+0x154>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001594:	4825      	ldr	r0, [pc, #148]	; (800162c <HAL_UART_MspInit+0x154>)
 8001596:	f000 fc3d 	bl	8001e14 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80015a0:	f7ff fe05 	bl	80011ae <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_UART_MspInit+0x154>)
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80015aa:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_UART_MspInit+0x154>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_UART_MspInit+0x160>)
 80015b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015c0:	2240      	movs	r2, #64	; 0x40
 80015c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <HAL_UART_MspInit+0x15c>)
 80015f2:	f000 fc0f 	bl	8001e14 <HAL_DMA_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80015fc:	f7ff fdd7 	bl	80011ae <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_UART_MspInit+0x15c>)
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_UART_MspInit+0x15c>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2105      	movs	r1, #5
 8001610:	2026      	movs	r0, #38	; 0x26
 8001612:	f000 fbd5 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001616:	2026      	movs	r0, #38	; 0x26
 8001618:	f000 fbee 	bl	8001df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800161c:	e0c3      	b.n	80017a6 <HAL_UART_MspInit+0x2ce>
 800161e:	bf00      	nop
 8001620:	40004400 	.word	0x40004400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	2000464c 	.word	0x2000464c
 8001630:	40026088 	.word	0x40026088
 8001634:	200046ac 	.word	0x200046ac
 8001638:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a5b      	ldr	r2, [pc, #364]	; (80017b0 <HAL_UART_MspInit+0x2d8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	f040 80af 	bne.w	80017a6 <HAL_UART_MspInit+0x2ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 8001652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <HAL_UART_MspInit+0x2dc>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800169c:	2320      	movs	r3, #32
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ac:	2307      	movs	r3, #7
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4840      	ldr	r0, [pc, #256]	; (80017b8 <HAL_UART_MspInit+0x2e0>)
 80016b8:	f000 ffae 	bl	8002618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ce:	2307      	movs	r3, #7
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4838      	ldr	r0, [pc, #224]	; (80017bc <HAL_UART_MspInit+0x2e4>)
 80016da:	f000 ff9d 	bl	8002618 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 80016e0:	4a38      	ldr	r2, [pc, #224]	; (80017c4 <HAL_UART_MspInit+0x2ec>)
 80016e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800170c:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800171e:	4828      	ldr	r0, [pc, #160]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001720:	f000 fb78 	bl	8001e14 <HAL_DMA_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_UART_MspInit+0x256>
      Error_Handler();
 800172a:	f7ff fd40 	bl	80011ae <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
 8001734:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <HAL_UART_MspInit+0x2e8>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_UART_MspInit+0x2f4>)
 800173e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001746:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800177a:	4813      	ldr	r0, [pc, #76]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800177c:	f000 fb4a 	bl	8001e14 <HAL_DMA_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8001786:	f7ff fd12 	bl	80011ae <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 800178e:	639a      	str	r2, [r3, #56]	; 0x38
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <HAL_UART_MspInit+0x2f0>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2105      	movs	r1, #5
 800179a:	2027      	movs	r0, #39	; 0x27
 800179c:	f000 fb10 	bl	8001dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a0:	2027      	movs	r0, #39	; 0x27
 80017a2:	f000 fb29 	bl	8001df8 <HAL_NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	; 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40004800 	.word	0x40004800
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020800 	.word	0x40020800
 80017bc:	40020400 	.word	0x40020400
 80017c0:	2000470c 	.word	0x2000470c
 80017c4:	40026028 	.word	0x40026028
 80017c8:	2000476c 	.word	0x2000476c
 80017cc:	40026058 	.word	0x40026058

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_InitTick+0xe8>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <HAL_InitTick+0xe8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_InitTick+0xe8>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fa1e 	bl	8002c48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001816:	f001 f9ef 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 800181a:	6378      	str	r0, [r7, #52]	; 0x34
 800181c:	e004      	b.n	8001828 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181e:	f001 f9eb 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8001822:	4603      	mov	r3, r0
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	4a24      	ldr	r2, [pc, #144]	; (80018bc <HAL_InitTick+0xec>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3b01      	subs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_InitTick+0xf0>)
 8001838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800183c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_InitTick+0xf0>)
 8001840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001844:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_InitTick+0xf0>)
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_InitTick+0xf0>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_InitTick+0xf0>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_InitTick+0xf0>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <HAL_InitTick+0xf0>)
 8001860:	f001 fef2 	bl	8003648 <HAL_TIM_Base_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800186a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11b      	bne.n	80018aa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001872:	4813      	ldr	r0, [pc, #76]	; (80018c0 <HAL_InitTick+0xf0>)
 8001874:	f001 ff42 	bl	80036fc <HAL_TIM_Base_Start_IT>
 8001878:	4603      	mov	r3, r0
 800187a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800187e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001882:	2b00      	cmp	r3, #0
 8001884:	d111      	bne.n	80018aa <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001886:	201c      	movs	r0, #28
 8001888:	f000 fab6 	bl	8001df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	d808      	bhi.n	80018a4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001892:	2200      	movs	r2, #0
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	201c      	movs	r0, #28
 8001898:	f000 fa92 	bl	8001dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189c:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_InitTick+0xf4>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e002      	b.n	80018aa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3738      	adds	r7, #56	; 0x38
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	200047dc 	.word	0x200047dc
 80018c4:	20000008 	.word	0x20000008

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Stream1_IRQHandler+0x10>)
 80018fa:	f000 fc23 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000470c 	.word	0x2000470c

08001908 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <DMA1_Stream3_IRQHandler+0x10>)
 800190e:	f000 fc19 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000476c 	.word	0x2000476c

0800191c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA1_Stream5_IRQHandler+0x10>)
 8001922:	f000 fc0f 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000464c 	.word	0x2000464c

08001930 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <DMA1_Stream6_IRQHandler+0x10>)
 8001936:	f000 fc05 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200046ac 	.word	0x200046ac

08001944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM2_IRQHandler+0x10>)
 800194a:	f001 ff47 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200047dc 	.word	0x200047dc

08001958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <USART2_IRQHandler+0x10>)
 800195e:	f002 fa79 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200045bc 	.word	0x200045bc

0800196c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART3_IRQHandler+0x10>)
 8001972:	f002 fa6f 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20004604 	.word	0x20004604

08001980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_kill>:

int _kill(int pid, int sig)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199a:	f010 f901 	bl	8011ba0 <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	2216      	movs	r2, #22
 80019a2:	601a      	str	r2, [r3, #0]
  return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe7 	bl	8001990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c2:	e7fe      	b.n	80019c2 <_exit+0x12>

080019c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e00a      	b.n	80019ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d6:	f3af 8000 	nop.w
 80019da:	4601      	mov	r1, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf0      	blt.n	80019d6 <_read+0x12>
  }

  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e009      	b.n	8001a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf1      	blt.n	8001a10 <_write+0x12>
  }
  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_close>:

int _close(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_isatty>:

int _isatty(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f010 f866 	bl	8011ba0 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20020000 	.word	0x20020000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	20004828 	.word	0x20004828
 8001b08:	2000de18 	.word	0x2000de18

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b34:	f7ff ffea 	bl	8001b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f010 f825 	bl	8011bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7ff f899 	bl	8000c98 <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001b74:	080135b0 	.word	0x080135b0
  ldr r2, =_sbss
 8001b78:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001b7c:	2000de18 	.word	0x2000de18

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f8fc 	bl	8001daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f7ff fe0c 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fc62 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x20>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x24>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_IncTick+0x24>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	2000482c 	.word	0x2000482c

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000482c 	.word	0x2000482c

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_Delay+0x44>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffde 	bl	8001bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000000c 	.word	0x2000000c

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	; (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff4c 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd2:	f7ff ff61 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	6978      	ldr	r0, [r7, #20]
 8001dde:	f7ff ffb1 	bl	8001d44 <NVIC_EncodePriority>
 8001de2:	4602      	mov	r2, r0
 8001de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff80 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff54 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fee6 	bl	8001bf0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e099      	b.n	8001f64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	e00f      	b.n	8001e72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e52:	f7ff fecd 	bl	8001bf0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d908      	bls.n	8001e72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e078      	b.n	8001f64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1e8      	bne.n	8001e52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_DMA_Init+0x158>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d107      	bne.n	8001edc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d117      	bne.n	8001f36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb01 	bl	8002520 <DMA_CheckFifoParam>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f32:	2301      	movs	r3, #1
 8001f34:	e016      	b.n	8001f64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fab8 	bl	80024b4 <DMA_CalcBaseAndBitshift>
 8001f44:	4603      	mov	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	223f      	movs	r2, #63	; 0x3f
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f010803f 	.word	0xf010803f

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Start_IT+0x26>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e040      	b.n	8002018 <HAL_DMA_Start_IT+0xa8>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d12f      	bne.n	800200a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fa4a 	bl	8002458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0216 	orr.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002016:	7dfb      	ldrb	r3, [r7, #23]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202e:	f7ff fddf 	bl	8001bf0 <HAL_GetTick>
 8002032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e052      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0216 	bic.w	r2, r2, #22
 8002060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_DMA_Abort+0x62>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	e013      	b.n	80020cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a4:	f7ff fda4 	bl	8001bf0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d90c      	bls.n	80020cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e015      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e4      	bne.n	80020a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	223f      	movs	r2, #63	; 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d004      	beq.n	800211e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00c      	b.n	8002138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002150:	4b8e      	ldr	r3, [pc, #568]	; (800238c <HAL_DMA_IRQHandler+0x248>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a8e      	ldr	r2, [pc, #568]	; (8002390 <HAL_DMA_IRQHandler+0x24c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2208      	movs	r2, #8
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2210      	movs	r2, #16
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	2210      	movs	r2, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d018      	beq.n	8002286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e01f      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e016      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0208 	bic.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2220      	movs	r2, #32
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808f 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8087 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2220      	movs	r2, #32
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d136      	bne.n	800235c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0216 	bic.w	r2, r2, #22
 80022fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_DMA_IRQHandler+0x1da>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0208 	bic.w	r2, r2, #8
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07e      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
        }
        return;
 800235a:	e079      	b.n	8002450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e02c      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
 800238a:	bf00      	nop
 800238c:	20000004 	.word	0x20000004
 8002390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e01e      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0210 	bic.w	r2, r2, #16
 80023c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d022      	beq.n	800243e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2205      	movs	r2, #5
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3301      	adds	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d307      	bcc.n	800242c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f2      	bne.n	8002410 <HAL_DMA_IRQHandler+0x2cc>
 800242a:	e000      	b.n	800242e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800242c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e000      	b.n	8002452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002450:	bf00      	nop
    }
  }
}
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b40      	cmp	r3, #64	; 0x40
 8002484:	d108      	bne.n	8002498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002496:	e007      	b.n	80024a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3b10      	subs	r3, #16
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <DMA_CalcBaseAndBitshift+0x64>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <DMA_CalcBaseAndBitshift+0x68>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d909      	bls.n	80024f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	1d1a      	adds	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	659a      	str	r2, [r3, #88]	; 0x58
 80024f4:	e007      	b.n	8002506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	aaaaaaab 	.word	0xaaaaaaab
 800251c:	08012b14 	.word	0x08012b14

08002520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11f      	bne.n	800257a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d856      	bhi.n	80025ee <DMA_CheckFifoParam+0xce>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x28>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002559 	.word	0x08002559
 800254c:	0800256b 	.word	0x0800256b
 8002550:	08002559 	.word	0x08002559
 8002554:	080025ef 	.word	0x080025ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d046      	beq.n	80025f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e043      	b.n	80025f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002572:	d140      	bne.n	80025f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e03d      	b.n	80025f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002582:	d121      	bne.n	80025c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d837      	bhi.n	80025fa <DMA_CheckFifoParam+0xda>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <DMA_CheckFifoParam+0x70>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025a7 	.word	0x080025a7
 8002598:	080025a1 	.word	0x080025a1
 800259c:	080025b9 	.word	0x080025b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e030      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d025      	beq.n	80025fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b6:	e022      	b.n	80025fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c0:	d11f      	bne.n	8002602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025c6:	e01c      	b.n	8002602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d903      	bls.n	80025d6 <DMA_CheckFifoParam+0xb6>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d003      	beq.n	80025dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d4:	e018      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      break;
 80025da:	e015      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e00b      	b.n	8002606 <DMA_CheckFifoParam+0xe6>
      break;
 80025ee:	bf00      	nop
 80025f0:	e00a      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
 80025f4:	e008      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e006      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e004      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;   
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
    }
  } 
  
  return status; 
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e165      	b.n	8002900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002634:	2201      	movs	r2, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 8154 	bne.w	80028fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d005      	beq.n	800266a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	2b02      	cmp	r3, #2
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d017      	beq.n	8002708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d123      	bne.n	800275c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	08da      	lsrs	r2, r3, #3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3208      	adds	r2, #8
 800271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	220f      	movs	r2, #15
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	69b9      	ldr	r1, [r7, #24]
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0203 	and.w	r2, r3, #3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80ae 	beq.w	80028fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <HAL_GPIO_Init+0x300>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a5c      	ldr	r2, [pc, #368]	; (8002918 <HAL_GPIO_Init+0x300>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_GPIO_Init+0x300>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_GPIO_Init+0x304>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_GPIO_Init+0x308>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x21a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_GPIO_Init+0x30c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	; (8002928 <HAL_GPIO_Init+0x310>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x212>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_GPIO_Init+0x314>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_GPIO_Init+0x318>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x20a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_GPIO_Init+0x31c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x206>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a49      	ldr	r2, [pc, #292]	; (8002938 <HAL_GPIO_Init+0x320>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x202>
 8002816:	2306      	movs	r3, #6
 8002818:	e00c      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800281a:	2307      	movs	r3, #7
 800281c:	e00a      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800281e:	2305      	movs	r3, #5
 8002820:	e008      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002822:	2304      	movs	r3, #4
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002826:	2303      	movs	r3, #3
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x21c>
 8002832:	2300      	movs	r3, #0
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002844:	4935      	ldr	r1, [pc, #212]	; (800291c <HAL_GPIO_Init+0x304>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_GPIO_Init+0x324>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002876:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_GPIO_Init+0x324>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_GPIO_Init+0x324>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <HAL_GPIO_Init+0x324>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_GPIO_Init+0x324>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_GPIO_Init+0x324>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d0:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_GPIO_Init+0x324>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028f4:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_GPIO_Init+0x324>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b0f      	cmp	r3, #15
 8002904:	f67f ae96 	bls.w	8002634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40021400 	.word	0x40021400
 8002938:	40021800 	.word	0x40021800
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_PWREx_EnableOverDrive+0x94>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a0:	f7ff f926 	bl	8001bf0 <HAL_GetTick>
 80029a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029a6:	e009      	b.n	80029bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029a8:	f7ff f922 	bl	8001bf0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b6:	d901      	bls.n	80029bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e01f      	b.n	80029fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d1ee      	bne.n	80029a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d0:	f7ff f90e 	bl	8001bf0 <HAL_GetTick>
 80029d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029d6:	e009      	b.n	80029ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d8:	f7ff f90a 	bl	8001bf0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e6:	d901      	bls.n	80029ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e007      	b.n	80029fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_PWREx_EnableOverDrive+0x98>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f8:	d1ee      	bne.n	80029d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	420e0040 	.word	0x420e0040
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	420e0044 	.word	0x420e0044

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0cc      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d90c      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d044      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d119      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b3f      	ldr	r3, [pc, #252]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e067      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4934      	ldr	r1, [pc, #208]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7ff f874 	bl	8001bf0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7ff f870 	bl	8001bf0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e04f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d20c      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f887 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fe08 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08012afc 	.word	0x08012afc
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	20000008 	.word	0x20000008

08002be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	08012b0c 	.word	0x08012b0c

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffdc 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08012b0c 	.word	0x08012b0c

08002c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	220f      	movs	r2, #15
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_RCC_GetClockConfig+0x60>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40023c00 	.word	0x40023c00

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b0ae      	sub	sp, #184	; 0xb8
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd2:	4bcb      	ldr	r3, [pc, #812]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	f200 8206 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x440>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	080030ed 	.word	0x080030ed
 8002cf0:	080030ed 	.word	0x080030ed
 8002cf4:	080030ed 	.word	0x080030ed
 8002cf8:	08002d25 	.word	0x08002d25
 8002cfc:	080030ed 	.word	0x080030ed
 8002d00:	080030ed 	.word	0x080030ed
 8002d04:	080030ed 	.word	0x080030ed
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	080030ed 	.word	0x080030ed
 8002d10:	080030ed 	.word	0x080030ed
 8002d14:	080030ed 	.word	0x080030ed
 8002d18:	08002f1d 	.word	0x08002f1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4bb9      	ldr	r3, [pc, #740]	; (8003004 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d22:	e1e7      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d24:	4bb8      	ldr	r3, [pc, #736]	; (8003008 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d2a:	e1e3      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2c:	4bb4      	ldr	r3, [pc, #720]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d38:	4bb1      	ldr	r3, [pc, #708]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d071      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4bae      	ldr	r3, [pc, #696]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d50:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4621      	mov	r1, r4
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	6439      	str	r1, [r7, #64]	; 0x40
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4641      	mov	r1, r8
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4641      	mov	r1, r8
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db0:	4649      	mov	r1, r9
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	00cb      	lsls	r3, r1, #3
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dce:	4641      	mov	r1, r8
 8002dd0:	00ca      	lsls	r2, r1, #3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4622      	mov	r2, r4
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dde:	462b      	mov	r3, r5
 8002de0:	460a      	mov	r2, r1
 8002de2:	eb42 0303 	adc.w	r3, r2, r3
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df4:	4629      	mov	r1, r5
 8002df6:	024b      	lsls	r3, r1, #9
 8002df8:	4621      	mov	r1, r4
 8002dfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dfe:	4621      	mov	r1, r4
 8002e00:	024a      	lsls	r2, r1, #9
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e18:	f7fd fab2 	bl	8000380 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e26:	e067      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4b75      	ldr	r3, [pc, #468]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e42:	2300      	movs	r3, #0
 8002e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	0159      	lsls	r1, r3, #5
 8002e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5c:	0150      	lsls	r0, r2, #5
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4621      	mov	r1, r4
 8002e64:	1a51      	subs	r1, r2, r1
 8002e66:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e68:	4629      	mov	r1, r5
 8002e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e86:	4641      	mov	r1, r8
 8002e88:	018a      	lsls	r2, r1, #6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e90:	4649      	mov	r1, r9
 8002e92:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eaa:	4692      	mov	sl, r2
 8002eac:	469b      	mov	fp, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002eca:	4629      	mov	r1, r5
 8002ecc:	028b      	lsls	r3, r1, #10
 8002ece:	4621      	mov	r1, r4
 8002ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	028a      	lsls	r2, r1, #10
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ee6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002eea:	f7fd fa49 	bl	8000380 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef8:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f1a:	e0eb      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f1c:	4b38      	ldr	r3, [pc, #224]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06b      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f46:	663b      	str	r3, [r7, #96]	; 0x60
 8002f48:	2300      	movs	r3, #0
 8002f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f50:	4622      	mov	r2, r4
 8002f52:	462b      	mov	r3, r5
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	0159      	lsls	r1, r3, #5
 8002f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f62:	0150      	lsls	r0, r2, #5
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4621      	mov	r1, r4
 8002f6a:	1a51      	subs	r1, r2, r1
 8002f6c:	61b9      	str	r1, [r7, #24]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	eb63 0301 	sbc.w	r3, r3, r1
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f82:	4659      	mov	r1, fp
 8002f84:	018b      	lsls	r3, r1, #6
 8002f86:	4651      	mov	r1, sl
 8002f88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	018a      	lsls	r2, r1, #6
 8002f90:	4651      	mov	r1, sl
 8002f92:	ebb2 0801 	subs.w	r8, r2, r1
 8002f96:	4659      	mov	r1, fp
 8002f98:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb0:	4690      	mov	r8, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	eb18 0303 	adds.w	r3, r8, r3
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	eb49 0303 	adc.w	r3, r9, r3
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	024b      	lsls	r3, r1, #9
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fda:	4621      	mov	r1, r4
 8002fdc:	024a      	lsls	r2, r1, #9
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff0:	f7fd f9c6 	bl	8000380 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ffe:	e065      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x420>
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_RCC_GetSysClockFreq+0x458>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	4618      	mov	r0, r3
 8003016:	4611      	mov	r1, r2
 8003018:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800301c:	653b      	str	r3, [r7, #80]	; 0x50
 800301e:	2300      	movs	r3, #0
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
 8003022:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003026:	4642      	mov	r2, r8
 8003028:	464b      	mov	r3, r9
 800302a:	f04f 0000 	mov.w	r0, #0
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	0159      	lsls	r1, r3, #5
 8003034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003038:	0150      	lsls	r0, r2, #5
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4641      	mov	r1, r8
 8003040:	1a51      	subs	r1, r2, r1
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4649      	mov	r1, r9
 8003046:	eb63 0301 	sbc.w	r3, r3, r1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003058:	4659      	mov	r1, fp
 800305a:	018b      	lsls	r3, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003062:	4651      	mov	r1, sl
 8003064:	018a      	lsls	r2, r1, #6
 8003066:	4651      	mov	r1, sl
 8003068:	1a54      	subs	r4, r2, r1
 800306a:	4659      	mov	r1, fp
 800306c:	eb63 0501 	sbc.w	r5, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	00eb      	lsls	r3, r5, #3
 800307a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307e:	00e2      	lsls	r2, r4, #3
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	4643      	mov	r3, r8
 8003086:	18e3      	adds	r3, r4, r3
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	464b      	mov	r3, r9
 800308c:	eb45 0303 	adc.w	r3, r5, r3
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309e:	4629      	mov	r1, r5
 80030a0:	028b      	lsls	r3, r1, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a8:	4621      	mov	r1, r4
 80030aa:	028a      	lsls	r2, r1, #10
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b4:	2200      	movs	r2, #0
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030be:	f7fd f95f 	bl	8000380 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4613      	mov	r3, r2
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0f1b      	lsrs	r3, r3, #28
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ea:	e003      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	37b8      	adds	r7, #184	; 0xb8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400

0800310c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e28d      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8083 	beq.w	8003232 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800312c:	4b94      	ldr	r3, [pc, #592]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d019      	beq.n	800316c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003138:	4b91      	ldr	r3, [pc, #580]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003140:	2b08      	cmp	r3, #8
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003144:	4b8e      	ldr	r3, [pc, #568]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b84      	ldr	r3, [pc, #528]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x124>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e25a      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x90>
 800318e:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7b      	ldr	r2, [pc, #492]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xcc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0xb4>
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a72      	ldr	r2, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xcc>
 80031c0:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6b      	ldr	r2, [pc, #428]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fd06 	bl	8001bf0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fd02 	bl	8001bf0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e21f      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b61      	ldr	r3, [pc, #388]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xdc>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fcf2 	bl	8001bf0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fcee 	bl	8001bf0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e20b      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b57      	ldr	r3, [pc, #348]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x104>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d06f      	beq.n	800331e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800323e:	4b50      	ldr	r3, [pc, #320]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d017      	beq.n	800327a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d105      	bne.n	8003262 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003256:	4b4a      	ldr	r3, [pc, #296]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x186>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1d3      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4937      	ldr	r1, [pc, #220]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_OscConfig+0x278>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe fc9b 	bl	8001bf0 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fe fc97 	bl	8001bf0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1b4      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x278>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fc7a 	bl	8001bf0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003300:	f7fe fc76 	bl	8001bf0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e193      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_RCC_OscConfig+0x27c>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fc5a 	bl	8001bf0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003340:	f7fe fc56 	bl	8001bf0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e173      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x274>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x234>
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_OscConfig+0x27c>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fc43 	bl	8001bf0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	e00e      	b.n	800338c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe fc3f 	bl	8001bf0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e15c      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b8a      	ldr	r3, [pc, #552]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ea      	bne.n	800336e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b83      	ldr	r3, [pc, #524]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b7f      	ldr	r3, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a7e      	ldr	r2, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b7c      	ldr	r3, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b79      	ldr	r3, [pc, #484]	; (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a75      	ldr	r2, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fe fbff 	bl	8001bf0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fe fbfb 	bl	8001bf0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e118      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0x4b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x31e>
 800341c:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x358>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x340>
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a60      	ldr	r2, [pc, #384]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a5d      	ldr	r2, [pc, #372]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x358>
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a59      	ldr	r2, [pc, #356]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	4b57      	ldr	r3, [pc, #348]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a56      	ldr	r2, [pc, #344]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe fbc0 	bl	8001bf0 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fbbc 	bl	8001bf0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0d7      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x368>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fe fbaa 	bl	8001bf0 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe fba6 	bl	8001bf0 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0c1      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80ad 	beq.w	8003638 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034de:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d060      	beq.n	80035ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d145      	bne.n	800357e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fb7a 	bl	8001bf0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fb76 	bl	8001bf0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e093      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	491b      	ldr	r1, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe fb4b 	bl	8001bf0 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe fb47 	bl	8001bf0 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e064      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x452>
 800357c:	e05c      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fb34 	bl	8001bf0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fb30 	bl	8001bf0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04d      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x480>
 80035aa:	e045      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e040      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_RCC_OscConfig+0x538>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d030      	beq.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d129      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d122      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d119      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d10f      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f839 	bl	80036e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 f9c0 	bl	8003a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04e      	b.n	80037b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d01d      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_Base_Start_IT+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d111      	bne.n	80037a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d010      	beq.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379e:	e007      	b.n	80037b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40010400 	.word	0x40010400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40001800 	.word	0x40001800

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0202 	mvn.w	r2, #2
 8003810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8d2 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8c4 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8d5 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d020      	beq.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8ac 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f89e 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8af 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f886 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f878 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f889 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0210 	mvn.w	r2, #16
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2208      	movs	r2, #8
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f860 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f852 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f863 	bl	80039e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0201 	mvn.w	r2, #1
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fc24 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00c      	beq.n	800396c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f906 	bl	8003b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f834 	bl	80039f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0220 	mvn.w	r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8d8 	bl	8003b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2a:	d00f      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <TIM_Base_SetConfig+0x130>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a42      	ldr	r2, [pc, #264]	; (8003b40 <TIM_Base_SetConfig+0x134>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a41      	ldr	r2, [pc, #260]	; (8003b44 <TIM_Base_SetConfig+0x138>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a35      	ldr	r2, [pc, #212]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d027      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <TIM_Base_SetConfig+0x130>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d023      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <TIM_Base_SetConfig+0x134>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <TIM_Base_SetConfig+0x138>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d01b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d017      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <TIM_Base_SetConfig+0x140>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <TIM_Base_SetConfig+0x144>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <TIM_Base_SetConfig+0x148>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <TIM_Base_SetConfig+0x14c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <TIM_Base_SetConfig+0x150>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <TIM_Base_SetConfig+0x154>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <TIM_Base_SetConfig+0x12c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0xf8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <TIM_Base_SetConfig+0x13c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f023 0201 	bic.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40010400 	.word	0x40010400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800
 8003b58:	40001800 	.word	0x40001800
 8003b5c:	40001c00 	.word	0x40001c00
 8003b60:	40002000 	.word	0x40002000

08003b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e042      	b.n	8003c24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fc90 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 ffc9 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d156      	bne.n	8003cf4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_UART_Transmit_DMA+0x26>
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e04f      	b.n	8003cf6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2221      	movs	r2, #33	; 0x21
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_UART_Transmit_DMA+0xd4>)
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <HAL_UART_Transmit_DMA+0xd8>)
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_UART_Transmit_DMA+0xdc>)
 8003c8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	2200      	movs	r2, #0
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	461a      	mov	r2, r3
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	f7fe f95f 	bl	8001f70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	617b      	str	r3, [r7, #20]
   return(result);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8003cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3730      	adds	r7, #48	; 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	080043f5 	.word	0x080043f5
 8003d04:	0800448f 	.word	0x0800448f
 8003d08:	08004613 	.word	0x08004613

08003d0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d112      	bne.n	8003d4c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_Receive_DMA+0x26>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00b      	b.n	8003d4e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fcb0 	bl	80046a8 <UART_Start_Receive_DMA>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b090      	sub	sp, #64	; 0x40
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b21      	cmp	r3, #33	; 0x21
 8003d82:	d128      	bne.n	8003dd6 <HAL_UART_DMAStop+0x80>
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d025      	beq.n	8003dd6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe f928 	bl	8002020 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fd03 	bl	80047dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b22      	cmp	r3, #34	; 0x22
 8003df6:	d128      	bne.n	8003e4a <HAL_UART_DMAStop+0xf4>
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d025      	beq.n	8003e4a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1e:	61fa      	str	r2, [r7, #28]
 8003e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f8ee 	bl	8002020 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fcf1 	bl	800482c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3740      	adds	r7, #64	; 0x40
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0ba      	sub	sp, #232	; 0xe8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fd99 	bl	80049ea <UART_Receive_IT>
      return;
 8003eb8:	e25b      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80de 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
 8003ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80d1 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d011      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 81f2 	beq.w	8004368 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fd24 	bl	80049ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_UART_IRQHandler+0x17a>
 8003fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fc2c 	bl	800482c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d141      	bne.n	8004066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800401a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d9      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	4a7e      	ldr	r2, [pc, #504]	; (8004234 <HAL_UART_IRQHandler+0x3e0>)
 800403c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe f85c 	bl	8002100 <HAL_DMA_Abort_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004058:	4610      	mov	r0, r2
 800405a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e00e      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9b2 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00a      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9ae 	bl	80043c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e006      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9aa 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800407a:	e175      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	bf00      	nop
    return;
 800407e:	e173      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 814f 	bne.w	8004328 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8148 	beq.w	8004328 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8141 	beq.w	8004328 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	f040 80b6 	bne.w	8004238 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8145 	beq.w	800436c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 813e 	bcs.w	800436c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004102:	f000 8088 	beq.w	8004216 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1d9      	bne.n	8004106 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004176:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800417a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e1      	bne.n	8004152 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80041fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e3      	bne.n	80041d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	4618      	mov	r0, r3
 8004212:	f7fd ff05 	bl	8002020 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	b29b      	uxth	r3, r3
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8d5 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004232:	e09b      	b.n	800436c <HAL_UART_IRQHandler+0x518>
 8004234:	080048f3 	.word	0x080048f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 808e 	beq.w	8004370 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8089 	beq.w	8004370 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004274:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004282:	647a      	str	r2, [r7, #68]	; 0x44
 8004284:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	623b      	str	r3, [r7, #32]
   return(result);
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ba:	633a      	str	r2, [r7, #48]	; 0x30
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004300:	61fa      	str	r2, [r7, #28]
 8004302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	617b      	str	r3, [r7, #20]
   return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e3      	bne.n	80042dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f85b 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004326:	e023      	b.n	8004370 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <HAL_UART_IRQHandler+0x4f4>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 faea 	bl	800491a <UART_Transmit_IT>
    return;
 8004346:	e014      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <HAL_UART_IRQHandler+0x51e>
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fb2a 	bl	80049ba <UART_EndTransmit_IT>
    return;
 8004366:	e004      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
    return;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
      return;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
      return;
 8004370:	bf00      	nop
  }
}
 8004372:	37e8      	adds	r7, #232	; 0xe8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b090      	sub	sp, #64	; 0x40
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d137      	bne.n	8004480 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2200      	movs	r2, #0
 8004414:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
 800442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004436:	633a      	str	r2, [r7, #48]	; 0x30
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800443c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	60fb      	str	r3, [r7, #12]
   return(result);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446a:	61fa      	str	r2, [r7, #28]
 800446c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	617b      	str	r3, [r7, #20]
   return(result);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800447e:	e002      	b.n	8004486 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004480:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004482:	f7ff ff79 	bl	8004378 <HAL_UART_TxCpltCallback>
}
 8004486:	bf00      	nop
 8004488:	3740      	adds	r7, #64	; 0x40
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff75 	bl	800438c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b09c      	sub	sp, #112	; 0x70
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d172      	bne.n	80045ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	2200      	movs	r2, #0
 80044ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3314      	adds	r3, #20
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	667b      	str	r3, [r7, #100]	; 0x64
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004520:	647a      	str	r2, [r7, #68]	; 0x44
 8004522:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	623b      	str	r3, [r7, #32]
   return(result);
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004554:	633a      	str	r2, [r7, #48]	; 0x30
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60fb      	str	r3, [r7, #12]
   return(result);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004598:	61fa      	str	r2, [r7, #28]
 800459a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	617b      	str	r3, [r7, #20]
   return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	2200      	movs	r2, #0
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d106      	bne.n	80045c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045be:	4619      	mov	r1, r3
 80045c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045c2:	f7ff ff0b 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045c6:	e002      	b.n	80045ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045ca:	f7ff fee9 	bl	80043a0 <HAL_UART_RxCpltCallback>
}
 80045ce:	bf00      	nop
 80045d0:	3770      	adds	r7, #112	; 0x70
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d108      	bne.n	8004604 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff feed 	bl	80043dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004602:	e002      	b.n	800460a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fed5 	bl	80043b4 <HAL_UART_RxHalfCpltCallback>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b21      	cmp	r3, #33	; 0x21
 8004644:	d108      	bne.n	8004658 <UART_DMAError+0x46>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f000 f8c2 	bl	80047dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b22      	cmp	r3, #34	; 0x22
 8004678:	d108      	bne.n	800468c <UART_DMAError+0x7a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004686:	68b8      	ldr	r0, [r7, #8]
 8004688:	f000 f8d0 	bl	800482c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	f043 0210 	orr.w	r2, r3, #16
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f7ff fe95 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b098      	sub	sp, #96	; 0x60
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	; 0x22
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	4a3e      	ldr	r2, [pc, #248]	; (80047d0 <UART_Start_Receive_DMA+0x128>)
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <UART_Start_Receive_DMA+0x12c>)
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <UART_Start_Receive_DMA+0x130>)
 80046e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	2200      	movs	r2, #0
 80046ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046f0:	f107 0308 	add.w	r3, r7, #8
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	f7fd fc32 	bl	8001f70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	65bb      	str	r3, [r7, #88]	; 0x58
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	330c      	adds	r3, #12
 8004748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	657b      	str	r3, [r7, #84]	; 0x54
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3314      	adds	r3, #20
 800477c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800477e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	617b      	str	r3, [r7, #20]
   return(result);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a8:	653b      	str	r3, [r7, #80]	; 0x50
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3314      	adds	r3, #20
 80047b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047b2:	627a      	str	r2, [r7, #36]	; 0x24
 80047b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6a39      	ldr	r1, [r7, #32]
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e5      	bne.n	8004792 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3760      	adds	r7, #96	; 0x60
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	080044ab 	.word	0x080044ab
 80047d4:	080045d7 	.word	0x080045d7
 80047d8:	08004613 	.word	0x08004613

080047dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	; 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	61ba      	str	r2, [r7, #24]
 8004806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	613b      	str	r3, [r7, #16]
   return(result);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004820:	bf00      	nop
 8004822:	3724      	adds	r7, #36	; 0x24
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b095      	sub	sp, #84	; 0x54
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004854:	643a      	str	r2, [r7, #64]	; 0x40
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800485a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3314      	adds	r3, #20
 800486e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	61fb      	str	r3, [r7, #28]
   return(result);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d119      	bne.n	80048d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0310 	bic.w	r3, r3, #16
 80048ba:	647b      	str	r3, [r7, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c4:	61ba      	str	r2, [r7, #24]
 80048c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6979      	ldr	r1, [r7, #20]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	613b      	str	r3, [r7, #16]
   return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048e6:	bf00      	nop
 80048e8:	3754      	adds	r7, #84	; 0x54
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fd5b 	bl	80043c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b21      	cmp	r3, #33	; 0x21
 800492c:	d13e      	bne.n	80049ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d114      	bne.n	8004962 <UART_Transmit_IT+0x48>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d110      	bne.n	8004962 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004954:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	1c9a      	adds	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]
 8004960:	e008      	b.n	8004974 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	1c59      	adds	r1, r3, #1
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6211      	str	r1, [r2, #32]
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4619      	mov	r1, r3
 8004982:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10f      	bne.n	80049a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004996:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fccc 	bl	8004378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b08c      	sub	sp, #48	; 0x30
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	f040 80ae 	bne.w	8004b5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d117      	bne.n	8004a3a <UART_Receive_IT+0x50>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d113      	bne.n	8004a3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
 8004a38:	e026      	b.n	8004a88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4c:	d007      	beq.n	8004a5e <UART_Receive_IT+0x74>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <UART_Receive_IT+0x82>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e008      	b.n	8004a7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4619      	mov	r1, r3
 8004a96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d15d      	bne.n	8004b58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0220 	bic.w	r2, r2, #32
 8004aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d135      	bne.n	8004b4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	613b      	str	r3, [r7, #16]
   return(result);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f023 0310 	bic.w	r3, r3, #16
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	623a      	str	r2, [r7, #32]
 8004b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d10a      	bne.n	8004b40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fc48 	bl	80043dc <HAL_UARTEx_RxEventCallback>
 8004b4c:	e002      	b.n	8004b54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fc26 	bl	80043a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e002      	b.n	8004b5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e000      	b.n	8004b5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
  }
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3730      	adds	r7, #48	; 0x30
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0c0      	sub	sp, #256	; 0x100
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc0:	f021 010c 	bic.w	r1, r1, #12
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	ea40 0301 	orr.w	r3, r0, r1
 8004bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <UART_SetConfig+0x2cc>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <UART_SetConfig+0xa0>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <UART_SetConfig+0x2d0>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe f80a 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8004c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fd fff1 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8004c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	f040 810c 	bne.w	8004e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c42:	415b      	adcs	r3, r3
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	eb12 0801 	adds.w	r8, r2, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0901 	adc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c96:	460b      	mov	r3, r1
 8004c98:	18db      	adds	r3, r3, r3
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cac:	f7fb fb68 	bl	8000380 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d00:	4692      	mov	sl, r2
 8004d02:	469b      	mov	fp, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb4b 0303 	adc.w	r3, fp, r3
 8004d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d42:	f7fb fb1d 	bl	8000380 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2264      	movs	r2, #100	; 0x64
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d64:	fba3 2302 	umull	r2, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6339      	str	r1, [r7, #48]	; 0x30
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfe:	f7fb fabf 	bl	8000380 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e08:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2164      	movs	r1, #100	; 0x64
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e30:	e106      	b.n	8005040 <UART_SetConfig+0x4d8>
 8004e32:	bf00      	nop
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	6239      	str	r1, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0501 	adc.w	r5, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	00eb      	lsls	r3, r5, #3
 8004e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7a:	00e2      	lsls	r2, r4, #3
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	4643      	mov	r3, r8
 8004e82:	18e3      	adds	r3, r4, r3
 8004e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e88:	464b      	mov	r3, r9
 8004e8a:	eb45 0303 	adc.w	r3, r5, r3
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eae:	4629      	mov	r1, r5
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4621      	mov	r1, r4
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ec0:	f7fb fa5e 	bl	8000380 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b60      	ldr	r3, [pc, #384]	; (800504c <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	011c      	lsls	r4, r3, #4
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	61b9      	str	r1, [r7, #24]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6139      	str	r1, [r7, #16]
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5e:	f7fb fa0f 	bl	8000380 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	4b38      	ldr	r3, [pc, #224]	; (800504c <UART_SetConfig+0x4e4>)
 8004f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2264      	movs	r2, #100	; 0x64
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	1acb      	subs	r3, r1, r3
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	3332      	adds	r3, #50	; 0x32
 8004f7c:	4a33      	ldr	r2, [pc, #204]	; (800504c <UART_SetConfig+0x4e4>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f88:	441c      	add	r4, r3
 8004f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8e:	2200      	movs	r2, #0
 8004f90:	673b      	str	r3, [r7, #112]	; 0x70
 8004f92:	677a      	str	r2, [r7, #116]	; 0x74
 8004f94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f98:	4642      	mov	r2, r8
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	1891      	adds	r1, r2, r2
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	415b      	adcs	r3, r3
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa8:	4641      	mov	r1, r8
 8004faa:	1851      	adds	r1, r2, r1
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	4649      	mov	r1, r9
 8004fb0:	414b      	adcs	r3, r1
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	00cb      	lsls	r3, r1, #3
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fca:	4651      	mov	r1, sl
 8004fcc:	00ca      	lsls	r2, r1, #3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fda:	464b      	mov	r3, r9
 8004fdc:	460a      	mov	r2, r1
 8004fde:	eb42 0303 	adc.w	r3, r2, r3
 8004fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	663b      	str	r3, [r7, #96]	; 0x60
 8004fee:	667a      	str	r2, [r7, #100]	; 0x64
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ffc:	4649      	mov	r1, r9
 8004ffe:	008b      	lsls	r3, r1, #2
 8005000:	4641      	mov	r1, r8
 8005002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005006:	4641      	mov	r1, r8
 8005008:	008a      	lsls	r2, r1, #2
 800500a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800500e:	f7fb f9b7 	bl	8000380 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <UART_SetConfig+0x4e4>)
 8005018:	fba3 1302 	umull	r1, r3, r3, r2
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	2164      	movs	r1, #100	; 0x64
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	3332      	adds	r3, #50	; 0x32
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <UART_SetConfig+0x4e4>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4422      	add	r2, r4
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504c:	51eb851f 	.word	0x51eb851f

08005050 <__NVIC_SetPriority>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	; (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	; (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <SysTick_Handler+0x1c>)
 80050aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050ac:	f002 f95c 	bl	8007368 <xTaskGetSchedulerState>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050b6:	f000 fd97 	bl	8005be8 <xPortSysTickHandler>
  }
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010

080050c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050c8:	2100      	movs	r1, #0
 80050ca:	f06f 0004 	mvn.w	r0, #4
 80050ce:	f7ff ffbf 	bl	8005050 <__NVIC_SetPriority>
#endif
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050de:	f3ef 8305 	mrs	r3, IPSR
 80050e2:	603b      	str	r3, [r7, #0]
  return(result);
 80050e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ea:	f06f 0305 	mvn.w	r3, #5
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	e00c      	b.n	800510c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <osKernelInitialize+0x44>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <osKernelInitialize+0x44>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005100:	2300      	movs	r3, #0
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	e002      	b.n	800510c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800510a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800510c:	687b      	ldr	r3, [r7, #4]
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20004830 	.word	0x20004830

08005120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005126:	f3ef 8305 	mrs	r3, IPSR
 800512a:	603b      	str	r3, [r7, #0]
  return(result);
 800512c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005132:	f06f 0305 	mvn.w	r3, #5
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	e010      	b.n	800515c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <osKernelStart+0x48>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d109      	bne.n	8005156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005142:	f7ff ffbf 	bl	80050c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <osKernelStart+0x48>)
 8005148:	2202      	movs	r2, #2
 800514a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800514c:	f001 fc9e 	bl	8006a8c <vTaskStartScheduler>
      stat = osOK;
 8005150:	2300      	movs	r3, #0
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	e002      	b.n	800515c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800515a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800515c:	687b      	ldr	r3, [r7, #4]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20004830 	.word	0x20004830

0800516c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af04      	add	r7, sp, #16
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800517c:	f3ef 8305 	mrs	r3, IPSR
 8005180:	617b      	str	r3, [r7, #20]
  return(result);
 8005182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005184:	2b00      	cmp	r3, #0
 8005186:	d17e      	bne.n	8005286 <osThreadNew+0x11a>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d07b      	beq.n	8005286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005192:	2318      	movs	r3, #24
 8005194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800519e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d045      	beq.n	8005232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <osThreadNew+0x48>
        name = attr->name;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <osThreadNew+0x6e>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b38      	cmp	r3, #56	; 0x38
 80051cc:	d805      	bhi.n	80051da <osThreadNew+0x6e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <osThreadNew+0x72>
        return (NULL);
 80051da:	2300      	movs	r3, #0
 80051dc:	e054      	b.n	8005288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	089b      	lsrs	r3, r3, #2
 80051ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <osThreadNew+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b5b      	cmp	r3, #91	; 0x5b
 80051fc:	d90a      	bls.n	8005214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <osThreadNew+0xa8>
        mem = 1;
 800520e:	2301      	movs	r3, #1
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e010      	b.n	8005236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10c      	bne.n	8005236 <osThreadNew+0xca>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d108      	bne.n	8005236 <osThreadNew+0xca>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <osThreadNew+0xca>
          mem = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e001      	b.n	8005236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d110      	bne.n	800525e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005244:	9202      	str	r2, [sp, #8]
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 fa44 	bl	80066e0 <xTaskCreateStatic>
 8005258:	4603      	mov	r3, r0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e013      	b.n	8005286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d110      	bne.n	8005286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f107 0310 	add.w	r3, r7, #16
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f001 fa8f 	bl	800679a <xTaskCreate>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <osThreadNew+0x11a>
            hTask = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005286:	693b      	ldr	r3, [r7, #16]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	60bb      	str	r3, [r7, #8]
  return(result);
 800529e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <osDelay+0x1c>
    stat = osErrorISR;
 80052a4:	f06f 0305 	mvn.w	r3, #5
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e007      	b.n	80052bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fbb4 	bl	8006a24 <vTaskDelay>
    }
  }

  return (stat);
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80052d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a06      	ldr	r2, [pc, #24]	; (80052f8 <vApplicationGetIdleTaskMemory+0x30>)
 80052de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20004834 	.word	0x20004834
 80052f8:	20004890 	.word	0x20004890

080052fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a07      	ldr	r2, [pc, #28]	; (8005328 <vApplicationGetTimerTaskMemory+0x2c>)
 800530c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4a06      	ldr	r2, [pc, #24]	; (800532c <vApplicationGetTimerTaskMemory+0x30>)
 8005312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20004a90 	.word	0x20004a90
 800532c:	20004aec 	.word	0x20004aec

08005330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800533c:	f001 fc0c 	bl	8006b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005340:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <pvPortMalloc+0x180>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005348:	f000 f920 	bl	800558c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800534c:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <pvPortMalloc+0x184>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 8093 	bne.w	8005480 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01d      	beq.n	800539c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b00      	cmp	r3, #0
 8005370:	d014      	beq.n	800539c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	3308      	adds	r3, #8
 800537a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <pvPortMalloc+0x6c>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d06e      	beq.n	8005480 <pvPortMalloc+0x150>
 80053a2:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <pvPortMalloc+0x188>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d869      	bhi.n	8005480 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ac:	4b43      	ldr	r3, [pc, #268]	; (80054bc <pvPortMalloc+0x18c>)
 80053ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <pvPortMalloc+0x18c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b6:	e004      	b.n	80053c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d903      	bls.n	80053d4 <pvPortMalloc+0xa4>
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f1      	bne.n	80053b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <pvPortMalloc+0x180>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	429a      	cmp	r2, r3
 80053dc:	d050      	beq.n	8005480 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2208      	movs	r2, #8
 80053e4:	4413      	add	r3, r2
 80053e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad2      	subs	r2, r2, r3
 80053f8:	2308      	movs	r3, #8
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d91f      	bls.n	8005440 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <pvPortMalloc+0xf8>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	613b      	str	r3, [r7, #16]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800543a:	69b8      	ldr	r0, [r7, #24]
 800543c:	f000 f908 	bl	8005650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <pvPortMalloc+0x188>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <pvPortMalloc+0x188>)
 800544c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544e:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <pvPortMalloc+0x188>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <pvPortMalloc+0x190>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d203      	bcs.n	8005462 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800545a:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <pvPortMalloc+0x188>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <pvPortMalloc+0x190>)
 8005460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <pvPortMalloc+0x184>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	431a      	orrs	r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <pvPortMalloc+0x194>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <pvPortMalloc+0x194>)
 800547e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005480:	f001 fb78 	bl	8006b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <pvPortMalloc+0x174>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	60fb      	str	r3, [r7, #12]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <pvPortMalloc+0x172>
	return pvReturn;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20008af4 	.word	0x20008af4
 80054b4:	20008b08 	.word	0x20008b08
 80054b8:	20008af8 	.word	0x20008af8
 80054bc:	20008aec 	.word	0x20008aec
 80054c0:	20008afc 	.word	0x20008afc
 80054c4:	20008b00 	.word	0x20008b00

080054c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04d      	beq.n	8005576 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054da:	2308      	movs	r3, #8
 80054dc:	425b      	negs	r3, r3
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <vPortFree+0xb8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <vPortFree+0x44>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60fb      	str	r3, [r7, #12]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <vPortFree+0x62>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60bb      	str	r3, [r7, #8]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <vPortFree+0xb8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01e      	beq.n	8005576 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11a      	bne.n	8005576 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <vPortFree+0xb8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005550:	f001 fb02 	bl	8006b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <vPortFree+0xbc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4413      	add	r3, r2
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <vPortFree+0xbc>)
 8005560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f000 f874 	bl	8005650 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <vPortFree+0xc0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a06      	ldr	r2, [pc, #24]	; (8005588 <vPortFree+0xc0>)
 8005570:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005572:	f001 faff 	bl	8006b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20008b08 	.word	0x20008b08
 8005584:	20008af8 	.word	0x20008af8
 8005588:	20008b04 	.word	0x20008b04

0800558c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005592:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <prvHeapInit+0xac>)
 800559a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3307      	adds	r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0307 	bic.w	r3, r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <prvHeapInit+0xac>)
 80055bc:	4413      	add	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <prvHeapInit+0xb0>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055ca:	4b1c      	ldr	r3, [pc, #112]	; (800563c <prvHeapInit+0xb0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4413      	add	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055d8:	2208      	movs	r2, #8
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0307 	bic.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <prvHeapInit+0xb4>)
 80055ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <prvHeapInit+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <prvHeapInit+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <prvHeapInit+0xb4>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <prvHeapInit+0xb8>)
 800561a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a09      	ldr	r2, [pc, #36]	; (8005648 <prvHeapInit+0xbc>)
 8005622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <prvHeapInit+0xc0>)
 8005626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20004eec 	.word	0x20004eec
 800563c:	20008aec 	.word	0x20008aec
 8005640:	20008af4 	.word	0x20008af4
 8005644:	20008afc 	.word	0x20008afc
 8005648:	20008af8 	.word	0x20008af8
 800564c:	20008b08 	.word	0x20008b08

08005650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005658:	4b28      	ldr	r3, [pc, #160]	; (80056fc <prvInsertBlockIntoFreeList+0xac>)
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e002      	b.n	8005664 <prvInsertBlockIntoFreeList+0x14>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d8f7      	bhi.n	800565e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4413      	add	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d108      	bne.n	8005692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	441a      	add	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	441a      	add	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d118      	bne.n	80056d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <prvInsertBlockIntoFreeList+0xb0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d00d      	beq.n	80056ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e008      	b.n	80056e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <prvInsertBlockIntoFreeList+0xb0>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e003      	b.n	80056e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d002      	beq.n	80056ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20008aec 	.word	0x20008aec
 8005700:	20008af4 	.word	0x20008af4

08005704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f103 0208 	add.w	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800571c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f103 0208 	add.w	r2, r3, #8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f103 0208 	add.w	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057bc:	d103      	bne.n	80057c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e00c      	b.n	80057e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3308      	adds	r3, #8
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e002      	b.n	80057d4 <vListInsert+0x2e>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d2f6      	bcs.n	80057ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6892      	ldr	r2, [r2, #8]
 800582e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6852      	ldr	r2, [r2, #4]
 8005838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d103      	bne.n	800584c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b04      	subs	r3, #4
 800587c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b04      	subs	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b04      	subs	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800589c:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <pxPortInitialiseStack+0x64>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b14      	subs	r3, #20
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b04      	subs	r3, #4
 80058b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f06f 0202 	mvn.w	r2, #2
 80058ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3b20      	subs	r3, #32
 80058c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	080058d5 	.word	0x080058d5

080058d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <prvTaskExitError+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e6:	d00a      	beq.n	80058fe <prvTaskExitError+0x2a>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60fb      	str	r3, [r7, #12]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <prvTaskExitError+0x28>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60bb      	str	r3, [r7, #8]
}
 8005910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005912:	bf00      	nop
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0fc      	beq.n	8005914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000010 	.word	0x20000010
 800592c:	00000000 	.word	0x00000000

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	4770      	bx	lr
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst2>:
 8005950:	20008b54 	.word	0x20008b54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005958:	4808      	ldr	r0, [pc, #32]	; (800597c <prvPortStartFirstTask+0x24>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8814 	msr	CONTROL, r0
 800596a:	b662      	cpsie	i
 800596c:	b661      	cpsie	f
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	df00      	svc	0
 8005978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800597a:	bf00      	nop
 800597c:	e000ed08 	.word	0xe000ed08

08005980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005986:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <xPortStartScheduler+0x120>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a46      	ldr	r2, [pc, #280]	; (8005aa4 <xPortStartScheduler+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10a      	bne.n	80059a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <xPortStartScheduler+0x120>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <xPortStartScheduler+0x128>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10a      	bne.n	80059c6 <xPortStartScheduler+0x46>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059c6:	4b39      	ldr	r3, [pc, #228]	; (8005aac <xPortStartScheduler+0x12c>)
 80059c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <xPortStartScheduler+0x130>)
 80059ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ee:	4b31      	ldr	r3, [pc, #196]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059f4:	e009      	b.n	8005a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	4a2d      	ldr	r2, [pc, #180]	; (8005ab4 <xPortStartScheduler+0x134>)
 80059fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d0ef      	beq.n	80059f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1c3 0307 	rsb	r3, r3, #7
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d00a      	beq.n	8005a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a38:	4b1e      	ldr	r3, [pc, #120]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <xPortStartScheduler+0x134>)
 8005a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <xPortStartScheduler+0x138>)
 8005a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a6e:	f000 f8dd 	bl	8005c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <xPortStartScheduler+0x13c>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a78:	f000 f8fc 	bl	8005c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a7c:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <xPortStartScheduler+0x140>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <xPortStartScheduler+0x140>)
 8005a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a88:	f7ff ff66 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a8c:	f001 f9da 	bl	8006e44 <vTaskSwitchContext>
	prvTaskExitError();
 8005a90:	f7ff ff20 	bl	80058d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	e000ed00 	.word	0xe000ed00
 8005aa4:	410fc271 	.word	0x410fc271
 8005aa8:	410fc270 	.word	0x410fc270
 8005aac:	e000e400 	.word	0xe000e400
 8005ab0:	20008b0c 	.word	0x20008b0c
 8005ab4:	20008b10 	.word	0x20008b10
 8005ab8:	e000ed20 	.word	0xe000ed20
 8005abc:	20000010 	.word	0x20000010
 8005ac0:	e000ef34 	.word	0xe000ef34

08005ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <vPortEnterCritical+0x58>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <vPortEnterCritical+0x58>)
 8005ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <vPortEnterCritical+0x58>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10f      	bne.n	8005b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <vPortEnterCritical+0x5c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	603b      	str	r3, [r7, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <vPortEnterCritical+0x4a>
	}
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20000010 	.word	0x20000010
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <vPortExitCritical+0x50>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <vPortExitCritical+0x24>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	607b      	str	r3, [r7, #4]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <vPortExitCritical+0x50>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <vPortExitCritical+0x50>)
 8005b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b52:	4b08      	ldr	r3, [pc, #32]	; (8005b74 <vPortExitCritical+0x50>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <vPortExitCritical+0x42>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010
	...

08005b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <pxCurrentTCBConst>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f01e 0f10 	tst.w	lr, #16
 8005b90:	bf08      	it	eq
 8005b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ba4:	f380 8811 	msr	BASEPRI, r0
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f001 f948 	bl	8006e44 <vTaskSwitchContext>
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f380 8811 	msr	BASEPRI, r0
 8005bbc:	bc09      	pop	{r0, r3}
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	f01e 0f10 	tst.w	lr, #16
 8005bca:	bf08      	it	eq
 8005bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bd0:	f380 8809 	msr	PSP, r0
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst>:
 8005be0:	20008b54 	.word	0x20008b54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c02:	f001 f865 	bl	8006cd0 <xTaskIncrementTick>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <xPortSysTickHandler+0x40>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	2300      	movs	r3, #0
 8005c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
}
 8005c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vPortSetupTimerInterrupt+0x38>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <vPortSetupTimerInterrupt+0x3c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <vPortSetupTimerInterrupt+0x40>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <vPortSetupTimerInterrupt+0x44>)
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <vPortSetupTimerInterrupt+0x34>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e010 	.word	0xe000e010
 8005c64:	e000e018 	.word	0xe000e018
 8005c68:	20000004 	.word	0x20000004
 8005c6c:	10624dd3 	.word	0x10624dd3
 8005c70:	e000e014 	.word	0xe000e014

08005c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c84 <vPortEnableVFP+0x10>
 8005c78:	6801      	ldr	r1, [r0, #0]
 8005c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c7e:	6001      	str	r1, [r0, #0]
 8005c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c82:	bf00      	nop
 8005c84:	e000ed88 	.word	0xe000ed88

08005c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c8e:	f3ef 8305 	mrs	r3, IPSR
 8005c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d914      	bls.n	8005cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <vPortValidateInterruptPriority+0x70>)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ca4:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <vPortValidateInterruptPriority+0x74>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	7afa      	ldrb	r2, [r7, #11]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d20a      	bcs.n	8005cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <vPortValidateInterruptPriority+0x78>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <vPortValidateInterruptPriority+0x7c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d90a      	bls.n	8005cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	603b      	str	r3, [r7, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <vPortValidateInterruptPriority+0x60>
	}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	e000e3f0 	.word	0xe000e3f0
 8005cfc:	20008b0c 	.word	0x20008b0c
 8005d00:	e000ed0c 	.word	0xe000ed0c
 8005d04:	20008b10 	.word	0x20008b10

08005d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueGenericReset+0x2a>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	60bb      	str	r3, [r7, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d32:	f7ff fec7 	bl	8005ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	3b01      	subs	r3, #1
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	441a      	add	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d114      	bne.n	8005db2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3310      	adds	r3, #16
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f903 	bl	8006fa0 <xTaskRemoveFromEventList>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d012      	beq.n	8005dc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <xQueueGenericReset+0xcc>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	e009      	b.n	8005dc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3310      	adds	r3, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fca4 	bl	8005704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3324      	adds	r3, #36	; 0x24
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fc9f 	bl	8005704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005dc6:	f7ff fead 	bl	8005b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dca:	2301      	movs	r3, #1
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08e      	sub	sp, #56	; 0x38
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <xQueueGenericCreateStatic+0x52>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <xQueueGenericCreateStatic+0x56>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <xQueueGenericCreateStatic+0x58>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	623b      	str	r3, [r7, #32]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <xQueueGenericCreateStatic+0x7e>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <xQueueGenericCreateStatic+0x82>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <xQueueGenericCreateStatic+0x84>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61fb      	str	r3, [r7, #28]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e76:	2350      	movs	r3, #80	; 0x50
 8005e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b50      	cmp	r3, #80	; 0x50
 8005e7e:	d00a      	beq.n	8005e96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61bb      	str	r3, [r7, #24]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00d      	beq.n	8005ebe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f805 	bl	8005ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3730      	adds	r7, #48	; 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	69b8      	ldr	r0, [r7, #24]
 8005efa:	f7ff ff05 	bl	8005d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08e      	sub	sp, #56	; 0x38
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericSend+0x32>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d103      	bne.n	8005f50 <xQueueGenericSend+0x40>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <xQueueGenericSend+0x44>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <xQueueGenericSend+0x46>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <xQueueGenericSend+0x60>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSend+0x6e>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericSend+0x72>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericSend+0x74>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10a      	bne.n	8005f9e <xQueueGenericSend+0x8e>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	623b      	str	r3, [r7, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	e7fe      	b.n	8005f9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f9e:	f001 f9e3 	bl	8007368 <xTaskGetSchedulerState>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <xQueueGenericSend+0x9e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <xQueueGenericSend+0xa2>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <xQueueGenericSend+0xa4>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xQueueGenericSend+0xbe>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	61fb      	str	r3, [r7, #28]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fce:	f7ff fd79 	bl	8005ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <xQueueGenericSend+0xd4>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d129      	bne.n	8006038 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fea:	f000 fa0b 	bl	8006404 <prvCopyDataToQueue>
 8005fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d010      	beq.n	800601a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 ffcf 	bl	8006fa0 <xTaskRemoveFromEventList>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d013      	beq.n	8006030 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006008:	4b3f      	ldr	r3, [pc, #252]	; (8006108 <xQueueGenericSend+0x1f8>)
 800600a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	e00a      	b.n	8006030 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006020:	4b39      	ldr	r3, [pc, #228]	; (8006108 <xQueueGenericSend+0x1f8>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006030:	f7ff fd78 	bl	8005b24 <vPortExitCritical>
				return pdPASS;
 8006034:	2301      	movs	r3, #1
 8006036:	e063      	b.n	8006100 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800603e:	f7ff fd71 	bl	8005b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006042:	2300      	movs	r3, #0
 8006044:	e05c      	b.n	8006100 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604c:	f107 0314 	add.w	r3, r7, #20
 8006050:	4618      	mov	r0, r3
 8006052:	f001 f82f 	bl	80070b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006056:	2301      	movs	r3, #1
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800605a:	f7ff fd63 	bl	8005b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800605e:	f000 fd7b 	bl	8006b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006062:	f7ff fd2f 	bl	8005ac4 <vPortEnterCritical>
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800606c:	b25b      	sxtb	r3, r3
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006072:	d103      	bne.n	800607c <xQueueGenericSend+0x16c>
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006088:	d103      	bne.n	8006092 <xQueueGenericSend+0x182>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006092:	f7ff fd47 	bl	8005b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006096:	1d3a      	adds	r2, r7, #4
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f81e 	bl	80070e0 <xTaskCheckForTimeOut>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d124      	bne.n	80060f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ac:	f000 faa2 	bl	80065f4 <prvIsQueueFull>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	3310      	adds	r3, #16
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 ff1e 	bl	8006f00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060c6:	f000 fa2d 	bl	8006524 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80060ca:	f000 fd53 	bl	8006b74 <xTaskResumeAll>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f af7c 	bne.w	8005fce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <xQueueGenericSend+0x1f8>)
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	e772      	b.n	8005fce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ea:	f000 fa1b 	bl	8006524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ee:	f000 fd41 	bl	8006b74 <xTaskResumeAll>
 80060f2:	e76c      	b.n	8005fce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f6:	f000 fa15 	bl	8006524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060fa:	f000 fd3b 	bl	8006b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006100:	4618      	mov	r0, r3
 8006102:	3738      	adds	r7, #56	; 0x38
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b090      	sub	sp, #64	; 0x40
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <xQueueGenericSendFromISR+0x3c>
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <xQueueGenericSendFromISR+0x40>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <xQueueGenericSendFromISR+0x42>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d103      	bne.n	8006176 <xQueueGenericSendFromISR+0x6a>
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <xQueueGenericSendFromISR+0x6e>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <xQueueGenericSendFromISR+0x70>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006196:	f7ff fd77 	bl	8005c88 <vPortValidateInterruptPriority>
	__asm volatile
 800619a:	f3ef 8211 	mrs	r2, BASEPRI
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	61fa      	str	r2, [r7, #28]
 80061b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80061b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <xQueueGenericSendFromISR+0xbc>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d12f      	bne.n	8006228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061de:	f000 f911 	bl	8006404 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ea:	d112      	bne.n	8006212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d016      	beq.n	8006222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	3324      	adds	r3, #36	; 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fed1 	bl	8006fa0 <xTaskRemoveFromEventList>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006216:	3301      	adds	r3, #1
 8006218:	b2db      	uxtb	r3, r3
 800621a:	b25a      	sxtb	r2, r3
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006222:	2301      	movs	r3, #1
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006226:	e001      	b.n	800622c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006228:	2300      	movs	r3, #0
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f383 8811 	msr	BASEPRI, r3
}
 8006236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800623a:	4618      	mov	r0, r3
 800623c:	3740      	adds	r7, #64	; 0x40
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	; 0x30
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <xQueueReceive+0x30>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	623b      	str	r3, [r7, #32]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueReceive+0x3e>
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <xQueueReceive+0x42>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueReceive+0x44>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueReceive+0x5e>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	61fb      	str	r3, [r7, #28]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062a2:	f001 f861 	bl	8007368 <xTaskGetSchedulerState>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d102      	bne.n	80062b2 <xQueueReceive+0x6e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <xQueueReceive+0x72>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <xQueueReceive+0x74>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueReceive+0x8e>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	61bb      	str	r3, [r7, #24]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062d2:	f7ff fbf7 	bl	8005ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01f      	beq.n	8006322 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f000 f8f7 	bl	80064d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1e5a      	subs	r2, r3, #1
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00f      	beq.n	800631a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	3310      	adds	r3, #16
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fe4e 	bl	8006fa0 <xTaskRemoveFromEventList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800630a:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <xQueueReceive+0x1bc>)
 800630c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800631a:	f7ff fc03 	bl	8005b24 <vPortExitCritical>
				return pdPASS;
 800631e:	2301      	movs	r3, #1
 8006320:	e069      	b.n	80063f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006328:	f7ff fbfc 	bl	8005b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800632c:	2300      	movs	r3, #0
 800632e:	e062      	b.n	80063f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006336:	f107 0310 	add.w	r3, r7, #16
 800633a:	4618      	mov	r0, r3
 800633c:	f000 feba 	bl	80070b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006340:	2301      	movs	r3, #1
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006344:	f7ff fbee 	bl	8005b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006348:	f000 fc06 	bl	8006b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800634c:	f7ff fbba 	bl	8005ac4 <vPortEnterCritical>
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006356:	b25b      	sxtb	r3, r3
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635c:	d103      	bne.n	8006366 <xQueueReceive+0x122>
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800636c:	b25b      	sxtb	r3, r3
 800636e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006372:	d103      	bne.n	800637c <xQueueReceive+0x138>
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800637c:	f7ff fbd2 	bl	8005b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006380:	1d3a      	adds	r2, r7, #4
 8006382:	f107 0310 	add.w	r3, r7, #16
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fea9 	bl	80070e0 <xTaskCheckForTimeOut>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d123      	bne.n	80063dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006396:	f000 f917 	bl	80065c8 <prvIsQueueEmpty>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d017      	beq.n	80063d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	3324      	adds	r3, #36	; 0x24
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fda9 	bl	8006f00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b0:	f000 f8b8 	bl	8006524 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063b4:	f000 fbde 	bl	8006b74 <xTaskResumeAll>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d189      	bne.n	80062d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xQueueReceive+0x1bc>)
 80063c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	e780      	b.n	80062d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d2:	f000 f8a7 	bl	8006524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063d6:	f000 fbcd 	bl	8006b74 <xTaskResumeAll>
 80063da:	e77a      	b.n	80062d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063de:	f000 f8a1 	bl	8006524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063e2:	f000 fbc7 	bl	8006b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e8:	f000 f8ee 	bl	80065c8 <prvIsQueueEmpty>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f43f af6f 	beq.w	80062d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3730      	adds	r7, #48	; 0x30
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d14d      	bne.n	80064c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 ffb8 	bl	80073a4 <xTaskPriorityDisinherit>
 8006434:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
 800643c:	e043      	b.n	80064c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d119      	bne.n	8006478 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6858      	ldr	r0, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	461a      	mov	r2, r3
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	f00b fbdb 	bl	8011c0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	441a      	add	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	d32b      	bcc.n	80064c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	e026      	b.n	80064c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68d8      	ldr	r0, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	461a      	mov	r2, r3
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	f00b fbc1 	bl	8011c0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	425b      	negs	r3, r3
 8006492:	441a      	add	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d207      	bcs.n	80064b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	425b      	negs	r3, r3
 80064ae:	441a      	add	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d105      	bne.n	80064c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	441a      	add	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d303      	bcc.n	800650c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68d9      	ldr	r1, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	461a      	mov	r2, r3
 8006516:	6838      	ldr	r0, [r7, #0]
 8006518:	f00b fb77 	bl	8011c0a <memcpy>
	}
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800652c:	f7ff faca 	bl	8005ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006536:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006538:	e011      	b.n	800655e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d012      	beq.n	8006568 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3324      	adds	r3, #36	; 0x24
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fd2a 	bl	8006fa0 <xTaskRemoveFromEventList>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006552:	f000 fe27 	bl	80071a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	3b01      	subs	r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800655e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dce9      	bgt.n	800653a <prvUnlockQueue+0x16>
 8006566:	e000      	b.n	800656a <prvUnlockQueue+0x46>
					break;
 8006568:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006572:	f7ff fad7 	bl	8005b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006576:	f7ff faa5 	bl	8005ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006580:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006582:	e011      	b.n	80065a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d012      	beq.n	80065b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3310      	adds	r3, #16
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fd05 	bl	8006fa0 <xTaskRemoveFromEventList>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800659c:	f000 fe02 	bl	80071a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dce9      	bgt.n	8006584 <prvUnlockQueue+0x60>
 80065b0:	e000      	b.n	80065b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	22ff      	movs	r2, #255	; 0xff
 80065b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065bc:	f7ff fab2 	bl	8005b24 <vPortExitCritical>
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d0:	f7ff fa78 	bl	8005ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e001      	b.n	80065e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065e6:	f7ff fa9d 	bl	8005b24 <vPortExitCritical>

	return xReturn;
 80065ea:	68fb      	ldr	r3, [r7, #12]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065fc:	f7ff fa62 	bl	8005ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	429a      	cmp	r2, r3
 800660a:	d102      	bne.n	8006612 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800660c:	2301      	movs	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e001      	b.n	8006616 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006616:	f7ff fa85 	bl	8005b24 <vPortExitCritical>

	return xReturn;
 800661a:	68fb      	ldr	r3, [r7, #12]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e014      	b.n	800665e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006634:	4a0f      	ldr	r2, [pc, #60]	; (8006674 <vQueueAddToRegistry+0x50>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006640:	490c      	ldr	r1, [pc, #48]	; (8006674 <vQueueAddToRegistry+0x50>)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800664a:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <vQueueAddToRegistry+0x50>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006656:	e006      	b.n	8006666 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b07      	cmp	r3, #7
 8006662:	d9e7      	bls.n	8006634 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20008b14 	.word	0x20008b14

08006678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006688:	f7ff fa1c 	bl	8005ac4 <vPortEnterCritical>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006692:	b25b      	sxtb	r3, r3
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006698:	d103      	bne.n	80066a2 <vQueueWaitForMessageRestricted+0x2a>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ae:	d103      	bne.n	80066b8 <vQueueWaitForMessageRestricted+0x40>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b8:	f7ff fa34 	bl	8005b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fc3b 	bl	8006f48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066d2:	6978      	ldr	r0, [r7, #20]
 80066d4:	f7ff ff26 	bl	8006524 <prvUnlockQueue>
	}
 80066d8:	bf00      	nop
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08e      	sub	sp, #56	; 0x38
 80066e4:	af04      	add	r7, sp, #16
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <xTaskCreateStatic+0x2a>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	623b      	str	r3, [r7, #32]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xTaskCreateStatic+0x46>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61fb      	str	r3, [r7, #28]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006726:	235c      	movs	r3, #92	; 0x5c
 8006728:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b5c      	cmp	r3, #92	; 0x5c
 800672e:	d00a      	beq.n	8006746 <xTaskCreateStatic+0x66>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	61bb      	str	r3, [r7, #24]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006746:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01e      	beq.n	800678c <xTaskCreateStatic+0xac>
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800675c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2202      	movs	r2, #2
 8006762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006766:	2300      	movs	r3, #0
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f850 	bl	8006824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006786:	f000 f8dd 	bl	8006944 <prvAddNewTaskToReadyList>
 800678a:	e001      	b.n	8006790 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006790:	697b      	ldr	r3, [r7, #20]
	}
 8006792:	4618      	mov	r0, r3
 8006794:	3728      	adds	r7, #40	; 0x28
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800679a:	b580      	push	{r7, lr}
 800679c:	b08c      	sub	sp, #48	; 0x30
 800679e:	af04      	add	r7, sp, #16
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fdbe 	bl	8005330 <pvPortMalloc>
 80067b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00e      	beq.n	80067da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067bc:	205c      	movs	r0, #92	; 0x5c
 80067be:	f7fe fdb7 	bl	8005330 <pvPortMalloc>
 80067c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
 80067d0:	e005      	b.n	80067de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	f7fe fe78 	bl	80054c8 <vPortFree>
 80067d8:	e001      	b.n	80067de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d017      	beq.n	8006814 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	2300      	movs	r3, #0
 80067f0:	9303      	str	r3, [sp, #12]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 f80e 	bl	8006824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006808:	69f8      	ldr	r0, [r7, #28]
 800680a:	f000 f89b 	bl	8006944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800680e:	2301      	movs	r3, #1
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e002      	b.n	800681a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006818:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800681a:	69bb      	ldr	r3, [r7, #24]
	}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	461a      	mov	r2, r3
 800683c:	21a5      	movs	r1, #165	; 0xa5
 800683e:	f00b f91b 	bl	8011a78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800684c:	3b01      	subs	r3, #1
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f023 0307 	bic.w	r3, r3, #7
 800685a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	617b      	str	r3, [r7, #20]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01f      	beq.n	80068c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e012      	b.n	80068ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	7819      	ldrb	r1, [r3, #0]
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	3334      	adds	r3, #52	; 0x34
 8006898:	460a      	mov	r2, r1
 800689a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d006      	beq.n	80068b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9e9      	bls.n	8006888 <prvInitialiseNewTask+0x64>
 80068b4:	e000      	b.n	80068b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80068b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c0:	e003      	b.n	80068ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	2b37      	cmp	r3, #55	; 0x37
 80068ce:	d901      	bls.n	80068d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068d0:	2337      	movs	r3, #55	; 0x37
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	2200      	movs	r2, #0
 80068e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe ff2a 	bl	8005744 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	3318      	adds	r3, #24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe ff25 	bl	8005744 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	2200      	movs	r2, #0
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	69b8      	ldr	r0, [r7, #24]
 8006924:	f7fe ffa2 	bl	800586c <pxPortInitialiseStack>
 8006928:	4602      	mov	r2, r0
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800693a:	bf00      	nop
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800694c:	f7ff f8ba 	bl	8005ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006950:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a2c      	ldr	r2, [pc, #176]	; (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006962:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d110      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006970:	f000 fc3c 	bl	80071ec <prvInitialiseTaskLists>
 8006974:	e00d      	b.n	8006992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800697e:	4b23      	ldr	r3, [pc, #140]	; (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	429a      	cmp	r2, r3
 800698a:	d802      	bhi.n	8006992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800698c:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800699c:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b1b      	ldr	r3, [pc, #108]	; (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <prvAddNewTaskToReadyList+0x74>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <prvAddNewTaskToReadyList+0xd4>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <prvAddNewTaskToReadyList+0xd8>)
 80069c6:	441a      	add	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fec5 	bl	800575e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069d4:	f7ff f8a6 	bl	8005b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069d8:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d207      	bcs.n	80069fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <prvAddNewTaskToReadyList+0xdc>)
 80069f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20009028 	.word	0x20009028
 8006a0c:	20008b54 	.word	0x20008b54
 8006a10:	20009034 	.word	0x20009034
 8006a14:	20009044 	.word	0x20009044
 8006a18:	20009030 	.word	0x20009030
 8006a1c:	20008b58 	.word	0x20008b58
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d017      	beq.n	8006a66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <vTaskDelay+0x60>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <vTaskDelay+0x30>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60bb      	str	r3, [r7, #8]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a54:	f000 f880 	bl	8006b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a58:	2100      	movs	r1, #0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd10 	bl	8007480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a60:	f000 f888 	bl	8006b74 <xTaskResumeAll>
 8006a64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d107      	bne.n	8006a7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <vTaskDelay+0x64>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20009050 	.word	0x20009050
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a9a:	463a      	mov	r2, r7
 8006a9c:	1d39      	adds	r1, r7, #4
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe fc10 	bl	80052c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	9202      	str	r2, [sp, #8]
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	460a      	mov	r2, r1
 8006aba:	4921      	ldr	r1, [pc, #132]	; (8006b40 <vTaskStartScheduler+0xb4>)
 8006abc:	4821      	ldr	r0, [pc, #132]	; (8006b44 <vTaskStartScheduler+0xb8>)
 8006abe:	f7ff fe0f 	bl	80066e0 <xTaskCreateStatic>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <vTaskStartScheduler+0xbc>)
 8006ac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ac8:	4b1f      	ldr	r3, [pc, #124]	; (8006b48 <vTaskStartScheduler+0xbc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	e001      	b.n	8006ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d102      	bne.n	8006ae6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ae0:	f000 fd22 	bl	8007528 <xTimerCreateTimerTask>
 8006ae4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d116      	bne.n	8006b1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	613b      	str	r3, [r7, #16]
}
 8006afe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <vTaskStartScheduler+0xc0>)
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b08:	4b11      	ldr	r3, [pc, #68]	; (8006b50 <vTaskStartScheduler+0xc4>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <vTaskStartScheduler+0xc8>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b14:	f7fe ff34 	bl	8005980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b18:	e00e      	b.n	8006b38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b20:	d10a      	bne.n	8006b38 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60fb      	str	r3, [r7, #12]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <vTaskStartScheduler+0xaa>
}
 8006b38:	bf00      	nop
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08012a90 	.word	0x08012a90
 8006b44:	080071bd 	.word	0x080071bd
 8006b48:	2000904c 	.word	0x2000904c
 8006b4c:	20009048 	.word	0x20009048
 8006b50:	20009034 	.word	0x20009034
 8006b54:	2000902c 	.word	0x2000902c

08006b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b5c:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vTaskSuspendAll+0x18>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	4a03      	ldr	r2, [pc, #12]	; (8006b70 <vTaskSuspendAll+0x18>)
 8006b64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b66:	bf00      	nop
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20009050 	.word	0x20009050

08006b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <xTaskResumeAll+0x118>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	603b      	str	r3, [r7, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ba0:	f7fe ff90 	bl	8005ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ba4:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <xTaskResumeAll+0x118>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	4a38      	ldr	r2, [pc, #224]	; (8006c8c <xTaskResumeAll+0x118>)
 8006bac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bae:	4b37      	ldr	r3, [pc, #220]	; (8006c8c <xTaskResumeAll+0x118>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d162      	bne.n	8006c7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bb6:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <xTaskResumeAll+0x11c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d05e      	beq.n	8006c7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bbe:	e02f      	b.n	8006c20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc0:	4b34      	ldr	r3, [pc, #208]	; (8006c94 <xTaskResumeAll+0x120>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3318      	adds	r3, #24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fe23 	bl	8005818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fe1e 	bl	8005818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4b2d      	ldr	r3, [pc, #180]	; (8006c98 <xTaskResumeAll+0x124>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d903      	bls.n	8006bf0 <xTaskResumeAll+0x7c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <xTaskResumeAll+0x124>)
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <xTaskResumeAll+0x128>)
 8006bfe:	441a      	add	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fe fda9 	bl	800575e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <xTaskResumeAll+0x12c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c1a:	4b22      	ldr	r3, [pc, #136]	; (8006ca4 <xTaskResumeAll+0x130>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c20:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <xTaskResumeAll+0x120>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1cb      	bne.n	8006bc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c2e:	f000 fb7b 	bl	8007328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c32:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <xTaskResumeAll+0x134>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d010      	beq.n	8006c60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c3e:	f000 f847 	bl	8006cd0 <xTaskIncrementTick>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c48:	4b16      	ldr	r3, [pc, #88]	; (8006ca4 <xTaskResumeAll+0x130>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f1      	bne.n	8006c3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <xTaskResumeAll+0x134>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <xTaskResumeAll+0x130>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <xTaskResumeAll+0x138>)
 8006c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c7c:	f7fe ff52 	bl	8005b24 <vPortExitCritical>

	return xAlreadyYielded;
 8006c80:	68bb      	ldr	r3, [r7, #8]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20009050 	.word	0x20009050
 8006c90:	20009028 	.word	0x20009028
 8006c94:	20008fe8 	.word	0x20008fe8
 8006c98:	20009030 	.word	0x20009030
 8006c9c:	20008b58 	.word	0x20008b58
 8006ca0:	20008b54 	.word	0x20008b54
 8006ca4:	2000903c 	.word	0x2000903c
 8006ca8:	20009038 	.word	0x20009038
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <xTaskGetTickCount+0x1c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cbc:	687b      	ldr	r3, [r7, #4]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	2000902c 	.word	0x2000902c

08006cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cda:	4b4f      	ldr	r3, [pc, #316]	; (8006e18 <xTaskIncrementTick+0x148>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 808f 	bne.w	8006e02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ce4:	4b4d      	ldr	r3, [pc, #308]	; (8006e1c <xTaskIncrementTick+0x14c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cec:	4a4b      	ldr	r2, [pc, #300]	; (8006e1c <xTaskIncrementTick+0x14c>)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d120      	bne.n	8006d3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <xTaskIncrementTick+0x150>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	603b      	str	r3, [r7, #0]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xTaskIncrementTick+0x46>
 8006d18:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <xTaskIncrementTick+0x150>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <xTaskIncrementTick+0x154>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a3f      	ldr	r2, [pc, #252]	; (8006e20 <xTaskIncrementTick+0x150>)
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4a3f      	ldr	r2, [pc, #252]	; (8006e24 <xTaskIncrementTick+0x154>)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <xTaskIncrementTick+0x158>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3301      	adds	r3, #1
 8006d32:	4a3d      	ldr	r2, [pc, #244]	; (8006e28 <xTaskIncrementTick+0x158>)
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	f000 faf7 	bl	8007328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d3a:	4b3c      	ldr	r3, [pc, #240]	; (8006e2c <xTaskIncrementTick+0x15c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d349      	bcc.n	8006dd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d44:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <xTaskIncrementTick+0x150>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4e:	4b37      	ldr	r3, [pc, #220]	; (8006e2c <xTaskIncrementTick+0x15c>)
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d54:	601a      	str	r2, [r3, #0]
					break;
 8006d56:	e03f      	b.n	8006dd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d58:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <xTaskIncrementTick+0x150>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d203      	bcs.n	8006d78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d70:	4a2e      	ldr	r2, [pc, #184]	; (8006e2c <xTaskIncrementTick+0x15c>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d76:	e02f      	b.n	8006dd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fd4b 	bl	8005818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fd42 	bl	8005818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4b25      	ldr	r3, [pc, #148]	; (8006e30 <xTaskIncrementTick+0x160>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d903      	bls.n	8006da8 <xTaskIncrementTick+0xd8>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	4a22      	ldr	r2, [pc, #136]	; (8006e30 <xTaskIncrementTick+0x160>)
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4a1f      	ldr	r2, [pc, #124]	; (8006e34 <xTaskIncrementTick+0x164>)
 8006db6:	441a      	add	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f7fe fccd 	bl	800575e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <xTaskIncrementTick+0x168>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d3b8      	bcc.n	8006d44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd6:	e7b5      	b.n	8006d44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dd8:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <xTaskIncrementTick+0x168>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	4915      	ldr	r1, [pc, #84]	; (8006e34 <xTaskIncrementTick+0x164>)
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d901      	bls.n	8006df4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <xTaskIncrementTick+0x16c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	e004      	b.n	8006e0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTaskIncrementTick+0x170>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3301      	adds	r3, #1
 8006e08:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <xTaskIncrementTick+0x170>)
 8006e0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e0c:	697b      	ldr	r3, [r7, #20]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20009050 	.word	0x20009050
 8006e1c:	2000902c 	.word	0x2000902c
 8006e20:	20008fe0 	.word	0x20008fe0
 8006e24:	20008fe4 	.word	0x20008fe4
 8006e28:	20009040 	.word	0x20009040
 8006e2c:	20009048 	.word	0x20009048
 8006e30:	20009030 	.word	0x20009030
 8006e34:	20008b58 	.word	0x20008b58
 8006e38:	20008b54 	.word	0x20008b54
 8006e3c:	2000903c 	.word	0x2000903c
 8006e40:	20009038 	.word	0x20009038

08006e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e4a:	4b28      	ldr	r3, [pc, #160]	; (8006eec <vTaskSwitchContext+0xa8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e52:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <vTaskSwitchContext+0xac>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e58:	e041      	b.n	8006ede <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006e5a:	4b25      	ldr	r3, [pc, #148]	; (8006ef0 <vTaskSwitchContext+0xac>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <vTaskSwitchContext+0xb0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	e010      	b.n	8006e8a <vTaskSwitchContext+0x46>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <vTaskSwitchContext+0x40>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	607b      	str	r3, [r7, #4]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <vTaskSwitchContext+0x3e>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	491b      	ldr	r1, [pc, #108]	; (8006ef8 <vTaskSwitchContext+0xb4>)
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0e4      	beq.n	8006e68 <vTaskSwitchContext+0x24>
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <vTaskSwitchContext+0xb4>)
 8006eaa:	4413      	add	r3, r2
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	605a      	str	r2, [r3, #4]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d104      	bne.n	8006ece <vTaskSwitchContext+0x8a>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4a09      	ldr	r2, [pc, #36]	; (8006efc <vTaskSwitchContext+0xb8>)
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	4a06      	ldr	r2, [pc, #24]	; (8006ef4 <vTaskSwitchContext+0xb0>)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6013      	str	r3, [r2, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20009050 	.word	0x20009050
 8006ef0:	2000903c 	.word	0x2000903c
 8006ef4:	20009030 	.word	0x20009030
 8006ef8:	20008b58 	.word	0x20008b58
 8006efc:	20008b54 	.word	0x20008b54

08006f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f26:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <vTaskPlaceOnEventList+0x44>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe fc39 	bl	80057a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f34:	2101      	movs	r1, #1
 8006f36:	6838      	ldr	r0, [r7, #0]
 8006f38:	f000 faa2 	bl	8007480 <prvAddCurrentTaskToDelayedList>
}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20008b54 	.word	0x20008b54

08006f48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	617b      	str	r3, [r7, #20]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3318      	adds	r3, #24
 8006f76:	4619      	mov	r1, r3
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7fe fbf0 	bl	800575e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	68b8      	ldr	r0, [r7, #8]
 8006f8e:	f000 fa77 	bl	8007480 <prvAddCurrentTaskToDelayedList>
	}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20008b54 	.word	0x20008b54

08006fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	60fb      	str	r3, [r7, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3318      	adds	r3, #24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fc21 	bl	8005818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <xTaskRemoveFromEventList+0xb0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d11d      	bne.n	800701a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fc18 	bl	8005818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4b19      	ldr	r3, [pc, #100]	; (8007054 <xTaskRemoveFromEventList+0xb4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d903      	bls.n	8006ffc <xTaskRemoveFromEventList+0x5c>
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4a16      	ldr	r2, [pc, #88]	; (8007054 <xTaskRemoveFromEventList+0xb4>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4a13      	ldr	r2, [pc, #76]	; (8007058 <xTaskRemoveFromEventList+0xb8>)
 800700a:	441a      	add	r2, r3
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f7fe fba3 	bl	800575e <vListInsertEnd>
 8007018:	e005      	b.n	8007026 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3318      	adds	r3, #24
 800701e:	4619      	mov	r1, r3
 8007020:	480e      	ldr	r0, [pc, #56]	; (800705c <xTaskRemoveFromEventList+0xbc>)
 8007022:	f7fe fb9c 	bl	800575e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <xTaskRemoveFromEventList+0xc0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	429a      	cmp	r2, r3
 8007032:	d905      	bls.n	8007040 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007034:	2301      	movs	r3, #1
 8007036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <xTaskRemoveFromEventList+0xc4>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e001      	b.n	8007044 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007044:	697b      	ldr	r3, [r7, #20]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20009050 	.word	0x20009050
 8007054:	20009030 	.word	0x20009030
 8007058:	20008b58 	.word	0x20008b58
 800705c:	20008fe8 	.word	0x20008fe8
 8007060:	20008b54 	.word	0x20008b54
 8007064:	2000903c 	.word	0x2000903c

08007068 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60fb      	str	r3, [r7, #12]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800708c:	f7fe fd1a 	bl	8005ac4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <vTaskSetTimeOutState+0x44>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007098:	4b05      	ldr	r3, [pc, #20]	; (80070b0 <vTaskSetTimeOutState+0x48>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80070a0:	f7fe fd40 	bl	8005b24 <vPortExitCritical>
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20009040 	.word	0x20009040
 80070b0:	2000902c 	.word	0x2000902c

080070b4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <vTaskInternalSetTimeOutState+0x24>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <vTaskInternalSetTimeOutState+0x28>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	605a      	str	r2, [r3, #4]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20009040 	.word	0x20009040
 80070dc:	2000902c 	.word	0x2000902c

080070e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	613b      	str	r3, [r7, #16]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007122:	f7fe fccf 	bl	8005ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <xTaskCheckForTimeOut+0xbc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800713e:	d102      	bne.n	8007146 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e023      	b.n	800718e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <xTaskCheckForTimeOut+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d007      	beq.n	8007162 <xTaskCheckForTimeOut+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	429a      	cmp	r2, r3
 800715a:	d302      	bcc.n	8007162 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	e015      	b.n	800718e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	429a      	cmp	r2, r3
 800716a:	d20b      	bcs.n	8007184 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff ff9b 	bl	80070b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800717e:	2300      	movs	r3, #0
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e004      	b.n	800718e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800718a:	2301      	movs	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800718e:	f7fe fcc9 	bl	8005b24 <vPortExitCritical>

	return xReturn;
 8007192:	69fb      	ldr	r3, [r7, #28]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	2000902c 	.word	0x2000902c
 80071a0:	20009040 	.word	0x20009040

080071a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071a8:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <vTaskMissedYield+0x14>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	2000903c 	.word	0x2000903c

080071bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071c4:	f000 f852 	bl	800726c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <prvIdleTask+0x28>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d9f9      	bls.n	80071c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <prvIdleTask+0x2c>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071e0:	e7f0      	b.n	80071c4 <prvIdleTask+0x8>
 80071e2:	bf00      	nop
 80071e4:	20008b58 	.word	0x20008b58
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071f2:	2300      	movs	r3, #0
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	e00c      	b.n	8007212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <prvInitialiseTaskLists+0x60>)
 8007204:	4413      	add	r3, r2
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fa7c 	bl	8005704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3301      	adds	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b37      	cmp	r3, #55	; 0x37
 8007216:	d9ef      	bls.n	80071f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007218:	480d      	ldr	r0, [pc, #52]	; (8007250 <prvInitialiseTaskLists+0x64>)
 800721a:	f7fe fa73 	bl	8005704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800721e:	480d      	ldr	r0, [pc, #52]	; (8007254 <prvInitialiseTaskLists+0x68>)
 8007220:	f7fe fa70 	bl	8005704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007224:	480c      	ldr	r0, [pc, #48]	; (8007258 <prvInitialiseTaskLists+0x6c>)
 8007226:	f7fe fa6d 	bl	8005704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800722a:	480c      	ldr	r0, [pc, #48]	; (800725c <prvInitialiseTaskLists+0x70>)
 800722c:	f7fe fa6a 	bl	8005704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007230:	480b      	ldr	r0, [pc, #44]	; (8007260 <prvInitialiseTaskLists+0x74>)
 8007232:	f7fe fa67 	bl	8005704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007236:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <prvInitialiseTaskLists+0x78>)
 8007238:	4a05      	ldr	r2, [pc, #20]	; (8007250 <prvInitialiseTaskLists+0x64>)
 800723a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <prvInitialiseTaskLists+0x7c>)
 800723e:	4a05      	ldr	r2, [pc, #20]	; (8007254 <prvInitialiseTaskLists+0x68>)
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20008b58 	.word	0x20008b58
 8007250:	20008fb8 	.word	0x20008fb8
 8007254:	20008fcc 	.word	0x20008fcc
 8007258:	20008fe8 	.word	0x20008fe8
 800725c:	20008ffc 	.word	0x20008ffc
 8007260:	20009014 	.word	0x20009014
 8007264:	20008fe0 	.word	0x20008fe0
 8007268:	20008fe4 	.word	0x20008fe4

0800726c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007272:	e019      	b.n	80072a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007274:	f7fe fc26 	bl	8005ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007278:	4b10      	ldr	r3, [pc, #64]	; (80072bc <prvCheckTasksWaitingTermination+0x50>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fac7 	bl	8005818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <prvCheckTasksWaitingTermination+0x54>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3b01      	subs	r3, #1
 8007290:	4a0b      	ldr	r2, [pc, #44]	; (80072c0 <prvCheckTasksWaitingTermination+0x54>)
 8007292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	4a0a      	ldr	r2, [pc, #40]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 800729c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800729e:	f7fe fc41 	bl	8005b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f810 	bl	80072c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <prvCheckTasksWaitingTermination+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e1      	bne.n	8007274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20008ffc 	.word	0x20008ffc
 80072c0:	20009028 	.word	0x20009028
 80072c4:	20009010 	.word	0x20009010

080072c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe f8f2 	bl	80054c8 <vPortFree>
				vPortFree( pxTCB );
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fe f8ef 	bl	80054c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072ea:	e018      	b.n	800731e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d103      	bne.n	80072fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe f8e6 	bl	80054c8 <vPortFree>
	}
 80072fc:	e00f      	b.n	800731e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007304:	2b02      	cmp	r3, #2
 8007306:	d00a      	beq.n	800731e <prvDeleteTCB+0x56>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvDeleteTCB+0x54>
	}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <prvResetNextTaskUnblockTime+0x38>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <prvResetNextTaskUnblockTime+0x3c>)
 800733a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800733e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007340:	e008      	b.n	8007354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <prvResetNextTaskUnblockTime+0x38>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	4a04      	ldr	r2, [pc, #16]	; (8007364 <prvResetNextTaskUnblockTime+0x3c>)
 8007352:	6013      	str	r3, [r2, #0]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	20008fe0 	.word	0x20008fe0
 8007364:	20009048 	.word	0x20009048

08007368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <xTaskGetSchedulerState+0x34>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007376:	2301      	movs	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	e008      	b.n	800738e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <xTaskGetSchedulerState+0x38>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007384:	2302      	movs	r3, #2
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	e001      	b.n	800738e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800738e:	687b      	ldr	r3, [r7, #4]
	}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20009034 	.word	0x20009034
 80073a0:	20009050 	.word	0x20009050

080073a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d056      	beq.n	8007468 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <xTaskPriorityDisinherit+0xd0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d00a      	beq.n	80073da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740a:	429a      	cmp	r2, r3
 800740c:	d02c      	beq.n	8007468 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	2b00      	cmp	r3, #0
 8007414:	d128      	bne.n	8007468 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe f9fc 	bl	8005818 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <xTaskPriorityDisinherit+0xd4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d903      	bls.n	8007448 <xTaskPriorityDisinherit+0xa4>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a0c      	ldr	r2, [pc, #48]	; (8007478 <xTaskPriorityDisinherit+0xd4>)
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4a09      	ldr	r2, [pc, #36]	; (800747c <xTaskPriorityDisinherit+0xd8>)
 8007456:	441a      	add	r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f7fe f97d 	bl	800575e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007468:	697b      	ldr	r3, [r7, #20]
	}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20008b54 	.word	0x20008b54
 8007478:	20009030 	.word	0x20009030
 800747c:	20008b58 	.word	0x20008b58

08007480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800748a:	4b21      	ldr	r3, [pc, #132]	; (8007510 <prvAddCurrentTaskToDelayedList+0x90>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007490:	4b20      	ldr	r3, [pc, #128]	; (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3304      	adds	r3, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe f9be 	bl	8005818 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a2:	d10a      	bne.n	80074ba <prvAddCurrentTaskToDelayedList+0x3a>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4819      	ldr	r0, [pc, #100]	; (8007518 <prvAddCurrentTaskToDelayedList+0x98>)
 80074b4:	f7fe f953 	bl	800575e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074b8:	e026      	b.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d209      	bcs.n	80074e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074d2:	4b12      	ldr	r3, [pc, #72]	; (800751c <prvAddCurrentTaskToDelayedList+0x9c>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe f961 	bl	80057a6 <vListInsert>
}
 80074e4:	e010      	b.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <prvAddCurrentTaskToDelayedList+0x94>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe f957 	bl	80057a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d202      	bcs.n	8007508 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007502:	4a08      	ldr	r2, [pc, #32]	; (8007524 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6013      	str	r3, [r2, #0]
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	2000902c 	.word	0x2000902c
 8007514:	20008b54 	.word	0x20008b54
 8007518:	20009014 	.word	0x20009014
 800751c:	20008fe4 	.word	0x20008fe4
 8007520:	20008fe0 	.word	0x20008fe0
 8007524:	20009048 	.word	0x20009048

08007528 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007532:	f000 fb07 	bl	8007b44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <xTimerCreateTimerTask+0x80>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d021      	beq.n	8007582 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007546:	1d3a      	adds	r2, r7, #4
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	f107 030c 	add.w	r3, r7, #12
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd fed3 	bl	80052fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	9202      	str	r2, [sp, #8]
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	2302      	movs	r3, #2
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	460a      	mov	r2, r1
 8007568:	4910      	ldr	r1, [pc, #64]	; (80075ac <xTimerCreateTimerTask+0x84>)
 800756a:	4811      	ldr	r0, [pc, #68]	; (80075b0 <xTimerCreateTimerTask+0x88>)
 800756c:	f7ff f8b8 	bl	80066e0 <xTaskCreateStatic>
 8007570:	4603      	mov	r3, r0
 8007572:	4a10      	ldr	r2, [pc, #64]	; (80075b4 <xTimerCreateTimerTask+0x8c>)
 8007574:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007576:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <xTimerCreateTimerTask+0x8c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800757e:	2301      	movs	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	613b      	str	r3, [r7, #16]
}
 800759a:	bf00      	nop
 800759c:	e7fe      	b.n	800759c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800759e:	697b      	ldr	r3, [r7, #20]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20009084 	.word	0x20009084
 80075ac:	08012a98 	.word	0x08012a98
 80075b0:	080076ed 	.word	0x080076ed
 80075b4:	20009088 	.word	0x20009088

080075b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	623b      	str	r3, [r7, #32]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <xTimerGenericCommand+0x98>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02a      	beq.n	8007644 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	dc18      	bgt.n	8007632 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007600:	f7ff feb2 	bl	8007368 <xTaskGetSchedulerState>
 8007604:	4603      	mov	r3, r0
 8007606:	2b02      	cmp	r3, #2
 8007608:	d109      	bne.n	800761e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800760a:	4b11      	ldr	r3, [pc, #68]	; (8007650 <xTimerGenericCommand+0x98>)
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f107 0110 	add.w	r1, r7, #16
 8007612:	2300      	movs	r3, #0
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	f7fe fc7b 	bl	8005f10 <xQueueGenericSend>
 800761a:	6278      	str	r0, [r7, #36]	; 0x24
 800761c:	e012      	b.n	8007644 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <xTimerGenericCommand+0x98>)
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	f107 0110 	add.w	r1, r7, #16
 8007626:	2300      	movs	r3, #0
 8007628:	2200      	movs	r2, #0
 800762a:	f7fe fc71 	bl	8005f10 <xQueueGenericSend>
 800762e:	6278      	str	r0, [r7, #36]	; 0x24
 8007630:	e008      	b.n	8007644 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <xTimerGenericCommand+0x98>)
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f107 0110 	add.w	r1, r7, #16
 800763a:	2300      	movs	r3, #0
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	f7fe fd65 	bl	800610c <xQueueGenericSendFromISR>
 8007642:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007646:	4618      	mov	r0, r3
 8007648:	3728      	adds	r7, #40	; 0x28
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20009084 	.word	0x20009084

08007654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765e:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <prvProcessExpiredTimer+0x94>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f8d3 	bl	8005818 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d022      	beq.n	80076c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	18d1      	adds	r1, r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	6978      	ldr	r0, [r7, #20]
 800768e:	f000 f8d1 	bl	8007834 <prvInsertTimerInActiveList>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01f      	beq.n	80076d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007698:	2300      	movs	r3, #0
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7ff ff88 	bl	80075b8 <xTimerGenericCommand>
 80076a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d113      	bne.n	80076d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	6978      	ldr	r0, [r7, #20]
 80076de:	4798      	blx	r3
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	2000907c 	.word	0x2000907c

080076ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076f4:	f107 0308 	add.w	r3, r7, #8
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 f857 	bl	80077ac <prvGetNextExpireTime>
 80076fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4619      	mov	r1, r3
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f803 	bl	8007710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800770a:	f000 f8d5 	bl	80078b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800770e:	e7f1      	b.n	80076f4 <prvTimerTask+0x8>

08007710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800771a:	f7ff fa1d 	bl	8006b58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f866 	bl	80077f4 <prvSampleTimeNow>
 8007728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d130      	bne.n	8007792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <prvProcessTimerOrBlockTask+0x3c>
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d806      	bhi.n	800774c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800773e:	f7ff fa19 	bl	8006b74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff ff85 	bl	8007654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800774a:	e024      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <prvProcessTimerOrBlockTask+0x90>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <prvProcessTimerOrBlockTask+0x50>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <prvProcessTimerOrBlockTask+0x52>
 8007760:	2300      	movs	r3, #0
 8007762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <prvProcessTimerOrBlockTask+0x94>)
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	f7fe ff81 	bl	8006678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007776:	f7ff f9fd 	bl	8006b74 <xTaskResumeAll>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007780:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <prvProcessTimerOrBlockTask+0x98>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
}
 8007790:	e001      	b.n	8007796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007792:	f7ff f9ef 	bl	8006b74 <xTaskResumeAll>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20009080 	.word	0x20009080
 80077a4:	20009084 	.word	0x20009084
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077b4:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <prvGetNextExpireTime+0x44>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <prvGetNextExpireTime+0x16>
 80077be:	2201      	movs	r2, #1
 80077c0:	e000      	b.n	80077c4 <prvGetNextExpireTime+0x18>
 80077c2:	2200      	movs	r2, #0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvGetNextExpireTime+0x44>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e001      	b.n	80077e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000907c 	.word	0x2000907c

080077f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077fc:	f7ff fa58 	bl	8006cb0 <xTaskGetTickCount>
 8007800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <prvSampleTimeNow+0x3c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	429a      	cmp	r2, r3
 800780a:	d205      	bcs.n	8007818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800780c:	f000 f936 	bl	8007a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e002      	b.n	800781e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800781e:	4a04      	ldr	r2, [pc, #16]	; (8007830 <prvSampleTimeNow+0x3c>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	2000908c 	.word	0x2000908c

08007834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d812      	bhi.n	8007880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	429a      	cmp	r2, r3
 8007866:	d302      	bcc.n	800786e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e01b      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <prvInsertTimerInActiveList+0x7c>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fd ff94 	bl	80057a6 <vListInsert>
 800787e:	e012      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d206      	bcs.n	8007896 <prvInsertTimerInActiveList+0x62>
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d302      	bcc.n	8007896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007890:	2301      	movs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e007      	b.n	80078a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <prvInsertTimerInActiveList+0x80>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fd ff80 	bl	80057a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078a6:	697b      	ldr	r3, [r7, #20]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20009080 	.word	0x20009080
 80078b4:	2000907c 	.word	0x2000907c

080078b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08e      	sub	sp, #56	; 0x38
 80078bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078be:	e0ca      	b.n	8007a56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	da18      	bge.n	80078f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	3304      	adds	r3, #4
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10a      	bne.n	80078e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61fb      	str	r3, [r7, #28]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ee:	6850      	ldr	r0, [r2, #4]
 80078f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078f2:	6892      	ldr	r2, [r2, #8]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f2c0 80ab 	blt.w	8007a56 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fd ff81 	bl	8005818 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007916:	463b      	mov	r3, r7
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff ff6b 	bl	80077f4 <prvSampleTimeNow>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b09      	cmp	r3, #9
 8007924:	f200 8096 	bhi.w	8007a54 <prvProcessReceivedCommands+0x19c>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <prvProcessReceivedCommands+0x78>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007959 	.word	0x08007959
 8007934:	08007959 	.word	0x08007959
 8007938:	08007959 	.word	0x08007959
 800793c:	080079cd 	.word	0x080079cd
 8007940:	080079e1 	.word	0x080079e1
 8007944:	08007a2b 	.word	0x08007a2b
 8007948:	08007959 	.word	0x08007959
 800794c:	08007959 	.word	0x08007959
 8007950:	080079cd 	.word	0x080079cd
 8007954:	080079e1 	.word	0x080079e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	18d1      	adds	r1, r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007978:	f7ff ff5c 	bl	8007834 <prvInsertTimerInActiveList>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d069      	beq.n	8007a56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d05e      	beq.n	8007a56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	441a      	add	r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	2300      	movs	r3, #0
 80079a6:	2100      	movs	r1, #0
 80079a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079aa:	f7ff fe05 	bl	80075b8 <xTimerGenericCommand>
 80079ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d14f      	bne.n	8007a56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61bb      	str	r3, [r7, #24]
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80079de:	e03a      	b.n	8007a56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	617b      	str	r3, [r7, #20]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	18d1      	adds	r1, r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a24:	f7ff ff06 	bl	8007834 <prvInsertTimerInActiveList>
					break;
 8007a28:	e015      	b.n	8007a56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3a:	f7fd fd45 	bl	80054c8 <vPortFree>
 8007a3e:	e00a      	b.n	8007a56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a52:	e000      	b.n	8007a56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007a54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a56:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <prvProcessReceivedCommands+0x1c0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	1d39      	adds	r1, r7, #4
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fbf0 	bl	8006244 <xQueueReceive>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f47f af2a 	bne.w	80078c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	3730      	adds	r7, #48	; 0x30
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20009084 	.word	0x20009084

08007a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a82:	e048      	b.n	8007b16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8e:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fd febb 	bl	8005818 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d02e      	beq.n	8007b16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4413      	add	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d90e      	bls.n	8007ae8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ad6:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7fd fe60 	bl	80057a6 <vListInsert>
 8007ae6:	e016      	b.n	8007b16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	2300      	movs	r3, #0
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	2100      	movs	r1, #0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff fd60 	bl	80075b8 <xTimerGenericCommand>
 8007af8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	603b      	str	r3, [r7, #0]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1b1      	bne.n	8007a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b20:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <prvSwitchTimerLists+0xc4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a04      	ldr	r2, [pc, #16]	; (8007b3c <prvSwitchTimerLists+0xc0>)
 8007b2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b2e:	4a04      	ldr	r2, [pc, #16]	; (8007b40 <prvSwitchTimerLists+0xc4>)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	6013      	str	r3, [r2, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	2000907c 	.word	0x2000907c
 8007b40:	20009080 	.word	0x20009080

08007b44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b4a:	f7fd ffbb 	bl	8005ac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b4e:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <prvCheckForValidListAndQueue+0x60>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d120      	bne.n	8007b98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b56:	4814      	ldr	r0, [pc, #80]	; (8007ba8 <prvCheckForValidListAndQueue+0x64>)
 8007b58:	f7fd fdd4 	bl	8005704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b5c:	4813      	ldr	r0, [pc, #76]	; (8007bac <prvCheckForValidListAndQueue+0x68>)
 8007b5e:	f7fd fdd1 	bl	8005704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b62:	4b13      	ldr	r3, [pc, #76]	; (8007bb0 <prvCheckForValidListAndQueue+0x6c>)
 8007b64:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <prvCheckForValidListAndQueue+0x64>)
 8007b66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <prvCheckForValidListAndQueue+0x70>)
 8007b6a:	4a10      	ldr	r2, [pc, #64]	; (8007bac <prvCheckForValidListAndQueue+0x68>)
 8007b6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <prvCheckForValidListAndQueue+0x74>)
 8007b74:	4a11      	ldr	r2, [pc, #68]	; (8007bbc <prvCheckForValidListAndQueue+0x78>)
 8007b76:	2110      	movs	r1, #16
 8007b78:	200a      	movs	r0, #10
 8007b7a:	f7fe f92d 	bl	8005dd8 <xQueueGenericCreateStatic>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4a08      	ldr	r2, [pc, #32]	; (8007ba4 <prvCheckForValidListAndQueue+0x60>)
 8007b82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <prvCheckForValidListAndQueue+0x60>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <prvCheckForValidListAndQueue+0x60>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	490b      	ldr	r1, [pc, #44]	; (8007bc0 <prvCheckForValidListAndQueue+0x7c>)
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fd46 	bl	8006624 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b98:	f7fd ffc4 	bl	8005b24 <vPortExitCritical>
}
 8007b9c:	bf00      	nop
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20009084 	.word	0x20009084
 8007ba8:	20009054 	.word	0x20009054
 8007bac:	20009068 	.word	0x20009068
 8007bb0:	2000907c 	.word	0x2000907c
 8007bb4:	20009080 	.word	0x20009080
 8007bb8:	20009130 	.word	0x20009130
 8007bbc:	20009090 	.word	0x20009090
 8007bc0:	08012aa0 	.word	0x08012aa0

08007bc4 <rcl_get_zero_initialized_publisher>:
 8007bc4:	4b01      	ldr	r3, [pc, #4]	; (8007bcc <rcl_get_zero_initialized_publisher+0x8>)
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	08012b1c 	.word	0x08012b1c

08007bd0 <rcl_publisher_init>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	b091      	sub	sp, #68	; 0x44
 8007bd6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007bd8:	b3d7      	cbz	r7, 8007c50 <rcl_publisher_init+0x80>
 8007bda:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8007bde:	4604      	mov	r4, r0
 8007be0:	4648      	mov	r0, r9
 8007be2:	4688      	mov	r8, r1
 8007be4:	4616      	mov	r6, r2
 8007be6:	461d      	mov	r5, r3
 8007be8:	f000 fa3a 	bl	8008060 <rcutils_allocator_is_valid>
 8007bec:	b380      	cbz	r0, 8007c50 <rcl_publisher_init+0x80>
 8007bee:	b37c      	cbz	r4, 8007c50 <rcl_publisher_init+0x80>
 8007bf0:	f8d4 a000 	ldr.w	sl, [r4]
 8007bf4:	f1ba 0f00 	cmp.w	sl, #0
 8007bf8:	d004      	beq.n	8007c04 <rcl_publisher_init+0x34>
 8007bfa:	2564      	movs	r5, #100	; 0x64
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	b011      	add	sp, #68	; 0x44
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	4640      	mov	r0, r8
 8007c06:	f006 f93b 	bl	800de80 <rcl_node_is_valid>
 8007c0a:	b330      	cbz	r0, 8007c5a <rcl_publisher_init+0x8a>
 8007c0c:	b306      	cbz	r6, 8007c50 <rcl_publisher_init+0x80>
 8007c0e:	b1fd      	cbz	r5, 8007c50 <rcl_publisher_init+0x80>
 8007c10:	46ce      	mov	lr, r9
 8007c12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007c16:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8007c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c1e:	f8de 3000 	ldr.w	r3, [lr]
 8007c22:	f8cc 3000 	str.w	r3, [ip]
 8007c26:	f000 fa57 	bl	80080d8 <rcutils_get_zero_initialized_string_map>
 8007c2a:	ab10      	add	r3, sp, #64	; 0x40
 8007c2c:	4684      	mov	ip, r0
 8007c2e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007c32:	f8cd c020 	str.w	ip, [sp, #32]
 8007c36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007c3a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8007c3e:	4651      	mov	r1, sl
 8007c40:	a808      	add	r0, sp, #32
 8007c42:	f000 fac3 	bl	80081cc <rcutils_string_map_init>
 8007c46:	b150      	cbz	r0, 8007c5e <rcl_publisher_init+0x8e>
 8007c48:	280a      	cmp	r0, #10
 8007c4a:	d013      	beq.n	8007c74 <rcl_publisher_init+0xa4>
 8007c4c:	2501      	movs	r5, #1
 8007c4e:	e7d5      	b.n	8007bfc <rcl_publisher_init+0x2c>
 8007c50:	250b      	movs	r5, #11
 8007c52:	4628      	mov	r0, r5
 8007c54:	b011      	add	sp, #68	; 0x44
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	25c8      	movs	r5, #200	; 0xc8
 8007c5c:	e7ce      	b.n	8007bfc <rcl_publisher_init+0x2c>
 8007c5e:	a808      	add	r0, sp, #32
 8007c60:	f005 fd44 	bl	800d6ec <rcl_get_default_topic_name_substitutions>
 8007c64:	4682      	mov	sl, r0
 8007c66:	b138      	cbz	r0, 8007c78 <rcl_publisher_init+0xa8>
 8007c68:	a808      	add	r0, sp, #32
 8007c6a:	f000 faef 	bl	800824c <rcutils_string_map_fini>
 8007c6e:	f1ba 0f0a 	cmp.w	sl, #10
 8007c72:	d1eb      	bne.n	8007c4c <rcl_publisher_init+0x7c>
 8007c74:	250a      	movs	r5, #10
 8007c76:	e7c1      	b.n	8007bfc <rcl_publisher_init+0x2c>
 8007c78:	4640      	mov	r0, r8
 8007c7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c7e:	f006 f909 	bl	800de94 <rcl_node_get_name>
 8007c82:	4682      	mov	sl, r0
 8007c84:	4640      	mov	r0, r8
 8007c86:	f006 f90d 	bl	800dea4 <rcl_node_get_namespace>
 8007c8a:	4686      	mov	lr, r0
 8007c8c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8007c90:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8007c94:	46ec      	mov	ip, sp
 8007c96:	f8cd b014 	str.w	fp, [sp, #20]
 8007c9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007ca2:	f8cc 3000 	str.w	r3, [ip]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	4651      	mov	r1, sl
 8007caa:	4672      	mov	r2, lr
 8007cac:	ab08      	add	r3, sp, #32
 8007cae:	f005 fbb7 	bl	800d420 <rcl_expand_topic_name>
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	a808      	add	r0, sp, #32
 8007cb6:	f000 fac9 	bl	800824c <rcutils_string_map_fini>
 8007cba:	b920      	cbnz	r0, 8007cc6 <rcl_publisher_init+0xf6>
 8007cbc:	b15d      	cbz	r5, 8007cd6 <rcl_publisher_init+0x106>
 8007cbe:	2d67      	cmp	r5, #103	; 0x67
 8007cc0:	d002      	beq.n	8007cc8 <rcl_publisher_init+0xf8>
 8007cc2:	2d69      	cmp	r5, #105	; 0x69
 8007cc4:	d05f      	beq.n	8007d86 <rcl_publisher_init+0x1b6>
 8007cc6:	2501      	movs	r5, #1
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d096      	beq.n	8007bfc <rcl_publisher_init+0x2c>
 8007cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cd2:	4798      	blx	r3
 8007cd4:	e792      	b.n	8007bfc <rcl_publisher_init+0x2c>
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f006 f8ec 	bl	800deb4 <rcl_node_get_options>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d0f2      	beq.n	8007cc6 <rcl_publisher_init+0xf6>
 8007ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce2:	f7f8 fa9f 	bl	8000224 <strlen>
 8007ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cea:	3001      	adds	r0, #1
 8007cec:	4798      	blx	r3
 8007cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf0:	9107      	str	r1, [sp, #28]
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	f7f8 fa95 	bl	8000224 <strlen>
 8007cfa:	9907      	ldr	r1, [sp, #28]
 8007cfc:	1c42      	adds	r2, r0, #1
 8007cfe:	4648      	mov	r0, r9
 8007d00:	f009 ff83 	bl	8011c0a <memcpy>
 8007d04:	462a      	mov	r2, r5
 8007d06:	4648      	mov	r0, r9
 8007d08:	a90a      	add	r1, sp, #40	; 0x28
 8007d0a:	f000 fb67 	bl	80083dc <rmw_validate_full_topic_name>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d137      	bne.n	8007d82 <rcl_publisher_init+0x1b2>
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d138      	bne.n	8007d8a <rcl_publisher_init+0x1ba>
 8007d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d1c:	20c0      	movs	r0, #192	; 0xc0
 8007d1e:	4798      	blx	r3
 8007d20:	6020      	str	r0, [r4, #0]
 8007d22:	b3a0      	cbz	r0, 8007d8e <rcl_publisher_init+0x1be>
 8007d24:	4640      	mov	r0, r8
 8007d26:	f006 f8cd 	bl	800dec4 <rcl_node_get_rmw_handle>
 8007d2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4631      	mov	r1, r6
 8007d32:	463b      	mov	r3, r7
 8007d34:	464a      	mov	r2, r9
 8007d36:	6825      	ldr	r5, [r4, #0]
 8007d38:	f000 fc50 	bl	80085dc <rmw_create_publisher>
 8007d3c:	6821      	ldr	r1, [r4, #0]
 8007d3e:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 8007d42:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8007d46:	b388      	cbz	r0, 8007dac <rcl_publisher_init+0x1dc>
 8007d48:	3168      	adds	r1, #104	; 0x68
 8007d4a:	f000 fd21 	bl	8008790 <rmw_publisher_get_actual_qos>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	4605      	mov	r5, r0
 8007d52:	b9f0      	cbnz	r0, 8007d92 <rcl_publisher_init+0x1c2>
 8007d54:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8007d58:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	2268      	movs	r2, #104	; 0x68
 8007d60:	4639      	mov	r1, r7
 8007d62:	f009 ff52 	bl	8011c0a <memcpy>
 8007d66:	f8d8 2000 	ldr.w	r2, [r8]
 8007d6a:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 8007d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d70:	b110      	cbz	r0, 8007d78 <rcl_publisher_init+0x1a8>
 8007d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d76:	4798      	blx	r3
 8007d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d7c:	4648      	mov	r0, r9
 8007d7e:	4798      	blx	r3
 8007d80:	e73c      	b.n	8007bfc <rcl_publisher_init+0x2c>
 8007d82:	2501      	movs	r5, #1
 8007d84:	e7f3      	b.n	8007d6e <rcl_publisher_init+0x19e>
 8007d86:	2567      	movs	r5, #103	; 0x67
 8007d88:	e79e      	b.n	8007cc8 <rcl_publisher_init+0xf8>
 8007d8a:	2567      	movs	r5, #103	; 0x67
 8007d8c:	e7ef      	b.n	8007d6e <rcl_publisher_init+0x19e>
 8007d8e:	250a      	movs	r5, #10
 8007d90:	e7ed      	b.n	8007d6e <rcl_publisher_init+0x19e>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f5      	beq.n	8007d82 <rcl_publisher_init+0x1b2>
 8007d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d9a:	b13b      	cbz	r3, 8007dac <rcl_publisher_init+0x1dc>
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	f006 f891 	bl	800dec4 <rcl_node_get_rmw_handle>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8007da8:	f000 fd00 	bl	80087ac <rmw_destroy_publisher>
 8007dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	4798      	blx	r3
 8007db4:	2300      	movs	r3, #0
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	2501      	movs	r5, #1
 8007dba:	e7d8      	b.n	8007d6e <rcl_publisher_init+0x19e>

08007dbc <rcl_publisher_get_default_options>:
 8007dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dbe:	4f0e      	ldr	r7, [pc, #56]	; (8007df8 <rcl_publisher_get_default_options+0x3c>)
 8007dc0:	490e      	ldr	r1, [pc, #56]	; (8007dfc <rcl_publisher_get_default_options+0x40>)
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	2250      	movs	r2, #80	; 0x50
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f009 ff1e 	bl	8011c0a <memcpy>
 8007dce:	466c      	mov	r4, sp
 8007dd0:	4668      	mov	r0, sp
 8007dd2:	f000 f937 	bl	8008044 <rcutils_get_default_allocator>
 8007dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dd8:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8007ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	f000 faf9 	bl	80083d8 <rmw_get_default_publisher_options>
 8007de6:	4639      	mov	r1, r7
 8007de8:	6678      	str	r0, [r7, #100]	; 0x64
 8007dea:	2268      	movs	r2, #104	; 0x68
 8007dec:	4630      	mov	r0, r6
 8007dee:	f009 ff0c 	bl	8011c0a <memcpy>
 8007df2:	4630      	mov	r0, r6
 8007df4:	b007      	add	sp, #28
 8007df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df8:	20009180 	.word	0x20009180
 8007dfc:	08012b20 	.word	0x08012b20

08007e00 <rcl_publish>:
 8007e00:	b1f8      	cbz	r0, 8007e42 <rcl_publish+0x42>
 8007e02:	6803      	ldr	r3, [r0, #0]
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4604      	mov	r4, r0
 8007e08:	b1b3      	cbz	r3, 8007e38 <rcl_publish+0x38>
 8007e0a:	4616      	mov	r6, r2
 8007e0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8007e10:	b192      	cbz	r2, 8007e38 <rcl_publish+0x38>
 8007e12:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007e16:	460d      	mov	r5, r1
 8007e18:	f005 fa98 	bl	800d34c <rcl_context_is_valid>
 8007e1c:	b160      	cbz	r0, 8007e38 <rcl_publish+0x38>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8007e24:	b140      	cbz	r0, 8007e38 <rcl_publish+0x38>
 8007e26:	b155      	cbz	r5, 8007e3e <rcl_publish+0x3e>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	f000 fb76 	bl	800851c <rmw_publish>
 8007e30:	3800      	subs	r0, #0
 8007e32:	bf18      	it	ne
 8007e34:	2001      	movne	r0, #1
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	200b      	movs	r0, #11
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
 8007e42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e46:	4770      	bx	lr

08007e48 <rclc_executor_get_zero_initialized_executor>:
 8007e48:	b510      	push	{r4, lr}
 8007e4a:	4903      	ldr	r1, [pc, #12]	; (8007e58 <rclc_executor_get_zero_initialized_executor+0x10>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	2280      	movs	r2, #128	; 0x80
 8007e50:	f009 fedb 	bl	8011c0a <memcpy>
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd10      	pop	{r4, pc}
 8007e58:	08012b70 	.word	0x08012b70

08007e5c <rclc_support_init>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d042      	beq.n	8007eec <rclc_support_init+0x90>
 8007e66:	461c      	mov	r4, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d03f      	beq.n	8007eec <rclc_support_init+0x90>
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	4690      	mov	r8, r2
 8007e70:	4606      	mov	r6, r0
 8007e72:	f005 fd4b 	bl	800d90c <rcl_get_zero_initialized_init_options>
 8007e76:	4603      	mov	r3, r0
 8007e78:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8007e7c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	a805      	add	r0, sp, #20
 8007e84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007e88:	f005 fd42 	bl	800d910 <rcl_init_options_init>
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	bb38      	cbnz	r0, 8007ee0 <rclc_support_init+0x84>
 8007e90:	f005 fd3c 	bl	800d90c <rcl_get_zero_initialized_init_options>
 8007e94:	4631      	mov	r1, r6
 8007e96:	6030      	str	r0, [r6, #0]
 8007e98:	a805      	add	r0, sp, #20
 8007e9a:	f005 fdaf 	bl	800d9fc <rcl_init_options_copy>
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	b9c0      	cbnz	r0, 8007ed4 <rclc_support_init+0x78>
 8007ea2:	ad02      	add	r5, sp, #8
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f005 fa47 	bl	800d338 <rcl_get_zero_initialized_context>
 8007eaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eae:	1d33      	adds	r3, r6, #4
 8007eb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f005 fc1d 	bl	800d6f8 <rcl_init>
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	b940      	cbnz	r0, 8007ed4 <rclc_support_init+0x78>
 8007ec2:	60f4      	str	r4, [r6, #12]
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	f106 0110 	add.w	r1, r6, #16
 8007eca:	2003      	movs	r0, #3
 8007ecc:	f006 f946 	bl	800e15c <rcl_clock_init>
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	b108      	cbz	r0, 8007ed8 <rclc_support_init+0x7c>
 8007ed4:	f000 f8e8 	bl	80080a8 <rcutils_reset_error>
 8007ed8:	a805      	add	r0, sp, #20
 8007eda:	f005 fd6b 	bl	800d9b4 <rcl_init_options_fini>
 8007ede:	b108      	cbz	r0, 8007ee4 <rclc_support_init+0x88>
 8007ee0:	f000 f8e2 	bl	80080a8 <rcutils_reset_error>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	b006      	add	sp, #24
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	250b      	movs	r5, #11
 8007eee:	4628      	mov	r0, r5
 8007ef0:	b006      	add	sp, #24
 8007ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef6:	bf00      	nop

08007ef8 <rclc_node_init_default>:
 8007ef8:	b3b8      	cbz	r0, 8007f6a <rclc_node_init_default+0x72>
 8007efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007efe:	460d      	mov	r5, r1
 8007f00:	b08f      	sub	sp, #60	; 0x3c
 8007f02:	b329      	cbz	r1, 8007f50 <rclc_node_init_default+0x58>
 8007f04:	4616      	mov	r6, r2
 8007f06:	b31a      	cbz	r2, 8007f50 <rclc_node_init_default+0x58>
 8007f08:	461f      	mov	r7, r3
 8007f0a:	b30b      	cbz	r3, 8007f50 <rclc_node_init_default+0x58>
 8007f0c:	f10d 0810 	add.w	r8, sp, #16
 8007f10:	4604      	mov	r4, r0
 8007f12:	4640      	mov	r0, r8
 8007f14:	f005 fe3a 	bl	800db8c <rcl_get_zero_initialized_node>
 8007f18:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007f1c:	f10d 091c 	add.w	r9, sp, #28
 8007f20:	e884 0003 	stmia.w	r4, {r0, r1}
 8007f24:	4648      	mov	r0, r9
 8007f26:	f005 ffd3 	bl	800ded0 <rcl_node_get_default_options>
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f005 fe2e 	bl	800db8c <rcl_get_zero_initialized_node>
 8007f30:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007f34:	1d3b      	adds	r3, r7, #4
 8007f36:	f8cd 9000 	str.w	r9, [sp]
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f005 fe2c 	bl	800dba0 <rcl_node_init>
 8007f48:	b930      	cbnz	r0, 8007f58 <rclc_node_init_default+0x60>
 8007f4a:	b00f      	add	sp, #60	; 0x3c
 8007f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f50:	200b      	movs	r0, #11
 8007f52:	b00f      	add	sp, #60	; 0x3c
 8007f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f58:	9003      	str	r0, [sp, #12]
 8007f5a:	f000 f8a5 	bl	80080a8 <rcutils_reset_error>
 8007f5e:	f000 f8a3 	bl	80080a8 <rcutils_reset_error>
 8007f62:	9803      	ldr	r0, [sp, #12]
 8007f64:	b00f      	add	sp, #60	; 0x3c
 8007f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	200b      	movs	r0, #11
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <rclc_publisher_init_best_effort>:
 8007f70:	b368      	cbz	r0, 8007fce <rclc_publisher_init_best_effort+0x5e>
 8007f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	460d      	mov	r5, r1
 8007f78:	b09e      	sub	sp, #120	; 0x78
 8007f7a:	b321      	cbz	r1, 8007fc6 <rclc_publisher_init_best_effort+0x56>
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	b312      	cbz	r2, 8007fc6 <rclc_publisher_init_best_effort+0x56>
 8007f80:	461f      	mov	r7, r3
 8007f82:	b303      	cbz	r3, 8007fc6 <rclc_publisher_init_best_effort+0x56>
 8007f84:	4604      	mov	r4, r0
 8007f86:	f7ff fe1d 	bl	8007bc4 <rcl_get_zero_initialized_publisher>
 8007f8a:	f10d 0810 	add.w	r8, sp, #16
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	4640      	mov	r0, r8
 8007f92:	f7ff ff13 	bl	8007dbc <rcl_publisher_get_default_options>
 8007f96:	490f      	ldr	r1, [pc, #60]	; (8007fd4 <rclc_publisher_init_best_effort+0x64>)
 8007f98:	2250      	movs	r2, #80	; 0x50
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	f009 fe35 	bl	8011c0a <memcpy>
 8007fa0:	f8cd 8000 	str.w	r8, [sp]
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff fe10 	bl	8007bd0 <rcl_publisher_init>
 8007fb0:	b910      	cbnz	r0, 8007fb8 <rclc_publisher_init_best_effort+0x48>
 8007fb2:	b01e      	add	sp, #120	; 0x78
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	9003      	str	r0, [sp, #12]
 8007fba:	f000 f875 	bl	80080a8 <rcutils_reset_error>
 8007fbe:	9803      	ldr	r0, [sp, #12]
 8007fc0:	b01e      	add	sp, #120	; 0x78
 8007fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc6:	200b      	movs	r0, #11
 8007fc8:	b01e      	add	sp, #120	; 0x78
 8007fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fce:	200b      	movs	r0, #11
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	08012bf0 	.word	0x08012bf0

08007fd8 <__default_zero_allocate>:
 8007fd8:	f009 b96e 	b.w	80112b8 <calloc>

08007fdc <__default_reallocate>:
 8007fdc:	f009 bafa 	b.w	80115d4 <realloc>

08007fe0 <__default_deallocate>:
 8007fe0:	f009 b9d8 	b.w	8011394 <free>

08007fe4 <__default_allocate>:
 8007fe4:	f009 b9ce 	b.w	8011384 <malloc>

08007fe8 <rcutils_get_zero_initialized_allocator>:
 8007fe8:	b470      	push	{r4, r5, r6}
 8007fea:	4d05      	ldr	r5, [pc, #20]	; (8008000 <rcutils_get_zero_initialized_allocator+0x18>)
 8007fec:	4606      	mov	r6, r0
 8007fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ff0:	4634      	mov	r4, r6
 8007ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	bc70      	pop	{r4, r5, r6}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	08012c40 	.word	0x08012c40

08008004 <rcutils_set_default_allocator>:
 8008004:	b1a0      	cbz	r0, 8008030 <rcutils_set_default_allocator+0x2c>
 8008006:	6801      	ldr	r1, [r0, #0]
 8008008:	b199      	cbz	r1, 8008032 <rcutils_set_default_allocator+0x2e>
 800800a:	b430      	push	{r4, r5}
 800800c:	6844      	ldr	r4, [r0, #4]
 800800e:	b194      	cbz	r4, 8008036 <rcutils_set_default_allocator+0x32>
 8008010:	68c5      	ldr	r5, [r0, #12]
 8008012:	b15d      	cbz	r5, 800802c <rcutils_set_default_allocator+0x28>
 8008014:	6883      	ldr	r3, [r0, #8]
 8008016:	b18b      	cbz	r3, 800803c <rcutils_set_default_allocator+0x38>
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <rcutils_set_default_allocator+0x3c>)
 800801a:	e9c2 1400 	strd	r1, r4, [r2]
 800801e:	e9c2 3502 	strd	r3, r5, [r2, #8]
 8008022:	2000      	movs	r0, #0
 8008024:	6110      	str	r0, [r2, #16]
 8008026:	2001      	movs	r0, #1
 8008028:	bc30      	pop	{r4, r5}
 800802a:	4770      	bx	lr
 800802c:	4628      	mov	r0, r5
 800802e:	e7fb      	b.n	8008028 <rcutils_set_default_allocator+0x24>
 8008030:	4770      	bx	lr
 8008032:	4608      	mov	r0, r1
 8008034:	4770      	bx	lr
 8008036:	4620      	mov	r0, r4
 8008038:	bc30      	pop	{r4, r5}
 800803a:	4770      	bx	lr
 800803c:	4618      	mov	r0, r3
 800803e:	e7f3      	b.n	8008028 <rcutils_set_default_allocator+0x24>
 8008040:	20000014 	.word	0x20000014

08008044 <rcutils_get_default_allocator>:
 8008044:	b470      	push	{r4, r5, r6}
 8008046:	4d05      	ldr	r5, [pc, #20]	; (800805c <rcutils_get_default_allocator+0x18>)
 8008048:	4606      	mov	r6, r0
 800804a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800804c:	4634      	mov	r4, r6
 800804e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	4630      	mov	r0, r6
 8008056:	bc70      	pop	{r4, r5, r6}
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000014 	.word	0x20000014

08008060 <rcutils_allocator_is_valid>:
 8008060:	b158      	cbz	r0, 800807a <rcutils_allocator_is_valid+0x1a>
 8008062:	6803      	ldr	r3, [r0, #0]
 8008064:	b143      	cbz	r3, 8008078 <rcutils_allocator_is_valid+0x18>
 8008066:	6843      	ldr	r3, [r0, #4]
 8008068:	b133      	cbz	r3, 8008078 <rcutils_allocator_is_valid+0x18>
 800806a:	68c3      	ldr	r3, [r0, #12]
 800806c:	b123      	cbz	r3, 8008078 <rcutils_allocator_is_valid+0x18>
 800806e:	6880      	ldr	r0, [r0, #8]
 8008070:	3800      	subs	r0, #0
 8008072:	bf18      	it	ne
 8008074:	2001      	movne	r0, #1
 8008076:	4770      	bx	lr
 8008078:	4618      	mov	r0, r3
 800807a:	4770      	bx	lr

0800807c <rcutils_get_error_string>:
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <rcutils_get_error_string+0x1c>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b13b      	cbz	r3, 8008092 <rcutils_get_error_string+0x16>
 8008082:	4b06      	ldr	r3, [pc, #24]	; (800809c <rcutils_get_error_string+0x20>)
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	b90a      	cbnz	r2, 800808c <rcutils_get_error_string+0x10>
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	4b04      	ldr	r3, [pc, #16]	; (80080a0 <rcutils_get_error_string+0x24>)
 800808e:	7818      	ldrb	r0, [r3, #0]
 8008090:	4770      	bx	lr
 8008092:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <rcutils_get_error_string+0x28>)
 8008094:	7818      	ldrb	r0, [r3, #0]
 8008096:	4770      	bx	lr
 8008098:	200091e8 	.word	0x200091e8
 800809c:	200091e9 	.word	0x200091e9
 80080a0:	20009450 	.word	0x20009450
 80080a4:	08012c54 	.word	0x08012c54

080080a8 <rcutils_reset_error>:
 80080a8:	b4d0      	push	{r4, r6, r7}
 80080aa:	4a07      	ldr	r2, [pc, #28]	; (80080c8 <rcutils_reset_error+0x20>)
 80080ac:	4807      	ldr	r0, [pc, #28]	; (80080cc <rcutils_reset_error+0x24>)
 80080ae:	4c08      	ldr	r4, [pc, #32]	; (80080d0 <rcutils_reset_error+0x28>)
 80080b0:	4908      	ldr	r1, [pc, #32]	; (80080d4 <rcutils_reset_error+0x2c>)
 80080b2:	2300      	movs	r3, #0
 80080b4:	2600      	movs	r6, #0
 80080b6:	2700      	movs	r7, #0
 80080b8:	8013      	strh	r3, [r2, #0]
 80080ba:	7003      	strb	r3, [r0, #0]
 80080bc:	e9c2 6702 	strd	r6, r7, [r2, #8]
 80080c0:	7023      	strb	r3, [r4, #0]
 80080c2:	700b      	strb	r3, [r1, #0]
 80080c4:	bcd0      	pop	{r4, r6, r7}
 80080c6:	4770      	bx	lr
 80080c8:	20009458 	.word	0x20009458
 80080cc:	20009450 	.word	0x20009450
 80080d0:	200091e9 	.word	0x200091e9
 80080d4:	200091e8 	.word	0x200091e8

080080d8 <rcutils_get_zero_initialized_string_map>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <rcutils_get_zero_initialized_string_map+0x8>)
 80080da:	2000      	movs	r0, #0
 80080dc:	6018      	str	r0, [r3, #0]
 80080de:	4770      	bx	lr
 80080e0:	200091ec 	.word	0x200091ec

080080e4 <rcutils_string_map_reserve>:
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d061      	beq.n	80081ac <rcutils_string_map_reserve+0xc8>
 80080e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080ec:	6805      	ldr	r5, [r0, #0]
 80080ee:	b083      	sub	sp, #12
 80080f0:	460c      	mov	r4, r1
 80080f2:	4606      	mov	r6, r0
 80080f4:	b12d      	cbz	r5, 8008102 <rcutils_string_map_reserve+0x1e>
 80080f6:	68eb      	ldr	r3, [r5, #12]
 80080f8:	42a3      	cmp	r3, r4
 80080fa:	d906      	bls.n	800810a <rcutils_string_map_reserve+0x26>
 80080fc:	461c      	mov	r4, r3
 80080fe:	2d00      	cmp	r5, #0
 8008100:	d1f9      	bne.n	80080f6 <rcutils_string_map_reserve+0x12>
 8008102:	201f      	movs	r0, #31
 8008104:	b003      	add	sp, #12
 8008106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800810a:	68ab      	ldr	r3, [r5, #8]
 800810c:	42a3      	cmp	r3, r4
 800810e:	d049      	beq.n	80081a4 <rcutils_string_map_reserve+0xc0>
 8008110:	6a2f      	ldr	r7, [r5, #32]
 8008112:	2c00      	cmp	r4, #0
 8008114:	d035      	beq.n	8008182 <rcutils_string_map_reserve+0x9e>
 8008116:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800811a:	d245      	bcs.n	80081a8 <rcutils_string_map_reserve+0xc4>
 800811c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8008120:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8008124:	6828      	ldr	r0, [r5, #0]
 8008126:	4641      	mov	r1, r8
 8008128:	463a      	mov	r2, r7
 800812a:	47c8      	blx	r9
 800812c:	2800      	cmp	r0, #0
 800812e:	d03b      	beq.n	80081a8 <rcutils_string_map_reserve+0xc4>
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	463a      	mov	r2, r7
 8008134:	6018      	str	r0, [r3, #0]
 8008136:	4641      	mov	r1, r8
 8008138:	6858      	ldr	r0, [r3, #4]
 800813a:	47c8      	blx	r9
 800813c:	2800      	cmp	r0, #0
 800813e:	d033      	beq.n	80081a8 <rcutils_string_map_reserve+0xc4>
 8008140:	6835      	ldr	r5, [r6, #0]
 8008142:	68ab      	ldr	r3, [r5, #8]
 8008144:	6068      	str	r0, [r5, #4]
 8008146:	42a3      	cmp	r3, r4
 8008148:	d227      	bcs.n	800819a <rcutils_string_map_reserve+0xb6>
 800814a:	682a      	ldr	r2, [r5, #0]
 800814c:	eb00 0108 	add.w	r1, r0, r8
 8008150:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8008154:	428f      	cmp	r7, r1
 8008156:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800815a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800815e:	d203      	bcs.n	8008168 <rcutils_string_map_reserve+0x84>
 8008160:	eb02 0108 	add.w	r1, r2, r8
 8008164:	428e      	cmp	r6, r1
 8008166:	d323      	bcc.n	80081b0 <rcutils_string_map_reserve+0xcc>
 8008168:	1ae3      	subs	r3, r4, r3
 800816a:	009a      	lsls	r2, r3, #2
 800816c:	4638      	mov	r0, r7
 800816e:	2100      	movs	r1, #0
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	f009 fc81 	bl	8011a78 <memset>
 8008176:	9a01      	ldr	r2, [sp, #4]
 8008178:	4630      	mov	r0, r6
 800817a:	2100      	movs	r1, #0
 800817c:	f009 fc7c 	bl	8011a78 <memset>
 8008180:	e00b      	b.n	800819a <rcutils_string_map_reserve+0xb6>
 8008182:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8008186:	6828      	ldr	r0, [r5, #0]
 8008188:	4639      	mov	r1, r7
 800818a:	47c0      	blx	r8
 800818c:	6833      	ldr	r3, [r6, #0]
 800818e:	4639      	mov	r1, r7
 8008190:	6858      	ldr	r0, [r3, #4]
 8008192:	601c      	str	r4, [r3, #0]
 8008194:	47c0      	blx	r8
 8008196:	6835      	ldr	r5, [r6, #0]
 8008198:	606c      	str	r4, [r5, #4]
 800819a:	2000      	movs	r0, #0
 800819c:	60ac      	str	r4, [r5, #8]
 800819e:	b003      	add	sp, #12
 80081a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a4:	2000      	movs	r0, #0
 80081a6:	e7ad      	b.n	8008104 <rcutils_string_map_reserve+0x20>
 80081a8:	200a      	movs	r0, #10
 80081aa:	e7ab      	b.n	8008104 <rcutils_string_map_reserve+0x20>
 80081ac:	200b      	movs	r0, #11
 80081ae:	4770      	bx	lr
 80081b0:	1f13      	subs	r3, r2, #4
 80081b2:	f1ac 0c04 	sub.w	ip, ip, #4
 80081b6:	4498      	add	r8, r3
 80081b8:	4460      	add	r0, ip
 80081ba:	4462      	add	r2, ip
 80081bc:	2300      	movs	r3, #0
 80081be:	f842 3f04 	str.w	r3, [r2, #4]!
 80081c2:	4542      	cmp	r2, r8
 80081c4:	f840 3f04 	str.w	r3, [r0, #4]!
 80081c8:	d1f9      	bne.n	80081be <rcutils_string_map_reserve+0xda>
 80081ca:	e7e6      	b.n	800819a <rcutils_string_map_reserve+0xb6>

080081cc <rcutils_string_map_init>:
 80081cc:	b082      	sub	sp, #8
 80081ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d0:	460e      	mov	r6, r1
 80081d2:	a906      	add	r1, sp, #24
 80081d4:	e881 000c 	stmia.w	r1, {r2, r3}
 80081d8:	b380      	cbz	r0, 800823c <rcutils_string_map_init+0x70>
 80081da:	6807      	ldr	r7, [r0, #0]
 80081dc:	4604      	mov	r4, r0
 80081de:	b12f      	cbz	r7, 80081ec <rcutils_string_map_init+0x20>
 80081e0:	251e      	movs	r5, #30
 80081e2:	4628      	mov	r0, r5
 80081e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081e8:	b002      	add	sp, #8
 80081ea:	4770      	bx	lr
 80081ec:	a806      	add	r0, sp, #24
 80081ee:	f7ff ff37 	bl	8008060 <rcutils_allocator_is_valid>
 80081f2:	b318      	cbz	r0, 800823c <rcutils_string_map_init+0x70>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081f8:	2024      	movs	r0, #36	; 0x24
 80081fa:	4798      	blx	r3
 80081fc:	4605      	mov	r5, r0
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	b310      	cbz	r0, 8008248 <rcutils_string_map_init+0x7c>
 8008202:	f10d 0e18 	add.w	lr, sp, #24
 8008206:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800820a:	f105 0c10 	add.w	ip, r5, #16
 800820e:	e9c5 7700 	strd	r7, r7, [r5]
 8008212:	e9c5 7702 	strd	r7, r7, [r5, #8]
 8008216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800821a:	f8de 3000 	ldr.w	r3, [lr]
 800821e:	f8cc 3000 	str.w	r3, [ip]
 8008222:	4631      	mov	r1, r6
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff ff5d 	bl	80080e4 <rcutils_string_map_reserve>
 800822a:	4605      	mov	r5, r0
 800822c:	2800      	cmp	r0, #0
 800822e:	d0d8      	beq.n	80081e2 <rcutils_string_map_init+0x16>
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	4798      	blx	r3
 8008238:	6027      	str	r7, [r4, #0]
 800823a:	e7d2      	b.n	80081e2 <rcutils_string_map_init+0x16>
 800823c:	250b      	movs	r5, #11
 800823e:	4628      	mov	r0, r5
 8008240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008244:	b002      	add	sp, #8
 8008246:	4770      	bx	lr
 8008248:	250a      	movs	r5, #10
 800824a:	e7ca      	b.n	80081e2 <rcutils_string_map_init+0x16>

0800824c <rcutils_string_map_fini>:
 800824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	2800      	cmp	r0, #0
 8008254:	d039      	beq.n	80082ca <rcutils_string_map_fini+0x7e>
 8008256:	6804      	ldr	r4, [r0, #0]
 8008258:	4606      	mov	r6, r0
 800825a:	2c00      	cmp	r4, #0
 800825c:	d031      	beq.n	80082c2 <rcutils_string_map_fini+0x76>
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	b323      	cbz	r3, 80082ac <rcutils_string_map_fini+0x60>
 8008262:	2500      	movs	r5, #0
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	46a8      	mov	r8, r5
 8008268:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800826c:	b1d8      	cbz	r0, 80082a6 <rcutils_string_map_fini+0x5a>
 800826e:	6a21      	ldr	r1, [r4, #32]
 8008270:	6967      	ldr	r7, [r4, #20]
 8008272:	9101      	str	r1, [sp, #4]
 8008274:	47b8      	blx	r7
 8008276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800827a:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800827e:	9901      	ldr	r1, [sp, #4]
 8008280:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008284:	47b8      	blx	r7
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	3b01      	subs	r3, #1
 800828c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8008290:	60e3      	str	r3, [r4, #12]
 8008292:	6834      	ldr	r4, [r6, #0]
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	3501      	adds	r5, #1
 8008298:	429d      	cmp	r5, r3
 800829a:	d207      	bcs.n	80082ac <rcutils_string_map_fini+0x60>
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d1e3      	bne.n	800826e <rcutils_string_map_fini+0x22>
 80082a6:	3501      	adds	r5, #1
 80082a8:	429d      	cmp	r5, r3
 80082aa:	d3dd      	bcc.n	8008268 <rcutils_string_map_fini+0x1c>
 80082ac:	2100      	movs	r1, #0
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ff18 	bl	80080e4 <rcutils_string_map_reserve>
 80082b4:	4604      	mov	r4, r0
 80082b6:	b920      	cbnz	r0, 80082c2 <rcutils_string_map_fini+0x76>
 80082b8:	6830      	ldr	r0, [r6, #0]
 80082ba:	6943      	ldr	r3, [r0, #20]
 80082bc:	6a01      	ldr	r1, [r0, #32]
 80082be:	4798      	blx	r3
 80082c0:	6034      	str	r4, [r6, #0]
 80082c2:	4620      	mov	r0, r4
 80082c4:	b002      	add	sp, #8
 80082c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ca:	240b      	movs	r4, #11
 80082cc:	4620      	mov	r0, r4
 80082ce:	b002      	add	sp, #8
 80082d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082d4 <rcutils_string_map_getn>:
 80082d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	b308      	cbz	r0, 8008320 <rcutils_string_map_getn+0x4c>
 80082dc:	6804      	ldr	r4, [r0, #0]
 80082de:	b304      	cbz	r4, 8008322 <rcutils_string_map_getn+0x4e>
 80082e0:	460d      	mov	r5, r1
 80082e2:	b1e9      	cbz	r1, 8008320 <rcutils_string_map_getn+0x4c>
 80082e4:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80082e8:	6827      	ldr	r7, [r4, #0]
 80082ea:	f1b9 0f00 	cmp.w	r9, #0
 80082ee:	d017      	beq.n	8008320 <rcutils_string_map_getn+0x4c>
 80082f0:	4690      	mov	r8, r2
 80082f2:	3f04      	subs	r7, #4
 80082f4:	2600      	movs	r6, #0
 80082f6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80082fa:	9101      	str	r1, [sp, #4]
 80082fc:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8008300:	4608      	mov	r0, r1
 8008302:	3601      	adds	r6, #1
 8008304:	b151      	cbz	r1, 800831c <rcutils_string_map_getn+0x48>
 8008306:	f7f7 ff8d 	bl	8000224 <strlen>
 800830a:	4540      	cmp	r0, r8
 800830c:	4602      	mov	r2, r0
 800830e:	9901      	ldr	r1, [sp, #4]
 8008310:	bf38      	it	cc
 8008312:	4642      	movcc	r2, r8
 8008314:	4628      	mov	r0, r5
 8008316:	f009 fbc4 	bl	8011aa2 <strncmp>
 800831a:	b130      	cbz	r0, 800832a <rcutils_string_map_getn+0x56>
 800831c:	45b1      	cmp	r9, r6
 800831e:	d1ea      	bne.n	80082f6 <rcutils_string_map_getn+0x22>
 8008320:	2400      	movs	r4, #0
 8008322:	4620      	mov	r0, r4
 8008324:	b002      	add	sp, #8
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	f853 400a 	ldr.w	r4, [r3, sl]
 8008330:	4620      	mov	r0, r4
 8008332:	b002      	add	sp, #8
 8008334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008338 <rcutils_system_time_now>:
 8008338:	b310      	cbz	r0, 8008380 <rcutils_system_time_now+0x48>
 800833a:	b570      	push	{r4, r5, r6, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	4669      	mov	r1, sp
 8008340:	4604      	mov	r4, r0
 8008342:	2001      	movs	r0, #1
 8008344:	f7f9 f824 	bl	8001390 <clock_gettime>
 8008348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800834c:	2800      	cmp	r0, #0
 800834e:	f171 0300 	sbcs.w	r3, r1, #0
 8008352:	db12      	blt.n	800837a <rcutils_system_time_now+0x42>
 8008354:	9d02      	ldr	r5, [sp, #8]
 8008356:	2d00      	cmp	r5, #0
 8008358:	db0c      	blt.n	8008374 <rcutils_system_time_now+0x3c>
 800835a:	4e0a      	ldr	r6, [pc, #40]	; (8008384 <rcutils_system_time_now+0x4c>)
 800835c:	fba0 2306 	umull	r2, r3, r0, r6
 8008360:	1952      	adds	r2, r2, r5
 8008362:	fb06 3301 	mla	r3, r6, r1, r3
 8008366:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800836a:	2000      	movs	r0, #0
 800836c:	e9c4 2300 	strd	r2, r3, [r4]
 8008370:	b004      	add	sp, #16
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	ea50 0301 	orrs.w	r3, r0, r1
 8008378:	d1ef      	bne.n	800835a <rcutils_system_time_now+0x22>
 800837a:	2002      	movs	r0, #2
 800837c:	b004      	add	sp, #16
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	200b      	movs	r0, #11
 8008382:	4770      	bx	lr
 8008384:	3b9aca00 	.word	0x3b9aca00

08008388 <rcutils_steady_time_now>:
 8008388:	b310      	cbz	r0, 80083d0 <rcutils_steady_time_now+0x48>
 800838a:	b570      	push	{r4, r5, r6, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	4669      	mov	r1, sp
 8008390:	4604      	mov	r4, r0
 8008392:	2000      	movs	r0, #0
 8008394:	f7f8 fffc 	bl	8001390 <clock_gettime>
 8008398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800839c:	2800      	cmp	r0, #0
 800839e:	f171 0300 	sbcs.w	r3, r1, #0
 80083a2:	db12      	blt.n	80083ca <rcutils_steady_time_now+0x42>
 80083a4:	9d02      	ldr	r5, [sp, #8]
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	db0c      	blt.n	80083c4 <rcutils_steady_time_now+0x3c>
 80083aa:	4e0a      	ldr	r6, [pc, #40]	; (80083d4 <rcutils_steady_time_now+0x4c>)
 80083ac:	fba0 2306 	umull	r2, r3, r0, r6
 80083b0:	1952      	adds	r2, r2, r5
 80083b2:	fb06 3301 	mla	r3, r6, r1, r3
 80083b6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80083ba:	2000      	movs	r0, #0
 80083bc:	e9c4 2300 	strd	r2, r3, [r4]
 80083c0:	b004      	add	sp, #16
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	ea50 0301 	orrs.w	r3, r0, r1
 80083c8:	d1ef      	bne.n	80083aa <rcutils_steady_time_now+0x22>
 80083ca:	2002      	movs	r0, #2
 80083cc:	b004      	add	sp, #16
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	200b      	movs	r0, #11
 80083d2:	4770      	bx	lr
 80083d4:	3b9aca00 	.word	0x3b9aca00

080083d8 <rmw_get_default_publisher_options>:
 80083d8:	2000      	movs	r0, #0
 80083da:	4770      	bx	lr

080083dc <rmw_validate_full_topic_name>:
 80083dc:	2800      	cmp	r0, #0
 80083de:	d062      	beq.n	80084a6 <rmw_validate_full_topic_name+0xca>
 80083e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e4:	460d      	mov	r5, r1
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d05f      	beq.n	80084aa <rmw_validate_full_topic_name+0xce>
 80083ea:	4616      	mov	r6, r2
 80083ec:	4604      	mov	r4, r0
 80083ee:	f7f7 ff19 	bl	8000224 <strlen>
 80083f2:	b148      	cbz	r0, 8008408 <rmw_validate_full_topic_name+0x2c>
 80083f4:	7823      	ldrb	r3, [r4, #0]
 80083f6:	2b2f      	cmp	r3, #47	; 0x2f
 80083f8:	d00d      	beq.n	8008416 <rmw_validate_full_topic_name+0x3a>
 80083fa:	2302      	movs	r3, #2
 80083fc:	602b      	str	r3, [r5, #0]
 80083fe:	b13e      	cbz	r6, 8008410 <rmw_validate_full_topic_name+0x34>
 8008400:	2000      	movs	r0, #0
 8008402:	6030      	str	r0, [r6, #0]
 8008404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008408:	2301      	movs	r3, #1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	2e00      	cmp	r6, #0
 800840e:	d1f7      	bne.n	8008400 <rmw_validate_full_topic_name+0x24>
 8008410:	2000      	movs	r0, #0
 8008412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008416:	1e47      	subs	r7, r0, #1
 8008418:	5de3      	ldrb	r3, [r4, r7]
 800841a:	2b2f      	cmp	r3, #47	; 0x2f
 800841c:	d047      	beq.n	80084ae <rmw_validate_full_topic_name+0xd2>
 800841e:	1e63      	subs	r3, r4, #1
 8008420:	eb03 0900 	add.w	r9, r3, r0
 8008424:	f1c4 0e01 	rsb	lr, r4, #1
 8008428:	eb0e 0803 	add.w	r8, lr, r3
 800842c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008430:	f021 0220 	bic.w	r2, r1, #32
 8008434:	3a41      	subs	r2, #65	; 0x41
 8008436:	2a19      	cmp	r2, #25
 8008438:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800843c:	d90c      	bls.n	8008458 <rmw_validate_full_topic_name+0x7c>
 800843e:	295f      	cmp	r1, #95	; 0x5f
 8008440:	d00a      	beq.n	8008458 <rmw_validate_full_topic_name+0x7c>
 8008442:	f1bc 0f0a 	cmp.w	ip, #10
 8008446:	d907      	bls.n	8008458 <rmw_validate_full_topic_name+0x7c>
 8008448:	2304      	movs	r3, #4
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	2e00      	cmp	r6, #0
 800844e:	d0df      	beq.n	8008410 <rmw_validate_full_topic_name+0x34>
 8008450:	f8c6 8000 	str.w	r8, [r6]
 8008454:	2000      	movs	r0, #0
 8008456:	e7d5      	b.n	8008404 <rmw_validate_full_topic_name+0x28>
 8008458:	454b      	cmp	r3, r9
 800845a:	d1e5      	bne.n	8008428 <rmw_validate_full_topic_name+0x4c>
 800845c:	f8df e084 	ldr.w	lr, [pc, #132]	; 80084e4 <rmw_validate_full_topic_name+0x108>
 8008460:	2300      	movs	r3, #0
 8008462:	f107 0801 	add.w	r8, r7, #1
 8008466:	e005      	b.n	8008474 <rmw_validate_full_topic_name+0x98>
 8008468:	4611      	mov	r1, r2
 800846a:	4288      	cmp	r0, r1
 800846c:	4613      	mov	r3, r2
 800846e:	f104 0401 	add.w	r4, r4, #1
 8008472:	d925      	bls.n	80084c0 <rmw_validate_full_topic_name+0xe4>
 8008474:	429f      	cmp	r7, r3
 8008476:	f103 0201 	add.w	r2, r3, #1
 800847a:	d01e      	beq.n	80084ba <rmw_validate_full_topic_name+0xde>
 800847c:	7821      	ldrb	r1, [r4, #0]
 800847e:	292f      	cmp	r1, #47	; 0x2f
 8008480:	d1f2      	bne.n	8008468 <rmw_validate_full_topic_name+0x8c>
 8008482:	f894 c001 	ldrb.w	ip, [r4, #1]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800848c:	4611      	mov	r1, r2
 800848e:	d024      	beq.n	80084da <rmw_validate_full_topic_name+0xfe>
 8008490:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8008494:	075b      	lsls	r3, r3, #29
 8008496:	d5e8      	bpl.n	800846a <rmw_validate_full_topic_name+0x8e>
 8008498:	2306      	movs	r3, #6
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	2e00      	cmp	r6, #0
 800849e:	d0b7      	beq.n	8008410 <rmw_validate_full_topic_name+0x34>
 80084a0:	6032      	str	r2, [r6, #0]
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7ae      	b.n	8008404 <rmw_validate_full_topic_name+0x28>
 80084a6:	200b      	movs	r0, #11
 80084a8:	4770      	bx	lr
 80084aa:	200b      	movs	r0, #11
 80084ac:	e7aa      	b.n	8008404 <rmw_validate_full_topic_name+0x28>
 80084ae:	2303      	movs	r3, #3
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	2e00      	cmp	r6, #0
 80084b4:	d0ac      	beq.n	8008410 <rmw_validate_full_topic_name+0x34>
 80084b6:	6037      	str	r7, [r6, #0]
 80084b8:	e7aa      	b.n	8008410 <rmw_validate_full_topic_name+0x34>
 80084ba:	4641      	mov	r1, r8
 80084bc:	1c7a      	adds	r2, r7, #1
 80084be:	e7d4      	b.n	800846a <rmw_validate_full_topic_name+0x8e>
 80084c0:	28f7      	cmp	r0, #247	; 0xf7
 80084c2:	d802      	bhi.n	80084ca <rmw_validate_full_topic_name+0xee>
 80084c4:	2000      	movs	r0, #0
 80084c6:	6028      	str	r0, [r5, #0]
 80084c8:	e79c      	b.n	8008404 <rmw_validate_full_topic_name+0x28>
 80084ca:	2307      	movs	r3, #7
 80084cc:	602b      	str	r3, [r5, #0]
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	d09e      	beq.n	8008410 <rmw_validate_full_topic_name+0x34>
 80084d2:	23f6      	movs	r3, #246	; 0xf6
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	2000      	movs	r0, #0
 80084d8:	e794      	b.n	8008404 <rmw_validate_full_topic_name+0x28>
 80084da:	2305      	movs	r3, #5
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d1de      	bne.n	80084a0 <rmw_validate_full_topic_name+0xc4>
 80084e2:	e795      	b.n	8008410 <rmw_validate_full_topic_name+0x34>
 80084e4:	08013430 	.word	0x08013430

080084e8 <rmw_uros_set_custom_transport>:
 80084e8:	b470      	push	{r4, r5, r6}
 80084ea:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80084ee:	b162      	cbz	r2, 800850a <rmw_uros_set_custom_transport+0x22>
 80084f0:	b15b      	cbz	r3, 800850a <rmw_uros_set_custom_transport+0x22>
 80084f2:	b155      	cbz	r5, 800850a <rmw_uros_set_custom_transport+0x22>
 80084f4:	b14e      	cbz	r6, 800850a <rmw_uros_set_custom_transport+0x22>
 80084f6:	4c06      	ldr	r4, [pc, #24]	; (8008510 <rmw_uros_set_custom_transport+0x28>)
 80084f8:	7020      	strb	r0, [r4, #0]
 80084fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80084fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008502:	6166      	str	r6, [r4, #20]
 8008504:	2000      	movs	r0, #0
 8008506:	bc70      	pop	{r4, r5, r6}
 8008508:	4770      	bx	lr
 800850a:	200b      	movs	r0, #11
 800850c:	bc70      	pop	{r4, r5, r6}
 800850e:	4770      	bx	lr
 8008510:	20009468 	.word	0x20009468

08008514 <flush_session>:
 8008514:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8008516:	f003 b897 	b.w	800b648 <uxr_run_session_until_confirm_delivery>
 800851a:	bf00      	nop

0800851c <rmw_publish>:
 800851c:	2800      	cmp	r0, #0
 800851e:	d053      	beq.n	80085c8 <rmw_publish+0xac>
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	460d      	mov	r5, r1
 8008524:	b08e      	sub	sp, #56	; 0x38
 8008526:	2900      	cmp	r1, #0
 8008528:	d04b      	beq.n	80085c2 <rmw_publish+0xa6>
 800852a:	4604      	mov	r4, r0
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f000 fc05 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 8008532:	2800      	cmp	r0, #0
 8008534:	d045      	beq.n	80085c2 <rmw_publish+0xa6>
 8008536:	6866      	ldr	r6, [r4, #4]
 8008538:	2e00      	cmp	r6, #0
 800853a:	d042      	beq.n	80085c2 <rmw_publish+0xa6>
 800853c:	69b4      	ldr	r4, [r6, #24]
 800853e:	4628      	mov	r0, r5
 8008540:	6923      	ldr	r3, [r4, #16]
 8008542:	4798      	blx	r3
 8008544:	69f3      	ldr	r3, [r6, #28]
 8008546:	9005      	str	r0, [sp, #20]
 8008548:	b113      	cbz	r3, 8008550 <rmw_publish+0x34>
 800854a:	a805      	add	r0, sp, #20
 800854c:	4798      	blx	r3
 800854e:	9805      	ldr	r0, [sp, #20]
 8008550:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	9000      	str	r0, [sp, #0]
 8008558:	6972      	ldr	r2, [r6, #20]
 800855a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800855c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008560:	ab06      	add	r3, sp, #24
 8008562:	f003 fe79 	bl	800c258 <uxr_prepare_output_stream>
 8008566:	b1d8      	cbz	r0, 80085a0 <rmw_publish+0x84>
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	4628      	mov	r0, r5
 800856c:	a906      	add	r1, sp, #24
 800856e:	4798      	blx	r3
 8008570:	6a33      	ldr	r3, [r6, #32]
 8008572:	4604      	mov	r4, r0
 8008574:	b10b      	cbz	r3, 800857a <rmw_publish+0x5e>
 8008576:	a806      	add	r0, sp, #24
 8008578:	4798      	blx	r3
 800857a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800857e:	2b01      	cmp	r3, #1
 8008580:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008584:	d022      	beq.n	80085cc <rmw_publish+0xb0>
 8008586:	6918      	ldr	r0, [r3, #16]
 8008588:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800858a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800858e:	f003 f85b 	bl	800b648 <uxr_run_session_until_confirm_delivery>
 8008592:	4020      	ands	r0, r4
 8008594:	b2c4      	uxtb	r4, r0
 8008596:	f084 0001 	eor.w	r0, r4, #1
 800859a:	b2c0      	uxtb	r0, r0
 800859c:	b00e      	add	sp, #56	; 0x38
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80085a4:	4a0c      	ldr	r2, [pc, #48]	; (80085d8 <rmw_publish+0xbc>)
 80085a6:	6918      	ldr	r0, [r3, #16]
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80085b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80085b4:	6972      	ldr	r2, [r6, #20]
 80085b6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80085b8:	ab06      	add	r3, sp, #24
 80085ba:	f003 fe7d 	bl	800c2b8 <uxr_prepare_output_stream_fragmented>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d1d2      	bne.n	8008568 <rmw_publish+0x4c>
 80085c2:	2001      	movs	r0, #1
 80085c4:	b00e      	add	sp, #56	; 0x38
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	2001      	movs	r0, #1
 80085ca:	4770      	bx	lr
 80085cc:	6918      	ldr	r0, [r3, #16]
 80085ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80085d2:	f002 fcb7 	bl	800af44 <uxr_flash_output_streams>
 80085d6:	e7de      	b.n	8008596 <rmw_publish+0x7a>
 80085d8:	08008515 	.word	0x08008515

080085dc <rmw_create_publisher>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	b087      	sub	sp, #28
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f000 80c9 	beq.w	800877a <rmw_create_publisher+0x19e>
 80085e8:	460e      	mov	r6, r1
 80085ea:	2900      	cmp	r1, #0
 80085ec:	f000 80c5 	beq.w	800877a <rmw_create_publisher+0x19e>
 80085f0:	4604      	mov	r4, r0
 80085f2:	6800      	ldr	r0, [r0, #0]
 80085f4:	4615      	mov	r5, r2
 80085f6:	4698      	mov	r8, r3
 80085f8:	f000 fba0 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	f000 80bc 	beq.w	800877a <rmw_create_publisher+0x19e>
 8008602:	2d00      	cmp	r5, #0
 8008604:	f000 80b9 	beq.w	800877a <rmw_create_publisher+0x19e>
 8008608:	782b      	ldrb	r3, [r5, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80b5 	beq.w	800877a <rmw_create_publisher+0x19e>
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	f000 80b1 	beq.w	800877a <rmw_create_publisher+0x19e>
 8008618:	485a      	ldr	r0, [pc, #360]	; (8008784 <rmw_create_publisher+0x1a8>)
 800861a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800861e:	f006 f9fd 	bl	800ea1c <get_memory>
 8008622:	2800      	cmp	r0, #0
 8008624:	f000 80a9 	beq.w	800877a <rmw_create_publisher+0x19e>
 8008628:	68c4      	ldr	r4, [r0, #12]
 800862a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800862e:	f006 fa5d 	bl	800eaec <rmw_get_implementation_identifier>
 8008632:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8008636:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800863a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800863e:	4628      	mov	r0, r5
 8008640:	f7f7 fdf0 	bl	8000224 <strlen>
 8008644:	3001      	adds	r0, #1
 8008646:	283c      	cmp	r0, #60	; 0x3c
 8008648:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800864c:	f200 808e 	bhi.w	800876c <rmw_create_publisher+0x190>
 8008650:	4a4d      	ldr	r2, [pc, #308]	; (8008788 <rmw_create_publisher+0x1ac>)
 8008652:	462b      	mov	r3, r5
 8008654:	213c      	movs	r1, #60	; 0x3c
 8008656:	4650      	mov	r0, sl
 8008658:	f009 f944 	bl	80118e4 <sniprintf>
 800865c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008660:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8008664:	4641      	mov	r1, r8
 8008666:	2250      	movs	r2, #80	; 0x50
 8008668:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800866c:	f009 facd 	bl	8011c0a <memcpy>
 8008670:	f898 3008 	ldrb.w	r3, [r8, #8]
 8008674:	4945      	ldr	r1, [pc, #276]	; (800878c <rmw_create_publisher+0x1b0>)
 8008676:	2b02      	cmp	r3, #2
 8008678:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800867c:	bf0c      	ite	eq
 800867e:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8008682:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8008686:	67a3      	str	r3, [r4, #120]	; 0x78
 8008688:	2300      	movs	r3, #0
 800868a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800868e:	4630      	mov	r0, r6
 8008690:	f000 fb62 	bl	8008d58 <get_message_typesupport_handle>
 8008694:	2800      	cmp	r0, #0
 8008696:	d069      	beq.n	800876c <rmw_create_publisher+0x190>
 8008698:	6842      	ldr	r2, [r0, #4]
 800869a:	61a2      	str	r2, [r4, #24]
 800869c:	2a00      	cmp	r2, #0
 800869e:	d065      	beq.n	800876c <rmw_create_publisher+0x190>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4643      	mov	r3, r8
 80086a4:	4648      	mov	r0, r9
 80086a6:	f006 fc6b 	bl	800ef80 <create_topic>
 80086aa:	6260      	str	r0, [r4, #36]	; 0x24
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d061      	beq.n	8008774 <rmw_create_publisher+0x198>
 80086b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80086b4:	f241 5398 	movw	r3, #5528	; 0x1598
 80086b8:	2103      	movs	r1, #3
 80086ba:	5ad0      	ldrh	r0, [r2, r3]
 80086bc:	1c45      	adds	r5, r0, #1
 80086be:	52d5      	strh	r5, [r2, r3]
 80086c0:	f002 faf4 	bl	800acac <uxr_object_id>
 80086c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80086cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80086d0:	6912      	ldr	r2, [r2, #16]
 80086d2:	6120      	str	r0, [r4, #16]
 80086d4:	f04f 0a06 	mov.w	sl, #6
 80086d8:	f8cd a000 	str.w	sl, [sp]
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80086e2:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80086e6:	6922      	ldr	r2, [r4, #16]
 80086e8:	f002 fa3a 	bl	800ab60 <uxr_buffer_create_publisher_bin>
 80086ec:	4602      	mov	r2, r0
 80086ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80086f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80086f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80086fa:	f000 fa9f 	bl	8008c3c <run_xrce_session>
 80086fe:	b3a8      	cbz	r0, 800876c <rmw_create_publisher+0x190>
 8008700:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008704:	f241 539a 	movw	r3, #5530	; 0x159a
 8008708:	2105      	movs	r1, #5
 800870a:	5ad0      	ldrh	r0, [r2, r3]
 800870c:	1c45      	adds	r5, r0, #1
 800870e:	52d5      	strh	r5, [r2, r3]
 8008710:	f002 facc 	bl	800acac <uxr_object_id>
 8008714:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008718:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800871c:	6915      	ldr	r5, [r2, #16]
 800871e:	6160      	str	r0, [r4, #20]
 8008720:	ae04      	add	r6, sp, #16
 8008722:	4641      	mov	r1, r8
 8008724:	4630      	mov	r0, r6
 8008726:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800872a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800872e:	f000 faa1 	bl	8008c74 <convert_qos_profile>
 8008732:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008736:	f8cd a00c 	str.w	sl, [sp, #12]
 800873a:	9001      	str	r0, [sp, #4]
 800873c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008740:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800874a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800874e:	f8d8 1000 	ldr.w	r1, [r8]
 8008752:	4628      	mov	r0, r5
 8008754:	f002 fa32 	bl	800abbc <uxr_buffer_create_datawriter_bin>
 8008758:	4602      	mov	r2, r0
 800875a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800875e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008762:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8008766:	f000 fa69 	bl	8008c3c <run_xrce_session>
 800876a:	b938      	cbnz	r0, 800877c <rmw_create_publisher+0x1a0>
 800876c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800876e:	b108      	cbz	r0, 8008774 <rmw_create_publisher+0x198>
 8008770:	f000 fa0c 	bl	8008b8c <rmw_uxrce_fini_topic_memory>
 8008774:	4638      	mov	r0, r7
 8008776:	f000 f9b1 	bl	8008adc <rmw_uxrce_fini_publisher_memory>
 800877a:	2700      	movs	r7, #0
 800877c:	4638      	mov	r0, r7
 800877e:	b007      	add	sp, #28
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	20009498 	.word	0x20009498
 8008788:	08012c8c 	.word	0x08012c8c
 800878c:	08012c58 	.word	0x08012c58

08008790 <rmw_publisher_get_actual_qos>:
 8008790:	b150      	cbz	r0, 80087a8 <rmw_publisher_get_actual_qos+0x18>
 8008792:	b149      	cbz	r1, 80087a8 <rmw_publisher_get_actual_qos+0x18>
 8008794:	b508      	push	{r3, lr}
 8008796:	6843      	ldr	r3, [r0, #4]
 8008798:	2250      	movs	r2, #80	; 0x50
 800879a:	4608      	mov	r0, r1
 800879c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80087a0:	f009 fa33 	bl	8011c0a <memcpy>
 80087a4:	2000      	movs	r0, #0
 80087a6:	bd08      	pop	{r3, pc}
 80087a8:	200b      	movs	r0, #11
 80087aa:	4770      	bx	lr

080087ac <rmw_destroy_publisher>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	b128      	cbz	r0, 80087bc <rmw_destroy_publisher+0x10>
 80087b0:	4604      	mov	r4, r0
 80087b2:	6800      	ldr	r0, [r0, #0]
 80087b4:	460d      	mov	r5, r1
 80087b6:	f000 fac1 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 80087ba:	b910      	cbnz	r0, 80087c2 <rmw_destroy_publisher+0x16>
 80087bc:	2401      	movs	r4, #1
 80087be:	4620      	mov	r0, r4
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0f9      	beq.n	80087bc <rmw_destroy_publisher+0x10>
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d0f7      	beq.n	80087bc <rmw_destroy_publisher+0x10>
 80087cc:	6828      	ldr	r0, [r5, #0]
 80087ce:	f000 fab5 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d0f2      	beq.n	80087bc <rmw_destroy_publisher+0x10>
 80087d6:	686c      	ldr	r4, [r5, #4]
 80087d8:	2c00      	cmp	r4, #0
 80087da:	d0ef      	beq.n	80087bc <rmw_destroy_publisher+0x10>
 80087dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087de:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80087e2:	f006 fc1d 	bl	800f020 <destroy_topic>
 80087e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80087ea:	6962      	ldr	r2, [r4, #20]
 80087ec:	6918      	ldr	r0, [r3, #16]
 80087ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80087f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80087f6:	6819      	ldr	r1, [r3, #0]
 80087f8:	f002 f900 	bl	800a9fc <uxr_buffer_delete_entity>
 80087fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	4603      	mov	r3, r0
 8008804:	6908      	ldr	r0, [r1, #16]
 8008806:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800880a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800880e:	6809      	ldr	r1, [r1, #0]
 8008810:	461c      	mov	r4, r3
 8008812:	f002 f8f3 	bl	800a9fc <uxr_buffer_delete_entity>
 8008816:	4606      	mov	r6, r0
 8008818:	6938      	ldr	r0, [r7, #16]
 800881a:	4622      	mov	r2, r4
 800881c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8008820:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8008824:	f000 fa0a 	bl	8008c3c <run_xrce_session>
 8008828:	4604      	mov	r4, r0
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	4632      	mov	r2, r6
 800882e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8008832:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8008836:	f000 fa01 	bl	8008c3c <run_xrce_session>
 800883a:	b12c      	cbz	r4, 8008848 <rmw_destroy_publisher+0x9c>
 800883c:	b120      	cbz	r0, 8008848 <rmw_destroy_publisher+0x9c>
 800883e:	2400      	movs	r4, #0
 8008840:	4628      	mov	r0, r5
 8008842:	f000 f94b 	bl	8008adc <rmw_uxrce_fini_publisher_memory>
 8008846:	e7ba      	b.n	80087be <rmw_destroy_publisher+0x12>
 8008848:	2402      	movs	r4, #2
 800884a:	e7f9      	b.n	8008840 <rmw_destroy_publisher+0x94>

0800884c <rmw_uxrce_init_service_memory>:
 800884c:	b1b2      	cbz	r2, 800887c <rmw_uxrce_init_service_memory+0x30>
 800884e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008850:	7a07      	ldrb	r7, [r0, #8]
 8008852:	4605      	mov	r5, r0
 8008854:	b98f      	cbnz	r7, 800887a <rmw_uxrce_init_service_memory+0x2e>
 8008856:	e9c0 7700 	strd	r7, r7, [r0]
 800885a:	460c      	mov	r4, r1
 800885c:	23c8      	movs	r3, #200	; 0xc8
 800885e:	2101      	movs	r1, #1
 8008860:	fb03 4602 	mla	r6, r3, r2, r4
 8008864:	60c3      	str	r3, [r0, #12]
 8008866:	7201      	strb	r1, [r0, #8]
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f006 f8e6 	bl	800ea3c <put_memory>
 8008870:	60e4      	str	r4, [r4, #12]
 8008872:	f804 7bc8 	strb.w	r7, [r4], #200
 8008876:	42a6      	cmp	r6, r4
 8008878:	d1f6      	bne.n	8008868 <rmw_uxrce_init_service_memory+0x1c>
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop

08008880 <rmw_uxrce_init_client_memory>:
 8008880:	b1b2      	cbz	r2, 80088b0 <rmw_uxrce_init_client_memory+0x30>
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	7a07      	ldrb	r7, [r0, #8]
 8008886:	4605      	mov	r5, r0
 8008888:	b98f      	cbnz	r7, 80088ae <rmw_uxrce_init_client_memory+0x2e>
 800888a:	e9c0 7700 	strd	r7, r7, [r0]
 800888e:	460c      	mov	r4, r1
 8008890:	23c8      	movs	r3, #200	; 0xc8
 8008892:	2101      	movs	r1, #1
 8008894:	fb03 4602 	mla	r6, r3, r2, r4
 8008898:	60c3      	str	r3, [r0, #12]
 800889a:	7201      	strb	r1, [r0, #8]
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f006 f8cc 	bl	800ea3c <put_memory>
 80088a4:	60e4      	str	r4, [r4, #12]
 80088a6:	f804 7bc8 	strb.w	r7, [r4], #200
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d1f6      	bne.n	800889c <rmw_uxrce_init_client_memory+0x1c>
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <rmw_uxrce_init_publisher_memory>:
 80088b4:	b1b2      	cbz	r2, 80088e4 <rmw_uxrce_init_publisher_memory+0x30>
 80088b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b8:	7a07      	ldrb	r7, [r0, #8]
 80088ba:	4605      	mov	r5, r0
 80088bc:	b98f      	cbnz	r7, 80088e2 <rmw_uxrce_init_publisher_memory+0x2e>
 80088be:	e9c0 7700 	strd	r7, r7, [r0]
 80088c2:	460c      	mov	r4, r1
 80088c4:	23d8      	movs	r3, #216	; 0xd8
 80088c6:	2101      	movs	r1, #1
 80088c8:	fb03 4602 	mla	r6, r3, r2, r4
 80088cc:	60c3      	str	r3, [r0, #12]
 80088ce:	7201      	strb	r1, [r0, #8]
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f006 f8b2 	bl	800ea3c <put_memory>
 80088d8:	60e4      	str	r4, [r4, #12]
 80088da:	f804 7bd8 	strb.w	r7, [r4], #216
 80088de:	42a6      	cmp	r6, r4
 80088e0:	d1f6      	bne.n	80088d0 <rmw_uxrce_init_publisher_memory+0x1c>
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <rmw_uxrce_init_subscription_memory>:
 80088e8:	b1b2      	cbz	r2, 8008918 <rmw_uxrce_init_subscription_memory+0x30>
 80088ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ec:	7a07      	ldrb	r7, [r0, #8]
 80088ee:	4605      	mov	r5, r0
 80088f0:	b98f      	cbnz	r7, 8008916 <rmw_uxrce_init_subscription_memory+0x2e>
 80088f2:	e9c0 7700 	strd	r7, r7, [r0]
 80088f6:	460c      	mov	r4, r1
 80088f8:	23d0      	movs	r3, #208	; 0xd0
 80088fa:	2101      	movs	r1, #1
 80088fc:	fb03 4602 	mla	r6, r3, r2, r4
 8008900:	60c3      	str	r3, [r0, #12]
 8008902:	7201      	strb	r1, [r0, #8]
 8008904:	4621      	mov	r1, r4
 8008906:	4628      	mov	r0, r5
 8008908:	f006 f898 	bl	800ea3c <put_memory>
 800890c:	60e4      	str	r4, [r4, #12]
 800890e:	f804 7bd0 	strb.w	r7, [r4], #208
 8008912:	42a6      	cmp	r6, r4
 8008914:	d1f6      	bne.n	8008904 <rmw_uxrce_init_subscription_memory+0x1c>
 8008916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop

0800891c <rmw_uxrce_init_node_memory>:
 800891c:	b1b2      	cbz	r2, 800894c <rmw_uxrce_init_node_memory+0x30>
 800891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008920:	7a07      	ldrb	r7, [r0, #8]
 8008922:	4605      	mov	r5, r0
 8008924:	b98f      	cbnz	r7, 800894a <rmw_uxrce_init_node_memory+0x2e>
 8008926:	e9c0 7700 	strd	r7, r7, [r0]
 800892a:	460c      	mov	r4, r1
 800892c:	23a4      	movs	r3, #164	; 0xa4
 800892e:	2101      	movs	r1, #1
 8008930:	fb03 4602 	mla	r6, r3, r2, r4
 8008934:	60c3      	str	r3, [r0, #12]
 8008936:	7201      	strb	r1, [r0, #8]
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f006 f87e 	bl	800ea3c <put_memory>
 8008940:	60e4      	str	r4, [r4, #12]
 8008942:	f804 7ba4 	strb.w	r7, [r4], #164
 8008946:	42a6      	cmp	r6, r4
 8008948:	d1f6      	bne.n	8008938 <rmw_uxrce_init_node_memory+0x1c>
 800894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <rmw_uxrce_init_session_memory>:
 8008950:	b1d2      	cbz	r2, 8008988 <rmw_uxrce_init_session_memory+0x38>
 8008952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008956:	7a07      	ldrb	r7, [r0, #8]
 8008958:	4605      	mov	r5, r0
 800895a:	b99f      	cbnz	r7, 8008984 <rmw_uxrce_init_session_memory+0x34>
 800895c:	e9c0 7700 	strd	r7, r7, [r0]
 8008960:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8008964:	460c      	mov	r4, r1
 8008966:	2101      	movs	r1, #1
 8008968:	fb03 4602 	mla	r6, r3, r2, r4
 800896c:	60c3      	str	r3, [r0, #12]
 800896e:	4698      	mov	r8, r3
 8008970:	7201      	strb	r1, [r0, #8]
 8008972:	4621      	mov	r1, r4
 8008974:	4628      	mov	r0, r5
 8008976:	f006 f861 	bl	800ea3c <put_memory>
 800897a:	60e4      	str	r4, [r4, #12]
 800897c:	7027      	strb	r7, [r4, #0]
 800897e:	4444      	add	r4, r8
 8008980:	42a6      	cmp	r6, r4
 8008982:	d1f6      	bne.n	8008972 <rmw_uxrce_init_session_memory+0x22>
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <rmw_uxrce_init_topic_memory>:
 800898c:	b1c2      	cbz	r2, 80089c0 <rmw_uxrce_init_topic_memory+0x34>
 800898e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008990:	7a07      	ldrb	r7, [r0, #8]
 8008992:	4606      	mov	r6, r0
 8008994:	b99f      	cbnz	r7, 80089be <rmw_uxrce_init_topic_memory+0x32>
 8008996:	e9c0 7700 	strd	r7, r7, [r0]
 800899a:	460c      	mov	r4, r1
 800899c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80089a0:	2101      	movs	r1, #1
 80089a2:	231c      	movs	r3, #28
 80089a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089a8:	7201      	strb	r1, [r0, #8]
 80089aa:	60c3      	str	r3, [r0, #12]
 80089ac:	4621      	mov	r1, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	f006 f844 	bl	800ea3c <put_memory>
 80089b4:	60e4      	str	r4, [r4, #12]
 80089b6:	f804 7b1c 	strb.w	r7, [r4], #28
 80089ba:	42a5      	cmp	r5, r4
 80089bc:	d1f6      	bne.n	80089ac <rmw_uxrce_init_topic_memory+0x20>
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop

080089c4 <rmw_uxrce_init_static_input_buffer_memory>:
 80089c4:	b1d2      	cbz	r2, 80089fc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80089c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c8:	7a07      	ldrb	r7, [r0, #8]
 80089ca:	4606      	mov	r6, r0
 80089cc:	b9af      	cbnz	r7, 80089fa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 80089ce:	e9c0 7700 	strd	r7, r7, [r0]
 80089d2:	460c      	mov	r4, r1
 80089d4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80089d8:	2101      	movs	r1, #1
 80089da:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80089de:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80089e2:	7201      	strb	r1, [r0, #8]
 80089e4:	60c3      	str	r3, [r0, #12]
 80089e6:	4621      	mov	r1, r4
 80089e8:	4630      	mov	r0, r6
 80089ea:	f006 f827 	bl	800ea3c <put_memory>
 80089ee:	60e4      	str	r4, [r4, #12]
 80089f0:	7027      	strb	r7, [r4, #0]
 80089f2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80089f6:	42a5      	cmp	r5, r4
 80089f8:	d1f5      	bne.n	80089e6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80089fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <rmw_uxrce_init_init_options_impl_memory>:
 8008a00:	b1b2      	cbz	r2, 8008a30 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8008a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a04:	7a07      	ldrb	r7, [r0, #8]
 8008a06:	4605      	mov	r5, r0
 8008a08:	b98f      	cbnz	r7, 8008a2e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 8008a0a:	e9c0 7700 	strd	r7, r7, [r0]
 8008a0e:	460c      	mov	r4, r1
 8008a10:	232c      	movs	r3, #44	; 0x2c
 8008a12:	2101      	movs	r1, #1
 8008a14:	fb03 4602 	mla	r6, r3, r2, r4
 8008a18:	60c3      	str	r3, [r0, #12]
 8008a1a:	7201      	strb	r1, [r0, #8]
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f006 f80c 	bl	800ea3c <put_memory>
 8008a24:	60e4      	str	r4, [r4, #12]
 8008a26:	f804 7b2c 	strb.w	r7, [r4], #44
 8008a2a:	42a6      	cmp	r6, r4
 8008a2c:	d1f6      	bne.n	8008a1c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop

08008a34 <rmw_uxrce_init_wait_set_memory>:
 8008a34:	b1c2      	cbz	r2, 8008a68 <rmw_uxrce_init_wait_set_memory+0x34>
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	7a07      	ldrb	r7, [r0, #8]
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	b99f      	cbnz	r7, 8008a66 <rmw_uxrce_init_wait_set_memory+0x32>
 8008a3e:	e9c0 7700 	strd	r7, r7, [r0]
 8008a42:	460c      	mov	r4, r1
 8008a44:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008a48:	2101      	movs	r1, #1
 8008a4a:	231c      	movs	r3, #28
 8008a4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a50:	7201      	strb	r1, [r0, #8]
 8008a52:	60c3      	str	r3, [r0, #12]
 8008a54:	4621      	mov	r1, r4
 8008a56:	4630      	mov	r0, r6
 8008a58:	f005 fff0 	bl	800ea3c <put_memory>
 8008a5c:	60e4      	str	r4, [r4, #12]
 8008a5e:	f804 7b1c 	strb.w	r7, [r4], #28
 8008a62:	42a5      	cmp	r5, r4
 8008a64:	d1f6      	bne.n	8008a54 <rmw_uxrce_init_wait_set_memory+0x20>
 8008a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <rmw_uxrce_init_guard_condition_memory>:
 8008a6c:	b1b2      	cbz	r2, 8008a9c <rmw_uxrce_init_guard_condition_memory+0x30>
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	7a07      	ldrb	r7, [r0, #8]
 8008a72:	4605      	mov	r5, r0
 8008a74:	b98f      	cbnz	r7, 8008a9a <rmw_uxrce_init_guard_condition_memory+0x2e>
 8008a76:	e9c0 7700 	strd	r7, r7, [r0]
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	2101      	movs	r1, #1
 8008a80:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8008a84:	7201      	strb	r1, [r0, #8]
 8008a86:	60c3      	str	r3, [r0, #12]
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f005 ffd6 	bl	800ea3c <put_memory>
 8008a90:	60e4      	str	r4, [r4, #12]
 8008a92:	f804 7b20 	strb.w	r7, [r4], #32
 8008a96:	42a6      	cmp	r6, r4
 8008a98:	d1f6      	bne.n	8008a88 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop

08008aa0 <rmw_uxrce_fini_session_memory>:
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <rmw_uxrce_fini_session_memory+0x8>)
 8008aa4:	f005 bfca 	b.w	800ea3c <put_memory>
 8008aa8:	2000c630 	.word	0x2000c630

08008aac <rmw_uxrce_fini_node_memory>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4604      	mov	r4, r0
 8008ab0:	6800      	ldr	r0, [r0, #0]
 8008ab2:	b128      	cbz	r0, 8008ac0 <rmw_uxrce_fini_node_memory+0x14>
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <rmw_uxrce_fini_node_memory+0x28>)
 8008ab6:	6819      	ldr	r1, [r3, #0]
 8008ab8:	f7f7 fbaa 	bl	8000210 <strcmp>
 8008abc:	b940      	cbnz	r0, 8008ad0 <rmw_uxrce_fini_node_memory+0x24>
 8008abe:	6020      	str	r0, [r4, #0]
 8008ac0:	6861      	ldr	r1, [r4, #4]
 8008ac2:	b129      	cbz	r1, 8008ad0 <rmw_uxrce_fini_node_memory+0x24>
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	4804      	ldr	r0, [pc, #16]	; (8008ad8 <rmw_uxrce_fini_node_memory+0x2c>)
 8008ac8:	610d      	str	r5, [r1, #16]
 8008aca:	f005 ffb7 	bl	800ea3c <put_memory>
 8008ace:	6065      	str	r5, [r4, #4]
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	bf00      	nop
 8008ad4:	080131a4 	.word	0x080131a4
 8008ad8:	2000c45c 	.word	0x2000c45c

08008adc <rmw_uxrce_fini_publisher_memory>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	6800      	ldr	r0, [r0, #0]
 8008ae2:	b128      	cbz	r0, 8008af0 <rmw_uxrce_fini_publisher_memory+0x14>
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <rmw_uxrce_fini_publisher_memory+0x24>)
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	f7f7 fb92 	bl	8000210 <strcmp>
 8008aec:	b938      	cbnz	r0, 8008afe <rmw_uxrce_fini_publisher_memory+0x22>
 8008aee:	6020      	str	r0, [r4, #0]
 8008af0:	6861      	ldr	r1, [r4, #4]
 8008af2:	b121      	cbz	r1, 8008afe <rmw_uxrce_fini_publisher_memory+0x22>
 8008af4:	4803      	ldr	r0, [pc, #12]	; (8008b04 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008af6:	f005 ffa1 	bl	800ea3c <put_memory>
 8008afa:	2300      	movs	r3, #0
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	080131a4 	.word	0x080131a4
 8008b04:	20009498 	.word	0x20009498

08008b08 <rmw_uxrce_fini_subscription_memory>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	6800      	ldr	r0, [r0, #0]
 8008b0e:	b128      	cbz	r0, 8008b1c <rmw_uxrce_fini_subscription_memory+0x14>
 8008b10:	4b06      	ldr	r3, [pc, #24]	; (8008b2c <rmw_uxrce_fini_subscription_memory+0x24>)
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	f7f7 fb7c 	bl	8000210 <strcmp>
 8008b18:	b938      	cbnz	r0, 8008b2a <rmw_uxrce_fini_subscription_memory+0x22>
 8008b1a:	6020      	str	r0, [r4, #0]
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	b121      	cbz	r1, 8008b2a <rmw_uxrce_fini_subscription_memory+0x22>
 8008b20:	4803      	ldr	r0, [pc, #12]	; (8008b30 <rmw_uxrce_fini_subscription_memory+0x28>)
 8008b22:	f005 ff8b 	bl	800ea3c <put_memory>
 8008b26:	2300      	movs	r3, #0
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	bd10      	pop	{r4, pc}
 8008b2c:	080131a4 	.word	0x080131a4
 8008b30:	2000c6f4 	.word	0x2000c6f4

08008b34 <rmw_uxrce_fini_service_memory>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	6800      	ldr	r0, [r0, #0]
 8008b3a:	b128      	cbz	r0, 8008b48 <rmw_uxrce_fini_service_memory+0x14>
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <rmw_uxrce_fini_service_memory+0x24>)
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	f7f7 fb66 	bl	8000210 <strcmp>
 8008b44:	b938      	cbnz	r0, 8008b56 <rmw_uxrce_fini_service_memory+0x22>
 8008b46:	6020      	str	r0, [r4, #0]
 8008b48:	6861      	ldr	r1, [r4, #4]
 8008b4a:	b121      	cbz	r1, 8008b56 <rmw_uxrce_fini_service_memory+0x22>
 8008b4c:	4803      	ldr	r0, [pc, #12]	; (8008b5c <rmw_uxrce_fini_service_memory+0x28>)
 8008b4e:	f005 ff75 	bl	800ea3c <put_memory>
 8008b52:	2300      	movs	r3, #0
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	080131a4 	.word	0x080131a4
 8008b5c:	2000c6e4 	.word	0x2000c6e4

08008b60 <rmw_uxrce_fini_client_memory>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	4604      	mov	r4, r0
 8008b64:	6800      	ldr	r0, [r0, #0]
 8008b66:	b128      	cbz	r0, 8008b74 <rmw_uxrce_fini_client_memory+0x14>
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <rmw_uxrce_fini_client_memory+0x24>)
 8008b6a:	6819      	ldr	r1, [r3, #0]
 8008b6c:	f7f7 fb50 	bl	8000210 <strcmp>
 8008b70:	b938      	cbnz	r0, 8008b82 <rmw_uxrce_fini_client_memory+0x22>
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	6861      	ldr	r1, [r4, #4]
 8008b76:	b121      	cbz	r1, 8008b82 <rmw_uxrce_fini_client_memory+0x22>
 8008b78:	4803      	ldr	r0, [pc, #12]	; (8008b88 <rmw_uxrce_fini_client_memory+0x28>)
 8008b7a:	f005 ff5f 	bl	800ea3c <put_memory>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	bd10      	pop	{r4, pc}
 8008b84:	080131a4 	.word	0x080131a4
 8008b88:	20009d18 	.word	0x20009d18

08008b8c <rmw_uxrce_fini_topic_memory>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4601      	mov	r1, r0
 8008b90:	4604      	mov	r4, r0
 8008b92:	4803      	ldr	r0, [pc, #12]	; (8008ba0 <rmw_uxrce_fini_topic_memory+0x14>)
 8008b94:	f005 ff52 	bl	800ea3c <put_memory>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61a3      	str	r3, [r4, #24]
 8008b9c:	bd10      	pop	{r4, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2000c620 	.word	0x2000c620

08008ba4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	b4f0      	push	{r4, r5, r6, r7}
 8008ba8:	4923      	ldr	r1, [pc, #140]	; (8008c38 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8008baa:	ac04      	add	r4, sp, #16
 8008bac:	e884 000c 	stmia.w	r4, {r2, r3}
 8008bb0:	680d      	ldr	r5, [r1, #0]
 8008bb2:	9c05      	ldr	r4, [sp, #20]
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	d03d      	beq.n	8008c34 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8008bb8:	462b      	mov	r3, r5
 8008bba:	2100      	movs	r1, #0
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008bc4:	4290      	cmp	r0, r2
 8008bc6:	bf08      	it	eq
 8008bc8:	3101      	addeq	r1, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f6      	bne.n	8008bbc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008bce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d026      	beq.n	8008c24 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8008bd6:	d906      	bls.n	8008be6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d004      	beq.n	8008be6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8008bdc:	2100      	movs	r1, #0
 8008bde:	bcf0      	pop	{r4, r5, r6, r7}
 8008be0:	4608      	mov	r0, r1
 8008be2:	b002      	add	sp, #8
 8008be4:	4770      	bx	lr
 8008be6:	b304      	cbz	r4, 8008c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008be8:	428c      	cmp	r4, r1
 8008bea:	d81e      	bhi.n	8008c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	d0f5      	beq.n	8008bdc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008bf6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8008bfa:	e002      	b.n	8008c02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8008bfc:	68ad      	ldr	r5, [r5, #8]
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	d0ed      	beq.n	8008bde <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008c02:	68eb      	ldr	r3, [r5, #12]
 8008c04:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8008c08:	4290      	cmp	r0, r2
 8008c0a:	d1f7      	bne.n	8008bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008c0c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	42b2      	cmp	r2, r6
 8008c16:	eb73 0407 	sbcs.w	r4, r3, r7
 8008c1a:	daef      	bge.n	8008bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	461f      	mov	r7, r3
 8008c20:	4629      	mov	r1, r5
 8008c22:	e7eb      	b.n	8008bfc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008c24:	b10c      	cbz	r4, 8008c2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008c26:	428c      	cmp	r4, r1
 8008c28:	d9d8      	bls.n	8008bdc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8008c2c:	4802      	ldr	r0, [pc, #8]	; (8008c38 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8008c2e:	b002      	add	sp, #8
 8008c30:	f005 bef4 	b.w	800ea1c <get_memory>
 8008c34:	4629      	mov	r1, r5
 8008c36:	e7ca      	b.n	8008bce <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008c38:	20009488 	.word	0x20009488

08008c3c <run_xrce_session>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	788c      	ldrb	r4, [r1, #2]
 8008c40:	b086      	sub	sp, #24
 8008c42:	2c01      	cmp	r4, #1
 8008c44:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008c48:	d00c      	beq.n	8008c64 <run_xrce_session+0x28>
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	f10d 020e 	add.w	r2, sp, #14
 8008c54:	f10d 0317 	add.w	r3, sp, #23
 8008c58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008c5c:	f002 fd1a 	bl	800b694 <uxr_run_session_until_all_status>
 8008c60:	b006      	add	sp, #24
 8008c62:	bd10      	pop	{r4, pc}
 8008c64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008c68:	f002 f96c 	bl	800af44 <uxr_flash_output_streams>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	b006      	add	sp, #24
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	bf00      	nop

08008c74 <convert_qos_profile>:
 8008c74:	b430      	push	{r4, r5}
 8008c76:	7a0d      	ldrb	r5, [r1, #8]
 8008c78:	780c      	ldrb	r4, [r1, #0]
 8008c7a:	7a4a      	ldrb	r2, [r1, #9]
 8008c7c:	8889      	ldrh	r1, [r1, #4]
 8008c7e:	8081      	strh	r1, [r0, #4]
 8008c80:	f1a5 0502 	sub.w	r5, r5, #2
 8008c84:	f1a4 0402 	sub.w	r4, r4, #2
 8008c88:	2a02      	cmp	r2, #2
 8008c8a:	fab5 f585 	clz	r5, r5
 8008c8e:	fab4 f484 	clz	r4, r4
 8008c92:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8008c96:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8008c9a:	bf18      	it	ne
 8008c9c:	2200      	movne	r2, #0
 8008c9e:	7045      	strb	r5, [r0, #1]
 8008ca0:	7084      	strb	r4, [r0, #2]
 8008ca2:	7002      	strb	r2, [r0, #0]
 8008ca4:	bc30      	pop	{r4, r5}
 8008ca6:	4770      	bx	lr

08008ca8 <generate_type_name>:
 8008ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008caa:	2300      	movs	r3, #0
 8008cac:	700b      	strb	r3, [r1, #0]
 8008cae:	6803      	ldr	r3, [r0, #0]
 8008cb0:	b087      	sub	sp, #28
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	b1d3      	cbz	r3, 8008cec <generate_type_name+0x44>
 8008cb6:	4d0f      	ldr	r5, [pc, #60]	; (8008cf4 <generate_type_name+0x4c>)
 8008cb8:	462f      	mov	r7, r5
 8008cba:	4a0f      	ldr	r2, [pc, #60]	; (8008cf8 <generate_type_name+0x50>)
 8008cbc:	4e0f      	ldr	r6, [pc, #60]	; (8008cfc <generate_type_name+0x54>)
 8008cbe:	6840      	ldr	r0, [r0, #4]
 8008cc0:	9004      	str	r0, [sp, #16]
 8008cc2:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	9205      	str	r2, [sp, #20]
 8008cca:	9503      	str	r5, [sp, #12]
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <generate_type_name+0x58>)
 8008cce:	9700      	str	r7, [sp, #0]
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f008 fe07 	bl	80118e4 <sniprintf>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	db05      	blt.n	8008ce6 <generate_type_name+0x3e>
 8008cda:	4284      	cmp	r4, r0
 8008cdc:	bfd4      	ite	le
 8008cde:	2000      	movle	r0, #0
 8008ce0:	2001      	movgt	r0, #1
 8008ce2:	b007      	add	sp, #28
 8008ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	b007      	add	sp, #28
 8008cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <generate_type_name+0x5c>)
 8008cee:	4d01      	ldr	r5, [pc, #4]	; (8008cf4 <generate_type_name+0x4c>)
 8008cf0:	461f      	mov	r7, r3
 8008cf2:	e7e2      	b.n	8008cba <generate_type_name+0x12>
 8008cf4:	08012c7c 	.word	0x08012c7c
 8008cf8:	08012c90 	.word	0x08012c90
 8008cfc:	08012c94 	.word	0x08012c94
 8008d00:	08012c80 	.word	0x08012c80
 8008d04:	08012f7c 	.word	0x08012f7c

08008d08 <generate_topic_name>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <generate_topic_name+0x2c>)
 8008d0e:	9000      	str	r0, [sp, #0]
 8008d10:	4614      	mov	r4, r2
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	4a08      	ldr	r2, [pc, #32]	; (8008d38 <generate_topic_name+0x30>)
 8008d18:	f008 fde4 	bl	80118e4 <sniprintf>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	db05      	blt.n	8008d2c <generate_topic_name+0x24>
 8008d20:	4284      	cmp	r4, r0
 8008d22:	bfd4      	ite	le
 8008d24:	2000      	movle	r0, #0
 8008d26:	2001      	movgt	r0, #1
 8008d28:	b002      	add	sp, #8
 8008d2a:	bd10      	pop	{r4, pc}
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	b002      	add	sp, #8
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	bf00      	nop
 8008d34:	08012ca0 	.word	0x08012ca0
 8008d38:	08012c98 	.word	0x08012c98

08008d3c <is_uxrce_rmw_identifier_valid>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	b140      	cbz	r0, 8008d54 <is_uxrce_rmw_identifier_valid+0x18>
 8008d42:	f005 fed3 	bl	800eaec <rmw_get_implementation_identifier>
 8008d46:	4601      	mov	r1, r0
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f7f7 fa61 	bl	8000210 <strcmp>
 8008d4e:	fab0 f080 	clz	r0, r0
 8008d52:	0940      	lsrs	r0, r0, #5
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	bf00      	nop

08008d58 <get_message_typesupport_handle>:
 8008d58:	6883      	ldr	r3, [r0, #8]
 8008d5a:	4718      	bx	r3

08008d5c <get_message_typesupport_handle_function>:
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	4604      	mov	r4, r0
 8008d60:	6800      	ldr	r0, [r0, #0]
 8008d62:	f7f7 fa55 	bl	8000210 <strcmp>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	bf0c      	ite	eq
 8008d6a:	4620      	moveq	r0, r4
 8008d6c:	2000      	movne	r0, #0
 8008d6e:	bd10      	pop	{r4, pc}

08008d70 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8008d70:	f000 ba1e 	b.w	80091b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>

08008d74 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	460e      	mov	r6, r1
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	f000 fa2a 	bl	80091d4 <get_serialized_size_std_msgs__msg__Header>
 8008d80:	1835      	adds	r5, r6, r0
 8008d82:	4628      	mov	r0, r5
 8008d84:	2104      	movs	r1, #4
 8008d86:	f001 fd49 	bl	800a81c <ucdr_alignment>
 8008d8a:	1d04      	adds	r4, r0, #4
 8008d8c:	442c      	add	r4, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	2104      	movs	r1, #4
 8008d92:	f001 fd43 	bl	800a81c <ucdr_alignment>
 8008d96:	1d05      	adds	r5, r0, #4
 8008d98:	442c      	add	r4, r5
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	f001 fd3d 	bl	800a81c <ucdr_alignment>
 8008da2:	1d05      	adds	r5, r0, #4
 8008da4:	4425      	add	r5, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	2104      	movs	r1, #4
 8008daa:	f001 fd37 	bl	800a81c <ucdr_alignment>
 8008dae:	3004      	adds	r0, #4
 8008db0:	4405      	add	r5, r0
 8008db2:	4628      	mov	r0, r5
 8008db4:	2104      	movs	r1, #4
 8008db6:	f001 fd31 	bl	800a81c <ucdr_alignment>
 8008dba:	3004      	adds	r0, #4
 8008dbc:	1944      	adds	r4, r0, r5
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	f001 fd2b 	bl	800a81c <ucdr_alignment>
 8008dc6:	1d05      	adds	r5, r0, #4
 8008dc8:	4425      	add	r5, r4
 8008dca:	4628      	mov	r0, r5
 8008dcc:	2104      	movs	r1, #4
 8008dce:	f001 fd25 	bl	800a81c <ucdr_alignment>
 8008dd2:	3004      	adds	r0, #4
 8008dd4:	4405      	add	r5, r0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	2101      	movs	r1, #1
 8008dda:	f001 fd1f 	bl	800a81c <ucdr_alignment>
 8008dde:	3001      	adds	r0, #1
 8008de0:	1944      	adds	r4, r0, r5
 8008de2:	4620      	mov	r0, r4
 8008de4:	2101      	movs	r1, #1
 8008de6:	f001 fd19 	bl	800a81c <ucdr_alignment>
 8008dea:	1c45      	adds	r5, r0, #1
 8008dec:	4425      	add	r5, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	2101      	movs	r1, #1
 8008df2:	f001 fd13 	bl	800a81c <ucdr_alignment>
 8008df6:	3001      	adds	r0, #1
 8008df8:	4405      	add	r5, r0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f001 fd0d 	bl	800a81c <ucdr_alignment>
 8008e02:	3001      	adds	r0, #1
 8008e04:	1944      	adds	r4, r0, r5
 8008e06:	4620      	mov	r0, r4
 8008e08:	2104      	movs	r1, #4
 8008e0a:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 8008e0e:	f001 fd05 	bl	800a81c <ucdr_alignment>
 8008e12:	1d05      	adds	r5, r0, #4
 8008e14:	442c      	add	r4, r5
 8008e16:	f1b8 0f00 	cmp.w	r8, #0
 8008e1a:	d11e      	bne.n	8008e5a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	2104      	movs	r1, #4
 8008e20:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 8008e24:	f001 fcfa 	bl	800a81c <ucdr_alignment>
 8008e28:	4404      	add	r4, r0
 8008e2a:	3404      	adds	r4, #4
 8008e2c:	f1b8 0f00 	cmp.w	r8, #0
 8008e30:	d11b      	bne.n	8008e6a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 8008e32:	2104      	movs	r1, #4
 8008e34:	4620      	mov	r0, r4
 8008e36:	f001 fcf1 	bl	800a81c <ucdr_alignment>
 8008e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3c:	3305      	adds	r3, #5
 8008e3e:	441c      	add	r4, r3
 8008e40:	4404      	add	r4, r0
 8008e42:	4620      	mov	r0, r4
 8008e44:	2104      	movs	r1, #4
 8008e46:	f001 fce9 	bl	800a81c <ucdr_alignment>
 8008e4a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008e4c:	f1c6 0605 	rsb	r6, r6, #5
 8008e50:	440e      	add	r6, r1
 8008e52:	4430      	add	r0, r6
 8008e54:	4420      	add	r0, r4
 8008e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	f001 fcdd 	bl	800a81c <ucdr_alignment>
 8008e62:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 8008e66:	1944      	adds	r4, r0, r5
 8008e68:	e7d8      	b.n	8008e1c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	f001 fcd5 	bl	800a81c <ucdr_alignment>
 8008e72:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8008e76:	4404      	add	r4, r0
 8008e78:	e7db      	b.n	8008e32 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 8008e7a:	bf00      	nop

08008e7c <get_serialized_size_sensor_msgs__msg__BatteryState>:
 8008e7c:	b108      	cbz	r0, 8008e82 <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 8008e7e:	f7ff bf79 	b.w	8008d74 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8008e82:	4770      	bx	lr

08008e84 <_BatteryState__get_serialized_size>:
 8008e84:	b110      	cbz	r0, 8008e8c <_BatteryState__get_serialized_size+0x8>
 8008e86:	2100      	movs	r1, #0
 8008e88:	f7ff bf74 	b.w	8008d74 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop

08008e90 <_BatteryState__cdr_deserialize>:
 8008e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e92:	460c      	mov	r4, r1
 8008e94:	b083      	sub	sp, #12
 8008e96:	2900      	cmp	r1, #0
 8008e98:	f000 80a1 	beq.w	8008fde <_BatteryState__cdr_deserialize+0x14e>
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	f000 fa1b 	bl	80092d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008ea2:	6843      	ldr	r3, [r0, #4]
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	4798      	blx	r3
 8008eac:	f104 0114 	add.w	r1, r4, #20
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f001 fb37 	bl	800a524 <ucdr_deserialize_float>
 8008eb6:	f104 0118 	add.w	r1, r4, #24
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f001 fb32 	bl	800a524 <ucdr_deserialize_float>
 8008ec0:	f104 011c 	add.w	r1, r4, #28
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f001 fb2d 	bl	800a524 <ucdr_deserialize_float>
 8008eca:	f104 0120 	add.w	r1, r4, #32
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f001 fb28 	bl	800a524 <ucdr_deserialize_float>
 8008ed4:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f001 fb23 	bl	800a524 <ucdr_deserialize_float>
 8008ede:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f001 fb1e 	bl	800a524 <ucdr_deserialize_float>
 8008ee8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8008eec:	4628      	mov	r0, r5
 8008eee:	f001 fb19 	bl	800a524 <ucdr_deserialize_float>
 8008ef2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 faa0 	bl	800943c <ucdr_deserialize_uint8_t>
 8008efc:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 fa9b 	bl	800943c <ucdr_deserialize_uint8_t>
 8008f06:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 fa96 	bl	800943c <ucdr_deserialize_uint8_t>
 8008f10:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 fa61 	bl	80093dc <ucdr_deserialize_bool>
 8008f1a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8008f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f1e:	ab01      	add	r3, sp, #4
 8008f20:	4632      	mov	r2, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	f001 fd50 	bl	800a9c8 <ucdr_deserialize_sequence_float>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	bb40      	cbnz	r0, 8008f7e <_BatteryState__cdr_deserialize+0xee>
 8008f2c:	429e      	cmp	r6, r3
 8008f2e:	d35e      	bcc.n	8008fee <_BatteryState__cdr_deserialize+0x15e>
 8008f30:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8008f32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f34:	ab01      	add	r3, sp, #4
 8008f36:	4632      	mov	r2, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f001 fd45 	bl	800a9c8 <ucdr_deserialize_sequence_float>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d03c      	beq.n	8008fbe <_BatteryState__cdr_deserialize+0x12e>
 8008f44:	6463      	str	r3, [r4, #68]	; 0x44
 8008f46:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8008f48:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008f4a:	ab01      	add	r3, sp, #4
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f001 fce2 	bl	800a918 <ucdr_deserialize_sequence_char>
 8008f54:	9b01      	ldr	r3, [sp, #4]
 8008f56:	b320      	cbz	r0, 8008fa2 <_BatteryState__cdr_deserialize+0x112>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d146      	bne.n	8008fea <_BatteryState__cdr_deserialize+0x15a>
 8008f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f5e:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8008f60:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f62:	ab01      	add	r3, sp, #4
 8008f64:	463a      	mov	r2, r7
 8008f66:	4628      	mov	r0, r5
 8008f68:	f001 fcd6 	bl	800a918 <ucdr_deserialize_sequence_char>
 8008f6c:	9b01      	ldr	r3, [sp, #4]
 8008f6e:	4606      	mov	r6, r0
 8008f70:	b138      	cbz	r0, 8008f82 <_BatteryState__cdr_deserialize+0xf2>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d137      	bne.n	8008fe6 <_BatteryState__cdr_deserialize+0x156>
 8008f76:	65e3      	str	r3, [r4, #92]	; 0x5c
 8008f78:	4630      	mov	r0, r6
 8008f7a:	b003      	add	sp, #12
 8008f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f80:	e7d6      	b.n	8008f30 <_BatteryState__cdr_deserialize+0xa0>
 8008f82:	429f      	cmp	r7, r3
 8008f84:	d2f8      	bcs.n	8008f78 <_BatteryState__cdr_deserialize+0xe8>
 8008f86:	2101      	movs	r1, #1
 8008f88:	75a8      	strb	r0, [r5, #22]
 8008f8a:	7569      	strb	r1, [r5, #21]
 8008f8c:	65e0      	str	r0, [r4, #92]	; 0x5c
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f001 fc5a 	bl	800a848 <ucdr_align_to>
 8008f94:	4628      	mov	r0, r5
 8008f96:	9901      	ldr	r1, [sp, #4]
 8008f98:	f001 fc8c 	bl	800a8b4 <ucdr_advance_buffer>
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	b003      	add	sp, #12
 8008fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa2:	429e      	cmp	r6, r3
 8008fa4:	d2db      	bcs.n	8008f5e <_BatteryState__cdr_deserialize+0xce>
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	75a8      	strb	r0, [r5, #22]
 8008faa:	7569      	strb	r1, [r5, #21]
 8008fac:	6520      	str	r0, [r4, #80]	; 0x50
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f001 fc4a 	bl	800a848 <ucdr_align_to>
 8008fb4:	9901      	ldr	r1, [sp, #4]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f001 fc7c 	bl	800a8b4 <ucdr_advance_buffer>
 8008fbc:	e7cf      	b.n	8008f5e <_BatteryState__cdr_deserialize+0xce>
 8008fbe:	429e      	cmp	r6, r3
 8008fc0:	d2c1      	bcs.n	8008f46 <_BatteryState__cdr_deserialize+0xb6>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75a8      	strb	r0, [r5, #22]
 8008fc6:	756b      	strb	r3, [r5, #21]
 8008fc8:	2104      	movs	r1, #4
 8008fca:	6460      	str	r0, [r4, #68]	; 0x44
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f001 fc3b 	bl	800a848 <ucdr_align_to>
 8008fd2:	9901      	ldr	r1, [sp, #4]
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	0089      	lsls	r1, r1, #2
 8008fd8:	f001 fc6c 	bl	800a8b4 <ucdr_advance_buffer>
 8008fdc:	e7b3      	b.n	8008f46 <_BatteryState__cdr_deserialize+0xb6>
 8008fde:	460e      	mov	r6, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	b003      	add	sp, #12
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	e7c5      	b.n	8008f76 <_BatteryState__cdr_deserialize+0xe6>
 8008fea:	3b01      	subs	r3, #1
 8008fec:	e7b6      	b.n	8008f5c <_BatteryState__cdr_deserialize+0xcc>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	75a8      	strb	r0, [r5, #22]
 8008ff2:	756b      	strb	r3, [r5, #21]
 8008ff4:	2104      	movs	r1, #4
 8008ff6:	63a0      	str	r0, [r4, #56]	; 0x38
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f001 fc25 	bl	800a848 <ucdr_align_to>
 8008ffe:	9901      	ldr	r1, [sp, #4]
 8009000:	4628      	mov	r0, r5
 8009002:	0089      	lsls	r1, r1, #2
 8009004:	f001 fc56 	bl	800a8b4 <ucdr_advance_buffer>
 8009008:	e792      	b.n	8008f30 <_BatteryState__cdr_deserialize+0xa0>
 800900a:	bf00      	nop

0800900c <_BatteryState__cdr_serialize>:
 800900c:	2800      	cmp	r0, #0
 800900e:	d065      	beq.n	80090dc <_BatteryState__cdr_serialize+0xd0>
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	f000 f95f 	bl	80092d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800901a:	6843      	ldr	r3, [r0, #4]
 800901c:	4629      	mov	r1, r5
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	4620      	mov	r0, r4
 8009022:	4798      	blx	r3
 8009024:	ed94 0a05 	vldr	s0, [r4, #20]
 8009028:	4628      	mov	r0, r5
 800902a:	f001 f949 	bl	800a2c0 <ucdr_serialize_float>
 800902e:	ed94 0a06 	vldr	s0, [r4, #24]
 8009032:	4628      	mov	r0, r5
 8009034:	f001 f944 	bl	800a2c0 <ucdr_serialize_float>
 8009038:	ed94 0a07 	vldr	s0, [r4, #28]
 800903c:	4628      	mov	r0, r5
 800903e:	f001 f93f 	bl	800a2c0 <ucdr_serialize_float>
 8009042:	ed94 0a08 	vldr	s0, [r4, #32]
 8009046:	4628      	mov	r0, r5
 8009048:	f001 f93a 	bl	800a2c0 <ucdr_serialize_float>
 800904c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8009050:	4628      	mov	r0, r5
 8009052:	f001 f935 	bl	800a2c0 <ucdr_serialize_float>
 8009056:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 800905a:	4628      	mov	r0, r5
 800905c:	f001 f930 	bl	800a2c0 <ucdr_serialize_float>
 8009060:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8009064:	4628      	mov	r0, r5
 8009066:	f001 f92b 	bl	800a2c0 <ucdr_serialize_float>
 800906a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800906e:	4628      	mov	r0, r5
 8009070:	f000 f9ce 	bl	8009410 <ucdr_serialize_uint8_t>
 8009074:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8009078:	4628      	mov	r0, r5
 800907a:	f000 f9c9 	bl	8009410 <ucdr_serialize_uint8_t>
 800907e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8009082:	4628      	mov	r0, r5
 8009084:	f000 f9c4 	bl	8009410 <ucdr_serialize_uint8_t>
 8009088:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 800908c:	4628      	mov	r0, r5
 800908e:	f000 f98f 	bl	80093b0 <ucdr_serialize_bool>
 8009092:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 8009096:	4628      	mov	r0, r5
 8009098:	f001 fc84 	bl	800a9a4 <ucdr_serialize_sequence_float>
 800909c:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 80090a0:	4628      	mov	r0, r5
 80090a2:	f001 fc7f 	bl	800a9a4 <ucdr_serialize_sequence_float>
 80090a6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80090a8:	b1ae      	cbz	r6, 80090d6 <_BatteryState__cdr_serialize+0xca>
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7f7 f8ba 	bl	8000224 <strlen>
 80090b0:	1c42      	adds	r2, r0, #1
 80090b2:	6520      	str	r0, [r4, #80]	; 0x50
 80090b4:	4631      	mov	r1, r6
 80090b6:	4628      	mov	r0, r5
 80090b8:	f001 fc1c 	bl	800a8f4 <ucdr_serialize_sequence_char>
 80090bc:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80090be:	b176      	cbz	r6, 80090de <_BatteryState__cdr_serialize+0xd2>
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7f7 f8af 	bl	8000224 <strlen>
 80090c6:	4631      	mov	r1, r6
 80090c8:	65e0      	str	r0, [r4, #92]	; 0x5c
 80090ca:	1c42      	adds	r2, r0, #1
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090d2:	f001 bc0f 	b.w	800a8f4 <ucdr_serialize_sequence_char>
 80090d6:	4632      	mov	r2, r6
 80090d8:	4630      	mov	r0, r6
 80090da:	e7ea      	b.n	80090b2 <_BatteryState__cdr_serialize+0xa6>
 80090dc:	4770      	bx	lr
 80090de:	4630      	mov	r0, r6
 80090e0:	65e0      	str	r0, [r4, #92]	; 0x5c
 80090e2:	4632      	mov	r2, r6
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090ec:	f001 bc02 	b.w	800a8f4 <ucdr_serialize_sequence_char>

080090f0 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 80090f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f4:	f04f 0801 	mov.w	r8, #1
 80090f8:	f880 8000 	strb.w	r8, [r0]
 80090fc:	460c      	mov	r4, r1
 80090fe:	4607      	mov	r7, r0
 8009100:	f000 f8e0 	bl	80092c4 <max_serialized_size_std_msgs__msg__Header>
 8009104:	1825      	adds	r5, r4, r0
 8009106:	4628      	mov	r0, r5
 8009108:	2104      	movs	r1, #4
 800910a:	f001 fb87 	bl	800a81c <ucdr_alignment>
 800910e:	1d06      	adds	r6, r0, #4
 8009110:	4435      	add	r5, r6
 8009112:	4628      	mov	r0, r5
 8009114:	2104      	movs	r1, #4
 8009116:	f001 fb81 	bl	800a81c <ucdr_alignment>
 800911a:	1d06      	adds	r6, r0, #4
 800911c:	442e      	add	r6, r5
 800911e:	4630      	mov	r0, r6
 8009120:	2104      	movs	r1, #4
 8009122:	f001 fb7b 	bl	800a81c <ucdr_alignment>
 8009126:	3004      	adds	r0, #4
 8009128:	4406      	add	r6, r0
 800912a:	4630      	mov	r0, r6
 800912c:	2104      	movs	r1, #4
 800912e:	f001 fb75 	bl	800a81c <ucdr_alignment>
 8009132:	3004      	adds	r0, #4
 8009134:	1985      	adds	r5, r0, r6
 8009136:	4628      	mov	r0, r5
 8009138:	2104      	movs	r1, #4
 800913a:	f001 fb6f 	bl	800a81c <ucdr_alignment>
 800913e:	1d06      	adds	r6, r0, #4
 8009140:	442e      	add	r6, r5
 8009142:	4630      	mov	r0, r6
 8009144:	2104      	movs	r1, #4
 8009146:	f001 fb69 	bl	800a81c <ucdr_alignment>
 800914a:	3004      	adds	r0, #4
 800914c:	4406      	add	r6, r0
 800914e:	4630      	mov	r0, r6
 8009150:	2104      	movs	r1, #4
 8009152:	f001 fb63 	bl	800a81c <ucdr_alignment>
 8009156:	3004      	adds	r0, #4
 8009158:	1985      	adds	r5, r0, r6
 800915a:	4641      	mov	r1, r8
 800915c:	4628      	mov	r0, r5
 800915e:	f001 fb5d 	bl	800a81c <ucdr_alignment>
 8009162:	eb00 0608 	add.w	r6, r0, r8
 8009166:	442e      	add	r6, r5
 8009168:	4641      	mov	r1, r8
 800916a:	4630      	mov	r0, r6
 800916c:	f001 fb56 	bl	800a81c <ucdr_alignment>
 8009170:	eb00 0508 	add.w	r5, r0, r8
 8009174:	442e      	add	r6, r5
 8009176:	4641      	mov	r1, r8
 8009178:	4630      	mov	r0, r6
 800917a:	f001 fb4f 	bl	800a81c <ucdr_alignment>
 800917e:	eb00 0508 	add.w	r5, r0, r8
 8009182:	4435      	add	r5, r6
 8009184:	4641      	mov	r1, r8
 8009186:	4628      	mov	r0, r5
 8009188:	f001 fb48 	bl	800a81c <ucdr_alignment>
 800918c:	eba8 0404 	sub.w	r4, r8, r4
 8009190:	4420      	add	r0, r4
 8009192:	2300      	movs	r3, #0
 8009194:	4428      	add	r0, r5
 8009196:	703b      	strb	r3, [r7, #0]
 8009198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800919c <_BatteryState__max_serialized_size>:
 800919c:	b500      	push	{lr}
 800919e:	b083      	sub	sp, #12
 80091a0:	2100      	movs	r1, #0
 80091a2:	f10d 0007 	add.w	r0, sp, #7
 80091a6:	f7ff ffa3 	bl	80090f0 <max_serialized_size_sensor_msgs__msg__BatteryState>
 80091aa:	b003      	add	sp, #12
 80091ac:	f85d fb04 	ldr.w	pc, [sp], #4

080091b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 80091b0:	4800      	ldr	r0, [pc, #0]	; (80091b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 80091b2:	4770      	bx	lr
 80091b4:	20000028 	.word	0x20000028

080091b8 <_Header__max_serialized_size>:
 80091b8:	b500      	push	{lr}
 80091ba:	b083      	sub	sp, #12
 80091bc:	2301      	movs	r3, #1
 80091be:	2100      	movs	r1, #0
 80091c0:	f10d 0007 	add.w	r0, sp, #7
 80091c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80091c8:	f000 f8da 	bl	8009380 <max_serialized_size_builtin_interfaces__msg__Time>
 80091cc:	b003      	add	sp, #12
 80091ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80091d2:	bf00      	nop

080091d4 <get_serialized_size_std_msgs__msg__Header>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	4605      	mov	r5, r0
 80091d8:	b168      	cbz	r0, 80091f6 <get_serialized_size_std_msgs__msg__Header+0x22>
 80091da:	460c      	mov	r4, r1
 80091dc:	f000 f880 	bl	80092e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80091e0:	1826      	adds	r6, r4, r0
 80091e2:	2104      	movs	r1, #4
 80091e4:	4630      	mov	r0, r6
 80091e6:	f001 fb19 	bl	800a81c <ucdr_alignment>
 80091ea:	68e9      	ldr	r1, [r5, #12]
 80091ec:	f1c4 0405 	rsb	r4, r4, #5
 80091f0:	440c      	add	r4, r1
 80091f2:	4404      	add	r4, r0
 80091f4:	19a0      	adds	r0, r4, r6
 80091f6:	bd70      	pop	{r4, r5, r6, pc}

080091f8 <_Header__cdr_deserialize>:
 80091f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091fa:	460c      	mov	r4, r1
 80091fc:	b083      	sub	sp, #12
 80091fe:	b1e1      	cbz	r1, 800923a <_Header__cdr_deserialize+0x42>
 8009200:	4606      	mov	r6, r0
 8009202:	f000 f8d1 	bl	80093a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8009206:	6843      	ldr	r3, [r0, #4]
 8009208:	4621      	mov	r1, r4
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4630      	mov	r0, r6
 800920e:	4798      	blx	r3
 8009210:	6927      	ldr	r7, [r4, #16]
 8009212:	68a1      	ldr	r1, [r4, #8]
 8009214:	ab01      	add	r3, sp, #4
 8009216:	463a      	mov	r2, r7
 8009218:	4630      	mov	r0, r6
 800921a:	f001 fb7d 	bl	800a918 <ucdr_deserialize_sequence_char>
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	4605      	mov	r5, r0
 8009222:	b920      	cbnz	r0, 800922e <_Header__cdr_deserialize+0x36>
 8009224:	429f      	cmp	r7, r3
 8009226:	d30c      	bcc.n	8009242 <_Header__cdr_deserialize+0x4a>
 8009228:	4628      	mov	r0, r5
 800922a:	b003      	add	sp, #12
 800922c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922e:	b103      	cbz	r3, 8009232 <_Header__cdr_deserialize+0x3a>
 8009230:	3b01      	subs	r3, #1
 8009232:	4628      	mov	r0, r5
 8009234:	60e3      	str	r3, [r4, #12]
 8009236:	b003      	add	sp, #12
 8009238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923a:	460d      	mov	r5, r1
 800923c:	4628      	mov	r0, r5
 800923e:	b003      	add	sp, #12
 8009240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009242:	2101      	movs	r1, #1
 8009244:	75b0      	strb	r0, [r6, #22]
 8009246:	7571      	strb	r1, [r6, #21]
 8009248:	60e0      	str	r0, [r4, #12]
 800924a:	4630      	mov	r0, r6
 800924c:	f001 fafc 	bl	800a848 <ucdr_align_to>
 8009250:	4630      	mov	r0, r6
 8009252:	9901      	ldr	r1, [sp, #4]
 8009254:	f001 fb2e 	bl	800a8b4 <ucdr_advance_buffer>
 8009258:	4628      	mov	r0, r5
 800925a:	b003      	add	sp, #12
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925e:	bf00      	nop

08009260 <_Header__cdr_serialize>:
 8009260:	b1f8      	cbz	r0, 80092a2 <_Header__cdr_serialize+0x42>
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	f000 f89e 	bl	80093a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800926c:	6843      	ldr	r3, [r0, #4]
 800926e:	4629      	mov	r1, r5
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4620      	mov	r0, r4
 8009274:	4798      	blx	r3
 8009276:	68a6      	ldr	r6, [r4, #8]
 8009278:	b156      	cbz	r6, 8009290 <_Header__cdr_serialize+0x30>
 800927a:	4630      	mov	r0, r6
 800927c:	f7f6 ffd2 	bl	8000224 <strlen>
 8009280:	4631      	mov	r1, r6
 8009282:	60e0      	str	r0, [r4, #12]
 8009284:	1c42      	adds	r2, r0, #1
 8009286:	4628      	mov	r0, r5
 8009288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800928c:	f001 bb32 	b.w	800a8f4 <ucdr_serialize_sequence_char>
 8009290:	4630      	mov	r0, r6
 8009292:	60e0      	str	r0, [r4, #12]
 8009294:	4632      	mov	r2, r6
 8009296:	4631      	mov	r1, r6
 8009298:	4628      	mov	r0, r5
 800929a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800929e:	f001 bb29 	b.w	800a8f4 <ucdr_serialize_sequence_char>
 80092a2:	4770      	bx	lr

080092a4 <_Header__get_serialized_size>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	b150      	cbz	r0, 80092c0 <_Header__get_serialized_size+0x1c>
 80092aa:	2100      	movs	r1, #0
 80092ac:	f000 f818 	bl	80092e0 <get_serialized_size_builtin_interfaces__msg__Time>
 80092b0:	2104      	movs	r1, #4
 80092b2:	4605      	mov	r5, r0
 80092b4:	f001 fab2 	bl	800a81c <ucdr_alignment>
 80092b8:	68e2      	ldr	r2, [r4, #12]
 80092ba:	3205      	adds	r2, #5
 80092bc:	1953      	adds	r3, r2, r5
 80092be:	4418      	add	r0, r3
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	bf00      	nop

080092c4 <max_serialized_size_std_msgs__msg__Header>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	2301      	movs	r3, #1
 80092c8:	4604      	mov	r4, r0
 80092ca:	7003      	strb	r3, [r0, #0]
 80092cc:	f000 f858 	bl	8009380 <max_serialized_size_builtin_interfaces__msg__Time>
 80092d0:	2300      	movs	r3, #0
 80092d2:	7023      	strb	r3, [r4, #0]
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	bf00      	nop

080092d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80092d8:	4800      	ldr	r0, [pc, #0]	; (80092dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80092da:	4770      	bx	lr
 80092dc:	20000050 	.word	0x20000050

080092e0 <get_serialized_size_builtin_interfaces__msg__Time>:
 80092e0:	b180      	cbz	r0, 8009304 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80092e2:	b538      	push	{r3, r4, r5, lr}
 80092e4:	460d      	mov	r5, r1
 80092e6:	4628      	mov	r0, r5
 80092e8:	2104      	movs	r1, #4
 80092ea:	f001 fa97 	bl	800a81c <ucdr_alignment>
 80092ee:	1d2b      	adds	r3, r5, #4
 80092f0:	181c      	adds	r4, r3, r0
 80092f2:	4620      	mov	r0, r4
 80092f4:	2104      	movs	r1, #4
 80092f6:	f001 fa91 	bl	800a81c <ucdr_alignment>
 80092fa:	f1c5 0504 	rsb	r5, r5, #4
 80092fe:	4428      	add	r0, r5
 8009300:	4420      	add	r0, r4
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop

08009308 <_Time__cdr_deserialize>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	460c      	mov	r4, r1
 800930c:	b141      	cbz	r1, 8009320 <_Time__cdr_deserialize+0x18>
 800930e:	4605      	mov	r5, r0
 8009310:	f000 ff46 	bl	800a1a0 <ucdr_deserialize_int32_t>
 8009314:	1d21      	adds	r1, r4, #4
 8009316:	4628      	mov	r0, r5
 8009318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800931c:	f000 bbbe 	b.w	8009a9c <ucdr_deserialize_uint32_t>
 8009320:	4608      	mov	r0, r1
 8009322:	bd38      	pop	{r3, r4, r5, pc}

08009324 <_Time__cdr_serialize>:
 8009324:	b160      	cbz	r0, 8009340 <_Time__cdr_serialize+0x1c>
 8009326:	b538      	push	{r3, r4, r5, lr}
 8009328:	460d      	mov	r5, r1
 800932a:	4604      	mov	r4, r0
 800932c:	6801      	ldr	r1, [r0, #0]
 800932e:	4628      	mov	r0, r5
 8009330:	f000 fe9e 	bl	800a070 <ucdr_serialize_int32_t>
 8009334:	6861      	ldr	r1, [r4, #4]
 8009336:	4628      	mov	r0, r5
 8009338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800933c:	f000 ba7e 	b.w	800983c <ucdr_serialize_uint32_t>
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <_Time__get_serialized_size>:
 8009344:	b160      	cbz	r0, 8009360 <_Time__get_serialized_size+0x1c>
 8009346:	b510      	push	{r4, lr}
 8009348:	2104      	movs	r1, #4
 800934a:	2000      	movs	r0, #0
 800934c:	f001 fa66 	bl	800a81c <ucdr_alignment>
 8009350:	1d04      	adds	r4, r0, #4
 8009352:	4620      	mov	r0, r4
 8009354:	2104      	movs	r1, #4
 8009356:	f001 fa61 	bl	800a81c <ucdr_alignment>
 800935a:	3004      	adds	r0, #4
 800935c:	4420      	add	r0, r4
 800935e:	bd10      	pop	{r4, pc}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop

08009364 <_Time__max_serialized_size>:
 8009364:	b510      	push	{r4, lr}
 8009366:	2104      	movs	r1, #4
 8009368:	2000      	movs	r0, #0
 800936a:	f001 fa57 	bl	800a81c <ucdr_alignment>
 800936e:	1d04      	adds	r4, r0, #4
 8009370:	4620      	mov	r0, r4
 8009372:	2104      	movs	r1, #4
 8009374:	f001 fa52 	bl	800a81c <ucdr_alignment>
 8009378:	3004      	adds	r0, #4
 800937a:	4420      	add	r0, r4
 800937c:	bd10      	pop	{r4, pc}
 800937e:	bf00      	nop

08009380 <max_serialized_size_builtin_interfaces__msg__Time>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	2301      	movs	r3, #1
 8009384:	7003      	strb	r3, [r0, #0]
 8009386:	460c      	mov	r4, r1
 8009388:	4608      	mov	r0, r1
 800938a:	2104      	movs	r1, #4
 800938c:	f001 fa46 	bl	800a81c <ucdr_alignment>
 8009390:	1d25      	adds	r5, r4, #4
 8009392:	4405      	add	r5, r0
 8009394:	4628      	mov	r0, r5
 8009396:	2104      	movs	r1, #4
 8009398:	f001 fa40 	bl	800a81c <ucdr_alignment>
 800939c:	f1c4 0404 	rsb	r4, r4, #4
 80093a0:	4420      	add	r0, r4
 80093a2:	4428      	add	r0, r5
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
 80093a6:	bf00      	nop

080093a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80093a8:	4800      	ldr	r0, [pc, #0]	; (80093ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80093aa:	4770      	bx	lr
 80093ac:	20000078 	.word	0x20000078

080093b0 <ucdr_serialize_bool>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	460d      	mov	r5, r1
 80093b4:	2101      	movs	r1, #1
 80093b6:	4604      	mov	r4, r0
 80093b8:	f001 f9e6 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80093bc:	b148      	cbz	r0, 80093d2 <ucdr_serialize_bool+0x22>
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	701d      	strb	r5, [r3, #0]
 80093c2:	68a2      	ldr	r2, [r4, #8]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	3201      	adds	r2, #1
 80093c8:	3301      	adds	r3, #1
 80093ca:	2101      	movs	r1, #1
 80093cc:	60a2      	str	r2, [r4, #8]
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	7561      	strb	r1, [r4, #21]
 80093d2:	7da0      	ldrb	r0, [r4, #22]
 80093d4:	f080 0001 	eor.w	r0, r0, #1
 80093d8:	bd38      	pop	{r3, r4, r5, pc}
 80093da:	bf00      	nop

080093dc <ucdr_deserialize_bool>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	460d      	mov	r5, r1
 80093e0:	2101      	movs	r1, #1
 80093e2:	4604      	mov	r4, r0
 80093e4:	f001 f9d0 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80093e8:	b168      	cbz	r0, 8009406 <ucdr_deserialize_bool+0x2a>
 80093ea:	68a2      	ldr	r2, [r4, #8]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 80093f2:	3900      	subs	r1, #0
 80093f4:	f103 0301 	add.w	r3, r3, #1
 80093f8:	bf18      	it	ne
 80093fa:	2101      	movne	r1, #1
 80093fc:	2001      	movs	r0, #1
 80093fe:	7029      	strb	r1, [r5, #0]
 8009400:	60a2      	str	r2, [r4, #8]
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	7560      	strb	r0, [r4, #21]
 8009406:	7da0      	ldrb	r0, [r4, #22]
 8009408:	f080 0001 	eor.w	r0, r0, #1
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	bf00      	nop

08009410 <ucdr_serialize_uint8_t>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	460d      	mov	r5, r1
 8009414:	2101      	movs	r1, #1
 8009416:	4604      	mov	r4, r0
 8009418:	f001 f9b6 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800941c:	b148      	cbz	r0, 8009432 <ucdr_serialize_uint8_t+0x22>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	701d      	strb	r5, [r3, #0]
 8009422:	68a2      	ldr	r2, [r4, #8]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	3201      	adds	r2, #1
 8009428:	3301      	adds	r3, #1
 800942a:	2101      	movs	r1, #1
 800942c:	60a2      	str	r2, [r4, #8]
 800942e:	6123      	str	r3, [r4, #16]
 8009430:	7561      	strb	r1, [r4, #21]
 8009432:	7da0      	ldrb	r0, [r4, #22]
 8009434:	f080 0001 	eor.w	r0, r0, #1
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	bf00      	nop

0800943c <ucdr_deserialize_uint8_t>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	460d      	mov	r5, r1
 8009440:	2101      	movs	r1, #1
 8009442:	4604      	mov	r4, r0
 8009444:	f001 f9a0 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009448:	b150      	cbz	r0, 8009460 <ucdr_deserialize_uint8_t+0x24>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	702b      	strb	r3, [r5, #0]
 8009450:	68a2      	ldr	r2, [r4, #8]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	3201      	adds	r2, #1
 8009456:	3301      	adds	r3, #1
 8009458:	2101      	movs	r1, #1
 800945a:	60a2      	str	r2, [r4, #8]
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	7561      	strb	r1, [r4, #21]
 8009460:	7da0      	ldrb	r0, [r4, #22]
 8009462:	f080 0001 	eor.w	r0, r0, #1
 8009466:	bd38      	pop	{r3, r4, r5, pc}

08009468 <ucdr_serialize_uint16_t>:
 8009468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	460b      	mov	r3, r1
 8009470:	2102      	movs	r1, #2
 8009472:	4604      	mov	r4, r0
 8009474:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009478:	f001 f9d8 	bl	800a82c <ucdr_buffer_alignment>
 800947c:	4601      	mov	r1, r0
 800947e:	4620      	mov	r0, r4
 8009480:	7d67      	ldrb	r7, [r4, #21]
 8009482:	f001 fa17 	bl	800a8b4 <ucdr_advance_buffer>
 8009486:	4620      	mov	r0, r4
 8009488:	2102      	movs	r1, #2
 800948a:	f001 f971 	bl	800a770 <ucdr_check_buffer_available_for>
 800948e:	bb78      	cbnz	r0, 80094f0 <ucdr_serialize_uint16_t+0x88>
 8009490:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009494:	42b5      	cmp	r5, r6
 8009496:	d926      	bls.n	80094e6 <ucdr_serialize_uint16_t+0x7e>
 8009498:	6922      	ldr	r2, [r4, #16]
 800949a:	60a5      	str	r5, [r4, #8]
 800949c:	1bad      	subs	r5, r5, r6
 800949e:	442a      	add	r2, r5
 80094a0:	f1c5 0802 	rsb	r8, r5, #2
 80094a4:	6122      	str	r2, [r4, #16]
 80094a6:	4641      	mov	r1, r8
 80094a8:	4620      	mov	r0, r4
 80094aa:	f001 f96d 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d03b      	beq.n	800952a <ucdr_serialize_uint16_t+0xc2>
 80094b2:	7d23      	ldrb	r3, [r4, #20]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d04a      	beq.n	800954e <ucdr_serialize_uint16_t+0xe6>
 80094b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094bc:	7033      	strb	r3, [r6, #0]
 80094be:	2d00      	cmp	r5, #0
 80094c0:	d040      	beq.n	8009544 <ucdr_serialize_uint16_t+0xdc>
 80094c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80094c6:	7073      	strb	r3, [r6, #1]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	68a2      	ldr	r2, [r4, #8]
 80094cc:	7da0      	ldrb	r0, [r4, #22]
 80094ce:	3302      	adds	r3, #2
 80094d0:	1b5b      	subs	r3, r3, r5
 80094d2:	4442      	add	r2, r8
 80094d4:	2102      	movs	r1, #2
 80094d6:	f080 0001 	eor.w	r0, r0, #1
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	60a2      	str	r2, [r4, #8]
 80094de:	7561      	strb	r1, [r4, #21]
 80094e0:	b002      	add	sp, #8
 80094e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e6:	2102      	movs	r1, #2
 80094e8:	4620      	mov	r0, r4
 80094ea:	f001 f94d 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80094ee:	b190      	cbz	r0, 8009516 <ucdr_serialize_uint16_t+0xae>
 80094f0:	7d23      	ldrb	r3, [r4, #20]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	68a3      	ldr	r3, [r4, #8]
 80094f6:	d014      	beq.n	8009522 <ucdr_serialize_uint16_t+0xba>
 80094f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009504:	705a      	strb	r2, [r3, #1]
 8009506:	68a2      	ldr	r2, [r4, #8]
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	3202      	adds	r2, #2
 800950c:	3302      	adds	r3, #2
 800950e:	2102      	movs	r1, #2
 8009510:	60a2      	str	r2, [r4, #8]
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	7561      	strb	r1, [r4, #21]
 8009516:	7da0      	ldrb	r0, [r4, #22]
 8009518:	f080 0001 	eor.w	r0, r0, #1
 800951c:	b002      	add	sp, #8
 800951e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009522:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	e7ed      	b.n	8009506 <ucdr_serialize_uint16_t+0x9e>
 800952a:	68a2      	ldr	r2, [r4, #8]
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	7da0      	ldrb	r0, [r4, #22]
 8009530:	7567      	strb	r7, [r4, #21]
 8009532:	1b52      	subs	r2, r2, r5
 8009534:	1b5b      	subs	r3, r3, r5
 8009536:	f080 0001 	eor.w	r0, r0, #1
 800953a:	60a2      	str	r2, [r4, #8]
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	b002      	add	sp, #8
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800954a:	701a      	strb	r2, [r3, #0]
 800954c:	e7bc      	b.n	80094c8 <ucdr_serialize_uint16_t+0x60>
 800954e:	4630      	mov	r0, r6
 8009550:	f10d 0606 	add.w	r6, sp, #6
 8009554:	4631      	mov	r1, r6
 8009556:	462a      	mov	r2, r5
 8009558:	f008 fb57 	bl	8011c0a <memcpy>
 800955c:	68a0      	ldr	r0, [r4, #8]
 800955e:	4642      	mov	r2, r8
 8009560:	1971      	adds	r1, r6, r5
 8009562:	f008 fb52 	bl	8011c0a <memcpy>
 8009566:	e7af      	b.n	80094c8 <ucdr_serialize_uint16_t+0x60>

08009568 <ucdr_serialize_endian_uint16_t>:
 8009568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800956c:	b083      	sub	sp, #12
 800956e:	460d      	mov	r5, r1
 8009570:	2102      	movs	r1, #2
 8009572:	4604      	mov	r4, r0
 8009574:	f8ad 2006 	strh.w	r2, [sp, #6]
 8009578:	f001 f958 	bl	800a82c <ucdr_buffer_alignment>
 800957c:	4601      	mov	r1, r0
 800957e:	4620      	mov	r0, r4
 8009580:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009584:	f001 f996 	bl	800a8b4 <ucdr_advance_buffer>
 8009588:	4620      	mov	r0, r4
 800958a:	2102      	movs	r1, #2
 800958c:	f001 f8f0 	bl	800a770 <ucdr_check_buffer_available_for>
 8009590:	bb70      	cbnz	r0, 80095f0 <ucdr_serialize_endian_uint16_t+0x88>
 8009592:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009596:	42be      	cmp	r6, r7
 8009598:	d925      	bls.n	80095e6 <ucdr_serialize_endian_uint16_t+0x7e>
 800959a:	6922      	ldr	r2, [r4, #16]
 800959c:	60a6      	str	r6, [r4, #8]
 800959e:	1bf6      	subs	r6, r6, r7
 80095a0:	4432      	add	r2, r6
 80095a2:	f1c6 0902 	rsb	r9, r6, #2
 80095a6:	6122      	str	r2, [r4, #16]
 80095a8:	4649      	mov	r1, r9
 80095aa:	4620      	mov	r0, r4
 80095ac:	f001 f8ec 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d039      	beq.n	8009628 <ucdr_serialize_endian_uint16_t+0xc0>
 80095b4:	2d01      	cmp	r5, #1
 80095b6:	d04a      	beq.n	800964e <ucdr_serialize_endian_uint16_t+0xe6>
 80095b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095bc:	703b      	strb	r3, [r7, #0]
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d040      	beq.n	8009644 <ucdr_serialize_endian_uint16_t+0xdc>
 80095c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80095c6:	707b      	strb	r3, [r7, #1]
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	68a2      	ldr	r2, [r4, #8]
 80095cc:	7da0      	ldrb	r0, [r4, #22]
 80095ce:	3302      	adds	r3, #2
 80095d0:	1b9b      	subs	r3, r3, r6
 80095d2:	444a      	add	r2, r9
 80095d4:	2102      	movs	r1, #2
 80095d6:	f080 0001 	eor.w	r0, r0, #1
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	60a2      	str	r2, [r4, #8]
 80095de:	7561      	strb	r1, [r4, #21]
 80095e0:	b003      	add	sp, #12
 80095e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e6:	2102      	movs	r1, #2
 80095e8:	4620      	mov	r0, r4
 80095ea:	f001 f8cd 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80095ee:	b188      	cbz	r0, 8009614 <ucdr_serialize_endian_uint16_t+0xac>
 80095f0:	2d01      	cmp	r5, #1
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	d014      	beq.n	8009620 <ucdr_serialize_endian_uint16_t+0xb8>
 80095f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095fa:	701a      	strb	r2, [r3, #0]
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009602:	705a      	strb	r2, [r3, #1]
 8009604:	68a2      	ldr	r2, [r4, #8]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	3202      	adds	r2, #2
 800960a:	3302      	adds	r3, #2
 800960c:	2102      	movs	r1, #2
 800960e:	60a2      	str	r2, [r4, #8]
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	7561      	strb	r1, [r4, #21]
 8009614:	7da0      	ldrb	r0, [r4, #22]
 8009616:	f080 0001 	eor.w	r0, r0, #1
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009620:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009624:	801a      	strh	r2, [r3, #0]
 8009626:	e7ed      	b.n	8009604 <ucdr_serialize_endian_uint16_t+0x9c>
 8009628:	68a2      	ldr	r2, [r4, #8]
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	7da0      	ldrb	r0, [r4, #22]
 800962e:	f884 8015 	strb.w	r8, [r4, #21]
 8009632:	1b92      	subs	r2, r2, r6
 8009634:	1b9b      	subs	r3, r3, r6
 8009636:	f080 0001 	eor.w	r0, r0, #1
 800963a:	60a2      	str	r2, [r4, #8]
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009644:	68a3      	ldr	r3, [r4, #8]
 8009646:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e7bc      	b.n	80095c8 <ucdr_serialize_endian_uint16_t+0x60>
 800964e:	f10d 0506 	add.w	r5, sp, #6
 8009652:	4629      	mov	r1, r5
 8009654:	4632      	mov	r2, r6
 8009656:	4638      	mov	r0, r7
 8009658:	f008 fad7 	bl	8011c0a <memcpy>
 800965c:	68a0      	ldr	r0, [r4, #8]
 800965e:	464a      	mov	r2, r9
 8009660:	19a9      	adds	r1, r5, r6
 8009662:	f008 fad2 	bl	8011c0a <memcpy>
 8009666:	e7af      	b.n	80095c8 <ucdr_serialize_endian_uint16_t+0x60>

08009668 <ucdr_deserialize_uint16_t>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	460d      	mov	r5, r1
 800966e:	2102      	movs	r1, #2
 8009670:	4604      	mov	r4, r0
 8009672:	f001 f8db 	bl	800a82c <ucdr_buffer_alignment>
 8009676:	4601      	mov	r1, r0
 8009678:	4620      	mov	r0, r4
 800967a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800967e:	f001 f919 	bl	800a8b4 <ucdr_advance_buffer>
 8009682:	4620      	mov	r0, r4
 8009684:	2102      	movs	r1, #2
 8009686:	f001 f873 	bl	800a770 <ucdr_check_buffer_available_for>
 800968a:	bb60      	cbnz	r0, 80096e6 <ucdr_deserialize_uint16_t+0x7e>
 800968c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009690:	42be      	cmp	r6, r7
 8009692:	d923      	bls.n	80096dc <ucdr_deserialize_uint16_t+0x74>
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	60a6      	str	r6, [r4, #8]
 8009698:	1bf6      	subs	r6, r6, r7
 800969a:	4432      	add	r2, r6
 800969c:	f1c6 0902 	rsb	r9, r6, #2
 80096a0:	6122      	str	r2, [r4, #16]
 80096a2:	4649      	mov	r1, r9
 80096a4:	4620      	mov	r0, r4
 80096a6:	f001 f86f 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d034      	beq.n	8009718 <ucdr_deserialize_uint16_t+0xb0>
 80096ae:	7d23      	ldrb	r3, [r4, #20]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d042      	beq.n	800973a <ucdr_deserialize_uint16_t+0xd2>
 80096b4:	787b      	ldrb	r3, [r7, #1]
 80096b6:	702b      	strb	r3, [r5, #0]
 80096b8:	2e00      	cmp	r6, #0
 80096ba:	d03a      	beq.n	8009732 <ucdr_deserialize_uint16_t+0xca>
 80096bc:	783b      	ldrb	r3, [r7, #0]
 80096be:	706b      	strb	r3, [r5, #1]
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	68a2      	ldr	r2, [r4, #8]
 80096c4:	7da0      	ldrb	r0, [r4, #22]
 80096c6:	2102      	movs	r1, #2
 80096c8:	3302      	adds	r3, #2
 80096ca:	1b9b      	subs	r3, r3, r6
 80096cc:	444a      	add	r2, r9
 80096ce:	7561      	strb	r1, [r4, #21]
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	60a2      	str	r2, [r4, #8]
 80096d4:	f080 0001 	eor.w	r0, r0, #1
 80096d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096dc:	2102      	movs	r1, #2
 80096de:	4620      	mov	r0, r4
 80096e0:	f001 f852 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80096e4:	b180      	cbz	r0, 8009708 <ucdr_deserialize_uint16_t+0xa0>
 80096e6:	7d23      	ldrb	r3, [r4, #20]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	d011      	beq.n	8009712 <ucdr_deserialize_uint16_t+0xaa>
 80096ee:	785b      	ldrb	r3, [r3, #1]
 80096f0:	702b      	strb	r3, [r5, #0]
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	706b      	strb	r3, [r5, #1]
 80096f8:	68a2      	ldr	r2, [r4, #8]
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	3202      	adds	r2, #2
 80096fe:	3302      	adds	r3, #2
 8009700:	2102      	movs	r1, #2
 8009702:	60a2      	str	r2, [r4, #8]
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	7561      	strb	r1, [r4, #21]
 8009708:	7da0      	ldrb	r0, [r4, #22]
 800970a:	f080 0001 	eor.w	r0, r0, #1
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	802b      	strh	r3, [r5, #0]
 8009716:	e7ef      	b.n	80096f8 <ucdr_deserialize_uint16_t+0x90>
 8009718:	68a2      	ldr	r2, [r4, #8]
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	7da0      	ldrb	r0, [r4, #22]
 800971e:	f884 8015 	strb.w	r8, [r4, #21]
 8009722:	1b92      	subs	r2, r2, r6
 8009724:	1b9b      	subs	r3, r3, r6
 8009726:	60a2      	str	r2, [r4, #8]
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	f080 0001 	eor.w	r0, r0, #1
 800972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	706b      	strb	r3, [r5, #1]
 8009738:	e7c2      	b.n	80096c0 <ucdr_deserialize_uint16_t+0x58>
 800973a:	4639      	mov	r1, r7
 800973c:	4632      	mov	r2, r6
 800973e:	4628      	mov	r0, r5
 8009740:	f008 fa63 	bl	8011c0a <memcpy>
 8009744:	68a1      	ldr	r1, [r4, #8]
 8009746:	464a      	mov	r2, r9
 8009748:	19a8      	adds	r0, r5, r6
 800974a:	f008 fa5e 	bl	8011c0a <memcpy>
 800974e:	e7b7      	b.n	80096c0 <ucdr_deserialize_uint16_t+0x58>

08009750 <ucdr_deserialize_endian_uint16_t>:
 8009750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	460e      	mov	r6, r1
 8009756:	2102      	movs	r1, #2
 8009758:	4604      	mov	r4, r0
 800975a:	4615      	mov	r5, r2
 800975c:	f001 f866 	bl	800a82c <ucdr_buffer_alignment>
 8009760:	4601      	mov	r1, r0
 8009762:	4620      	mov	r0, r4
 8009764:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009768:	f001 f8a4 	bl	800a8b4 <ucdr_advance_buffer>
 800976c:	4620      	mov	r0, r4
 800976e:	2102      	movs	r1, #2
 8009770:	f000 fffe 	bl	800a770 <ucdr_check_buffer_available_for>
 8009774:	bb70      	cbnz	r0, 80097d4 <ucdr_deserialize_endian_uint16_t+0x84>
 8009776:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800977a:	4547      	cmp	r7, r8
 800977c:	d925      	bls.n	80097ca <ucdr_deserialize_endian_uint16_t+0x7a>
 800977e:	6922      	ldr	r2, [r4, #16]
 8009780:	60a7      	str	r7, [r4, #8]
 8009782:	eba7 0708 	sub.w	r7, r7, r8
 8009786:	443a      	add	r2, r7
 8009788:	f1c7 0a02 	rsb	sl, r7, #2
 800978c:	6122      	str	r2, [r4, #16]
 800978e:	4651      	mov	r1, sl
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fff9 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009796:	2800      	cmp	r0, #0
 8009798:	d034      	beq.n	8009804 <ucdr_deserialize_endian_uint16_t+0xb4>
 800979a:	2e01      	cmp	r6, #1
 800979c:	d043      	beq.n	8009826 <ucdr_deserialize_endian_uint16_t+0xd6>
 800979e:	f898 3001 	ldrb.w	r3, [r8, #1]
 80097a2:	702b      	strb	r3, [r5, #0]
 80097a4:	2f00      	cmp	r7, #0
 80097a6:	d03a      	beq.n	800981e <ucdr_deserialize_endian_uint16_t+0xce>
 80097a8:	f898 3000 	ldrb.w	r3, [r8]
 80097ac:	706b      	strb	r3, [r5, #1]
 80097ae:	6923      	ldr	r3, [r4, #16]
 80097b0:	68a2      	ldr	r2, [r4, #8]
 80097b2:	7da0      	ldrb	r0, [r4, #22]
 80097b4:	2102      	movs	r1, #2
 80097b6:	3302      	adds	r3, #2
 80097b8:	1bdb      	subs	r3, r3, r7
 80097ba:	4452      	add	r2, sl
 80097bc:	7561      	strb	r1, [r4, #21]
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	60a2      	str	r2, [r4, #8]
 80097c2:	f080 0001 	eor.w	r0, r0, #1
 80097c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ca:	2102      	movs	r1, #2
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 ffdb 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80097d2:	b178      	cbz	r0, 80097f4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80097d4:	2e01      	cmp	r6, #1
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	d011      	beq.n	80097fe <ucdr_deserialize_endian_uint16_t+0xae>
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	702b      	strb	r3, [r5, #0]
 80097de:	68a3      	ldr	r3, [r4, #8]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	706b      	strb	r3, [r5, #1]
 80097e4:	68a2      	ldr	r2, [r4, #8]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	3202      	adds	r2, #2
 80097ea:	3302      	adds	r3, #2
 80097ec:	2102      	movs	r1, #2
 80097ee:	60a2      	str	r2, [r4, #8]
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	7561      	strb	r1, [r4, #21]
 80097f4:	7da0      	ldrb	r0, [r4, #22]
 80097f6:	f080 0001 	eor.w	r0, r0, #1
 80097fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	802b      	strh	r3, [r5, #0]
 8009802:	e7ef      	b.n	80097e4 <ucdr_deserialize_endian_uint16_t+0x94>
 8009804:	68a2      	ldr	r2, [r4, #8]
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	7da0      	ldrb	r0, [r4, #22]
 800980a:	f884 9015 	strb.w	r9, [r4, #21]
 800980e:	1bd2      	subs	r2, r2, r7
 8009810:	1bdb      	subs	r3, r3, r7
 8009812:	60a2      	str	r2, [r4, #8]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	f080 0001 	eor.w	r0, r0, #1
 800981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	706b      	strb	r3, [r5, #1]
 8009824:	e7c3      	b.n	80097ae <ucdr_deserialize_endian_uint16_t+0x5e>
 8009826:	4641      	mov	r1, r8
 8009828:	463a      	mov	r2, r7
 800982a:	4628      	mov	r0, r5
 800982c:	f008 f9ed 	bl	8011c0a <memcpy>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4652      	mov	r2, sl
 8009834:	19e8      	adds	r0, r5, r7
 8009836:	f008 f9e8 	bl	8011c0a <memcpy>
 800983a:	e7b8      	b.n	80097ae <ucdr_deserialize_endian_uint16_t+0x5e>

0800983c <ucdr_serialize_uint32_t>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	4604      	mov	r4, r0
 8009844:	9101      	str	r1, [sp, #4]
 8009846:	2104      	movs	r1, #4
 8009848:	f000 fff0 	bl	800a82c <ucdr_buffer_alignment>
 800984c:	4601      	mov	r1, r0
 800984e:	4620      	mov	r0, r4
 8009850:	7d67      	ldrb	r7, [r4, #21]
 8009852:	f001 f82f 	bl	800a8b4 <ucdr_advance_buffer>
 8009856:	4620      	mov	r0, r4
 8009858:	2104      	movs	r1, #4
 800985a:	f000 ff89 	bl	800a770 <ucdr_check_buffer_available_for>
 800985e:	2800      	cmp	r0, #0
 8009860:	d139      	bne.n	80098d6 <ucdr_serialize_uint32_t+0x9a>
 8009862:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8009866:	42ae      	cmp	r6, r5
 8009868:	d930      	bls.n	80098cc <ucdr_serialize_uint32_t+0x90>
 800986a:	6922      	ldr	r2, [r4, #16]
 800986c:	60a6      	str	r6, [r4, #8]
 800986e:	1b76      	subs	r6, r6, r5
 8009870:	4432      	add	r2, r6
 8009872:	f1c6 0804 	rsb	r8, r6, #4
 8009876:	6122      	str	r2, [r4, #16]
 8009878:	4641      	mov	r1, r8
 800987a:	4620      	mov	r0, r4
 800987c:	f000 ff84 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009880:	2800      	cmp	r0, #0
 8009882:	d04c      	beq.n	800991e <ucdr_serialize_uint32_t+0xe2>
 8009884:	7d23      	ldrb	r3, [r4, #20]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d063      	beq.n	8009952 <ucdr_serialize_uint32_t+0x116>
 800988a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800988e:	702b      	strb	r3, [r5, #0]
 8009890:	2e00      	cmp	r6, #0
 8009892:	d051      	beq.n	8009938 <ucdr_serialize_uint32_t+0xfc>
 8009894:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009898:	706b      	strb	r3, [r5, #1]
 800989a:	2e01      	cmp	r6, #1
 800989c:	d050      	beq.n	8009940 <ucdr_serialize_uint32_t+0x104>
 800989e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80098a2:	70ab      	strb	r3, [r5, #2]
 80098a4:	2e02      	cmp	r6, #2
 80098a6:	d04f      	beq.n	8009948 <ucdr_serialize_uint32_t+0x10c>
 80098a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80098ac:	70eb      	strb	r3, [r5, #3]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	68a2      	ldr	r2, [r4, #8]
 80098b2:	7da0      	ldrb	r0, [r4, #22]
 80098b4:	3304      	adds	r3, #4
 80098b6:	1b9b      	subs	r3, r3, r6
 80098b8:	4442      	add	r2, r8
 80098ba:	2104      	movs	r1, #4
 80098bc:	f080 0001 	eor.w	r0, r0, #1
 80098c0:	6123      	str	r3, [r4, #16]
 80098c2:	60a2      	str	r2, [r4, #8]
 80098c4:	7561      	strb	r1, [r4, #21]
 80098c6:	b002      	add	sp, #8
 80098c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098cc:	2104      	movs	r1, #4
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 ff5a 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80098d4:	b1d0      	cbz	r0, 800990c <ucdr_serialize_uint32_t+0xd0>
 80098d6:	7d23      	ldrb	r3, [r4, #20]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	d01c      	beq.n	8009918 <ucdr_serialize_uint32_t+0xdc>
 80098de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80098ea:	705a      	strb	r2, [r3, #1]
 80098ec:	68a3      	ldr	r3, [r4, #8]
 80098ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80098f2:	709a      	strb	r2, [r3, #2]
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80098fa:	70da      	strb	r2, [r3, #3]
 80098fc:	68a2      	ldr	r2, [r4, #8]
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	3204      	adds	r2, #4
 8009902:	3304      	adds	r3, #4
 8009904:	2104      	movs	r1, #4
 8009906:	60a2      	str	r2, [r4, #8]
 8009908:	6123      	str	r3, [r4, #16]
 800990a:	7561      	strb	r1, [r4, #21]
 800990c:	7da0      	ldrb	r0, [r4, #22]
 800990e:	f080 0001 	eor.w	r0, r0, #1
 8009912:	b002      	add	sp, #8
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	9a01      	ldr	r2, [sp, #4]
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e7ee      	b.n	80098fc <ucdr_serialize_uint32_t+0xc0>
 800991e:	68a2      	ldr	r2, [r4, #8]
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	7da0      	ldrb	r0, [r4, #22]
 8009924:	7567      	strb	r7, [r4, #21]
 8009926:	1b92      	subs	r2, r2, r6
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	f080 0001 	eor.w	r0, r0, #1
 800992e:	60a2      	str	r2, [r4, #8]
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	b002      	add	sp, #8
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	68a3      	ldr	r3, [r4, #8]
 8009942:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009946:	701a      	strb	r2, [r3, #0]
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	e7ad      	b.n	80098ae <ucdr_serialize_uint32_t+0x72>
 8009952:	4628      	mov	r0, r5
 8009954:	ad01      	add	r5, sp, #4
 8009956:	4629      	mov	r1, r5
 8009958:	4632      	mov	r2, r6
 800995a:	f008 f956 	bl	8011c0a <memcpy>
 800995e:	68a0      	ldr	r0, [r4, #8]
 8009960:	4642      	mov	r2, r8
 8009962:	19a9      	adds	r1, r5, r6
 8009964:	f008 f951 	bl	8011c0a <memcpy>
 8009968:	e7a1      	b.n	80098ae <ucdr_serialize_uint32_t+0x72>
 800996a:	bf00      	nop

0800996c <ucdr_serialize_endian_uint32_t>:
 800996c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009970:	b083      	sub	sp, #12
 8009972:	460d      	mov	r5, r1
 8009974:	2104      	movs	r1, #4
 8009976:	4604      	mov	r4, r0
 8009978:	9201      	str	r2, [sp, #4]
 800997a:	f000 ff57 	bl	800a82c <ucdr_buffer_alignment>
 800997e:	4601      	mov	r1, r0
 8009980:	4620      	mov	r0, r4
 8009982:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009986:	f000 ff95 	bl	800a8b4 <ucdr_advance_buffer>
 800998a:	4620      	mov	r0, r4
 800998c:	2104      	movs	r1, #4
 800998e:	f000 feef 	bl	800a770 <ucdr_check_buffer_available_for>
 8009992:	2800      	cmp	r0, #0
 8009994:	d138      	bne.n	8009a08 <ucdr_serialize_endian_uint32_t+0x9c>
 8009996:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800999a:	42b7      	cmp	r7, r6
 800999c:	d92f      	bls.n	80099fe <ucdr_serialize_endian_uint32_t+0x92>
 800999e:	6922      	ldr	r2, [r4, #16]
 80099a0:	60a7      	str	r7, [r4, #8]
 80099a2:	1bbf      	subs	r7, r7, r6
 80099a4:	443a      	add	r2, r7
 80099a6:	f1c7 0904 	rsb	r9, r7, #4
 80099aa:	6122      	str	r2, [r4, #16]
 80099ac:	4649      	mov	r1, r9
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 feea 	bl	800a788 <ucdr_check_final_buffer_behavior>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d04a      	beq.n	8009a4e <ucdr_serialize_endian_uint32_t+0xe2>
 80099b8:	2d01      	cmp	r5, #1
 80099ba:	d063      	beq.n	8009a84 <ucdr_serialize_endian_uint32_t+0x118>
 80099bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80099c0:	7033      	strb	r3, [r6, #0]
 80099c2:	2f00      	cmp	r7, #0
 80099c4:	d051      	beq.n	8009a6a <ucdr_serialize_endian_uint32_t+0xfe>
 80099c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80099ca:	7073      	strb	r3, [r6, #1]
 80099cc:	2f01      	cmp	r7, #1
 80099ce:	d050      	beq.n	8009a72 <ucdr_serialize_endian_uint32_t+0x106>
 80099d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80099d4:	70b3      	strb	r3, [r6, #2]
 80099d6:	2f02      	cmp	r7, #2
 80099d8:	d04f      	beq.n	8009a7a <ucdr_serialize_endian_uint32_t+0x10e>
 80099da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80099de:	70f3      	strb	r3, [r6, #3]
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	68a2      	ldr	r2, [r4, #8]
 80099e4:	7da0      	ldrb	r0, [r4, #22]
 80099e6:	3304      	adds	r3, #4
 80099e8:	1bdb      	subs	r3, r3, r7
 80099ea:	444a      	add	r2, r9
 80099ec:	2104      	movs	r1, #4
 80099ee:	f080 0001 	eor.w	r0, r0, #1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	60a2      	str	r2, [r4, #8]
 80099f6:	7561      	strb	r1, [r4, #21]
 80099f8:	b003      	add	sp, #12
 80099fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099fe:	2104      	movs	r1, #4
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fec1 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009a06:	b1c8      	cbz	r0, 8009a3c <ucdr_serialize_endian_uint32_t+0xd0>
 8009a08:	2d01      	cmp	r5, #1
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	d01c      	beq.n	8009a48 <ucdr_serialize_endian_uint32_t+0xdc>
 8009a0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a1a:	705a      	strb	r2, [r3, #1]
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a22:	709a      	strb	r2, [r3, #2]
 8009a24:	68a3      	ldr	r3, [r4, #8]
 8009a26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a2a:	70da      	strb	r2, [r3, #3]
 8009a2c:	68a2      	ldr	r2, [r4, #8]
 8009a2e:	6923      	ldr	r3, [r4, #16]
 8009a30:	3204      	adds	r2, #4
 8009a32:	3304      	adds	r3, #4
 8009a34:	2104      	movs	r1, #4
 8009a36:	60a2      	str	r2, [r4, #8]
 8009a38:	6123      	str	r3, [r4, #16]
 8009a3a:	7561      	strb	r1, [r4, #21]
 8009a3c:	7da0      	ldrb	r0, [r4, #22]
 8009a3e:	f080 0001 	eor.w	r0, r0, #1
 8009a42:	b003      	add	sp, #12
 8009a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e7ee      	b.n	8009a2c <ucdr_serialize_endian_uint32_t+0xc0>
 8009a4e:	68a2      	ldr	r2, [r4, #8]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	7da0      	ldrb	r0, [r4, #22]
 8009a54:	f884 8015 	strb.w	r8, [r4, #21]
 8009a58:	1bd2      	subs	r2, r2, r7
 8009a5a:	1bdb      	subs	r3, r3, r7
 8009a5c:	f080 0001 	eor.w	r0, r0, #1
 8009a60:	60a2      	str	r2, [r4, #8]
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	b003      	add	sp, #12
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	68a3      	ldr	r3, [r4, #8]
 8009a74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	68a3      	ldr	r3, [r4, #8]
 8009a7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	e7ad      	b.n	80099e0 <ucdr_serialize_endian_uint32_t+0x74>
 8009a84:	ad01      	add	r5, sp, #4
 8009a86:	4629      	mov	r1, r5
 8009a88:	463a      	mov	r2, r7
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f008 f8bd 	bl	8011c0a <memcpy>
 8009a90:	68a0      	ldr	r0, [r4, #8]
 8009a92:	464a      	mov	r2, r9
 8009a94:	19e9      	adds	r1, r5, r7
 8009a96:	f008 f8b8 	bl	8011c0a <memcpy>
 8009a9a:	e7a1      	b.n	80099e0 <ucdr_serialize_endian_uint32_t+0x74>

08009a9c <ucdr_deserialize_uint32_t>:
 8009a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	f000 fec1 	bl	800a82c <ucdr_buffer_alignment>
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4620      	mov	r0, r4
 8009aae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009ab2:	f000 feff 	bl	800a8b4 <ucdr_advance_buffer>
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	2104      	movs	r1, #4
 8009aba:	f000 fe59 	bl	800a770 <ucdr_check_buffer_available_for>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d138      	bne.n	8009b34 <ucdr_deserialize_uint32_t+0x98>
 8009ac2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009ac6:	42b7      	cmp	r7, r6
 8009ac8:	d92f      	bls.n	8009b2a <ucdr_deserialize_uint32_t+0x8e>
 8009aca:	6922      	ldr	r2, [r4, #16]
 8009acc:	60a7      	str	r7, [r4, #8]
 8009ace:	1bbf      	subs	r7, r7, r6
 8009ad0:	443a      	add	r2, r7
 8009ad2:	f1c7 0904 	rsb	r9, r7, #4
 8009ad6:	6122      	str	r2, [r4, #16]
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fe54 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d046      	beq.n	8009b72 <ucdr_deserialize_uint32_t+0xd6>
 8009ae4:	7d23      	ldrb	r3, [r4, #20]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d05c      	beq.n	8009ba4 <ucdr_deserialize_uint32_t+0x108>
 8009aea:	78f3      	ldrb	r3, [r6, #3]
 8009aec:	702b      	strb	r3, [r5, #0]
 8009aee:	2f00      	cmp	r7, #0
 8009af0:	d04c      	beq.n	8009b8c <ucdr_deserialize_uint32_t+0xf0>
 8009af2:	78b3      	ldrb	r3, [r6, #2]
 8009af4:	706b      	strb	r3, [r5, #1]
 8009af6:	2f01      	cmp	r7, #1
 8009af8:	f105 0302 	add.w	r3, r5, #2
 8009afc:	d04a      	beq.n	8009b94 <ucdr_deserialize_uint32_t+0xf8>
 8009afe:	7873      	ldrb	r3, [r6, #1]
 8009b00:	70ab      	strb	r3, [r5, #2]
 8009b02:	2f02      	cmp	r7, #2
 8009b04:	f105 0303 	add.w	r3, r5, #3
 8009b08:	d048      	beq.n	8009b9c <ucdr_deserialize_uint32_t+0x100>
 8009b0a:	7833      	ldrb	r3, [r6, #0]
 8009b0c:	70eb      	strb	r3, [r5, #3]
 8009b0e:	6923      	ldr	r3, [r4, #16]
 8009b10:	68a2      	ldr	r2, [r4, #8]
 8009b12:	7da0      	ldrb	r0, [r4, #22]
 8009b14:	2104      	movs	r1, #4
 8009b16:	3304      	adds	r3, #4
 8009b18:	1bdb      	subs	r3, r3, r7
 8009b1a:	444a      	add	r2, r9
 8009b1c:	7561      	strb	r1, [r4, #21]
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	60a2      	str	r2, [r4, #8]
 8009b22:	f080 0001 	eor.w	r0, r0, #1
 8009b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fe2b 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009b32:	b1b0      	cbz	r0, 8009b62 <ucdr_deserialize_uint32_t+0xc6>
 8009b34:	7d23      	ldrb	r3, [r4, #20]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	d017      	beq.n	8009b6c <ucdr_deserialize_uint32_t+0xd0>
 8009b3c:	78db      	ldrb	r3, [r3, #3]
 8009b3e:	702b      	strb	r3, [r5, #0]
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	789b      	ldrb	r3, [r3, #2]
 8009b44:	706b      	strb	r3, [r5, #1]
 8009b46:	68a3      	ldr	r3, [r4, #8]
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	70ab      	strb	r3, [r5, #2]
 8009b4c:	68a3      	ldr	r3, [r4, #8]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	70eb      	strb	r3, [r5, #3]
 8009b52:	68a2      	ldr	r2, [r4, #8]
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	3204      	adds	r2, #4
 8009b58:	3304      	adds	r3, #4
 8009b5a:	2104      	movs	r1, #4
 8009b5c:	60a2      	str	r2, [r4, #8]
 8009b5e:	6123      	str	r3, [r4, #16]
 8009b60:	7561      	strb	r1, [r4, #21]
 8009b62:	7da0      	ldrb	r0, [r4, #22]
 8009b64:	f080 0001 	eor.w	r0, r0, #1
 8009b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	e7ef      	b.n	8009b52 <ucdr_deserialize_uint32_t+0xb6>
 8009b72:	68a2      	ldr	r2, [r4, #8]
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	7da0      	ldrb	r0, [r4, #22]
 8009b78:	f884 8015 	strb.w	r8, [r4, #21]
 8009b7c:	1bd2      	subs	r2, r2, r7
 8009b7e:	1bdb      	subs	r3, r3, r7
 8009b80:	60a2      	str	r2, [r4, #8]
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f080 0001 	eor.w	r0, r0, #1
 8009b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8c:	68a3      	ldr	r3, [r4, #8]
 8009b8e:	789b      	ldrb	r3, [r3, #2]
 8009b90:	706b      	strb	r3, [r5, #1]
 8009b92:	1cab      	adds	r3, r5, #2
 8009b94:	68a2      	ldr	r2, [r4, #8]
 8009b96:	7852      	ldrb	r2, [r2, #1]
 8009b98:	f803 2b01 	strb.w	r2, [r3], #1
 8009b9c:	68a2      	ldr	r2, [r4, #8]
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	e7b4      	b.n	8009b0e <ucdr_deserialize_uint32_t+0x72>
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f008 f82e 	bl	8011c0a <memcpy>
 8009bae:	68a1      	ldr	r1, [r4, #8]
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	19e8      	adds	r0, r5, r7
 8009bb4:	f008 f829 	bl	8011c0a <memcpy>
 8009bb8:	e7a9      	b.n	8009b0e <ucdr_deserialize_uint32_t+0x72>
 8009bba:	bf00      	nop

08009bbc <ucdr_deserialize_endian_uint32_t>:
 8009bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	460e      	mov	r6, r1
 8009bc2:	2104      	movs	r1, #4
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	4615      	mov	r5, r2
 8009bc8:	f000 fe30 	bl	800a82c <ucdr_buffer_alignment>
 8009bcc:	4601      	mov	r1, r0
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009bd4:	f000 fe6e 	bl	800a8b4 <ucdr_advance_buffer>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	2104      	movs	r1, #4
 8009bdc:	f000 fdc8 	bl	800a770 <ucdr_check_buffer_available_for>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d13c      	bne.n	8009c5e <ucdr_deserialize_endian_uint32_t+0xa2>
 8009be4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009be8:	42bb      	cmp	r3, r7
 8009bea:	d933      	bls.n	8009c54 <ucdr_deserialize_endian_uint32_t+0x98>
 8009bec:	6922      	ldr	r2, [r4, #16]
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	eba3 0807 	sub.w	r8, r3, r7
 8009bf4:	4442      	add	r2, r8
 8009bf6:	f1c8 0a04 	rsb	sl, r8, #4
 8009bfa:	6122      	str	r2, [r4, #16]
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fdc2 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d048      	beq.n	8009c9a <ucdr_deserialize_endian_uint32_t+0xde>
 8009c08:	2e01      	cmp	r6, #1
 8009c0a:	d061      	beq.n	8009cd0 <ucdr_deserialize_endian_uint32_t+0x114>
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	702b      	strb	r3, [r5, #0]
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	d050      	beq.n	8009cb8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8009c16:	78bb      	ldrb	r3, [r7, #2]
 8009c18:	706b      	strb	r3, [r5, #1]
 8009c1a:	f1b8 0f01 	cmp.w	r8, #1
 8009c1e:	f105 0302 	add.w	r3, r5, #2
 8009c22:	d04d      	beq.n	8009cc0 <ucdr_deserialize_endian_uint32_t+0x104>
 8009c24:	787b      	ldrb	r3, [r7, #1]
 8009c26:	70ab      	strb	r3, [r5, #2]
 8009c28:	f1b8 0f02 	cmp.w	r8, #2
 8009c2c:	f105 0303 	add.w	r3, r5, #3
 8009c30:	d04a      	beq.n	8009cc8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8009c32:	783b      	ldrb	r3, [r7, #0]
 8009c34:	70eb      	strb	r3, [r5, #3]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	68a2      	ldr	r2, [r4, #8]
 8009c3a:	7da0      	ldrb	r0, [r4, #22]
 8009c3c:	2104      	movs	r1, #4
 8009c3e:	3304      	adds	r3, #4
 8009c40:	eba3 0308 	sub.w	r3, r3, r8
 8009c44:	4452      	add	r2, sl
 8009c46:	7561      	strb	r1, [r4, #21]
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	60a2      	str	r2, [r4, #8]
 8009c4c:	f080 0001 	eor.w	r0, r0, #1
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	2104      	movs	r1, #4
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fd96 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009c5c:	b1a8      	cbz	r0, 8009c8a <ucdr_deserialize_endian_uint32_t+0xce>
 8009c5e:	2e01      	cmp	r6, #1
 8009c60:	68a3      	ldr	r3, [r4, #8]
 8009c62:	d017      	beq.n	8009c94 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009c64:	78db      	ldrb	r3, [r3, #3]
 8009c66:	702b      	strb	r3, [r5, #0]
 8009c68:	68a3      	ldr	r3, [r4, #8]
 8009c6a:	789b      	ldrb	r3, [r3, #2]
 8009c6c:	706b      	strb	r3, [r5, #1]
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	785b      	ldrb	r3, [r3, #1]
 8009c72:	70ab      	strb	r3, [r5, #2]
 8009c74:	68a3      	ldr	r3, [r4, #8]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	70eb      	strb	r3, [r5, #3]
 8009c7a:	68a2      	ldr	r2, [r4, #8]
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	3204      	adds	r2, #4
 8009c80:	3304      	adds	r3, #4
 8009c82:	2104      	movs	r1, #4
 8009c84:	60a2      	str	r2, [r4, #8]
 8009c86:	6123      	str	r3, [r4, #16]
 8009c88:	7561      	strb	r1, [r4, #21]
 8009c8a:	7da0      	ldrb	r0, [r4, #22]
 8009c8c:	f080 0001 	eor.w	r0, r0, #1
 8009c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	e7ef      	b.n	8009c7a <ucdr_deserialize_endian_uint32_t+0xbe>
 8009c9a:	68a2      	ldr	r2, [r4, #8]
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	7da0      	ldrb	r0, [r4, #22]
 8009ca0:	f884 9015 	strb.w	r9, [r4, #21]
 8009ca4:	eba2 0208 	sub.w	r2, r2, r8
 8009ca8:	eba3 0308 	sub.w	r3, r3, r8
 8009cac:	60a2      	str	r2, [r4, #8]
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	f080 0001 	eor.w	r0, r0, #1
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	789b      	ldrb	r3, [r3, #2]
 8009cbc:	706b      	strb	r3, [r5, #1]
 8009cbe:	1cab      	adds	r3, r5, #2
 8009cc0:	68a2      	ldr	r2, [r4, #8]
 8009cc2:	7852      	ldrb	r2, [r2, #1]
 8009cc4:	f803 2b01 	strb.w	r2, [r3], #1
 8009cc8:	68a2      	ldr	r2, [r4, #8]
 8009cca:	7812      	ldrb	r2, [r2, #0]
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	e7b2      	b.n	8009c36 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	4642      	mov	r2, r8
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f007 ff98 	bl	8011c0a <memcpy>
 8009cda:	68a1      	ldr	r1, [r4, #8]
 8009cdc:	4652      	mov	r2, sl
 8009cde:	eb05 0008 	add.w	r0, r5, r8
 8009ce2:	f007 ff92 	bl	8011c0a <memcpy>
 8009ce6:	e7a6      	b.n	8009c36 <ucdr_deserialize_endian_uint32_t+0x7a>

08009ce8 <ucdr_serialize_uint64_t>:
 8009ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cec:	2108      	movs	r1, #8
 8009cee:	b082      	sub	sp, #8
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8009cf6:	f000 fd99 	bl	800a82c <ucdr_buffer_alignment>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	7d67      	ldrb	r7, [r4, #21]
 8009d00:	f000 fdd8 	bl	800a8b4 <ucdr_advance_buffer>
 8009d04:	4620      	mov	r0, r4
 8009d06:	2108      	movs	r1, #8
 8009d08:	f000 fd32 	bl	800a770 <ucdr_check_buffer_available_for>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d14e      	bne.n	8009dae <ucdr_serialize_uint64_t+0xc6>
 8009d10:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009d14:	42b5      	cmp	r5, r6
 8009d16:	d945      	bls.n	8009da4 <ucdr_serialize_uint64_t+0xbc>
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	60a5      	str	r5, [r4, #8]
 8009d1c:	1bad      	subs	r5, r5, r6
 8009d1e:	442b      	add	r3, r5
 8009d20:	f1c5 0808 	rsb	r8, r5, #8
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4641      	mov	r1, r8
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fd2d 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d074      	beq.n	8009e1c <ucdr_serialize_uint64_t+0x134>
 8009d32:	7d23      	ldrb	r3, [r4, #20]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	f000 809b 	beq.w	8009e70 <ucdr_serialize_uint64_t+0x188>
 8009d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009d3e:	7033      	strb	r3, [r6, #0]
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	d078      	beq.n	8009e36 <ucdr_serialize_uint64_t+0x14e>
 8009d44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009d48:	7073      	strb	r3, [r6, #1]
 8009d4a:	2d01      	cmp	r5, #1
 8009d4c:	d077      	beq.n	8009e3e <ucdr_serialize_uint64_t+0x156>
 8009d4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009d52:	70b3      	strb	r3, [r6, #2]
 8009d54:	2d02      	cmp	r5, #2
 8009d56:	d076      	beq.n	8009e46 <ucdr_serialize_uint64_t+0x15e>
 8009d58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009d5c:	70f3      	strb	r3, [r6, #3]
 8009d5e:	2d03      	cmp	r5, #3
 8009d60:	d075      	beq.n	8009e4e <ucdr_serialize_uint64_t+0x166>
 8009d62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009d66:	7133      	strb	r3, [r6, #4]
 8009d68:	2d04      	cmp	r5, #4
 8009d6a:	d074      	beq.n	8009e56 <ucdr_serialize_uint64_t+0x16e>
 8009d6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009d70:	7173      	strb	r3, [r6, #5]
 8009d72:	2d05      	cmp	r5, #5
 8009d74:	d073      	beq.n	8009e5e <ucdr_serialize_uint64_t+0x176>
 8009d76:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009d7a:	71b3      	strb	r3, [r6, #6]
 8009d7c:	2d06      	cmp	r5, #6
 8009d7e:	d072      	beq.n	8009e66 <ucdr_serialize_uint64_t+0x17e>
 8009d80:	f89d 3000 	ldrb.w	r3, [sp]
 8009d84:	71f3      	strb	r3, [r6, #7]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	68a2      	ldr	r2, [r4, #8]
 8009d8a:	7da0      	ldrb	r0, [r4, #22]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	1b5d      	subs	r5, r3, r5
 8009d90:	4442      	add	r2, r8
 8009d92:	2308      	movs	r3, #8
 8009d94:	f080 0001 	eor.w	r0, r0, #1
 8009d98:	6125      	str	r5, [r4, #16]
 8009d9a:	60a2      	str	r2, [r4, #8]
 8009d9c:	7563      	strb	r3, [r4, #21]
 8009d9e:	b002      	add	sp, #8
 8009da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da4:	2108      	movs	r1, #8
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fcee 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009dac:	b350      	cbz	r0, 8009e04 <ucdr_serialize_uint64_t+0x11c>
 8009dae:	7d23      	ldrb	r3, [r4, #20]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d02d      	beq.n	8009e10 <ucdr_serialize_uint64_t+0x128>
 8009db4:	68a3      	ldr	r3, [r4, #8]
 8009db6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	68a3      	ldr	r3, [r4, #8]
 8009dbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009dc2:	705a      	strb	r2, [r3, #1]
 8009dc4:	68a3      	ldr	r3, [r4, #8]
 8009dc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009dca:	709a      	strb	r2, [r3, #2]
 8009dcc:	68a3      	ldr	r3, [r4, #8]
 8009dce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009dd2:	70da      	strb	r2, [r3, #3]
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009dda:	711a      	strb	r2, [r3, #4]
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009de2:	715a      	strb	r2, [r3, #5]
 8009de4:	68a3      	ldr	r3, [r4, #8]
 8009de6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009dea:	719a      	strb	r2, [r3, #6]
 8009dec:	68a3      	ldr	r3, [r4, #8]
 8009dee:	f89d 2000 	ldrb.w	r2, [sp]
 8009df2:	71da      	strb	r2, [r3, #7]
 8009df4:	68a2      	ldr	r2, [r4, #8]
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	3208      	adds	r2, #8
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	2108      	movs	r1, #8
 8009dfe:	60a2      	str	r2, [r4, #8]
 8009e00:	6123      	str	r3, [r4, #16]
 8009e02:	7561      	strb	r1, [r4, #21]
 8009e04:	7da0      	ldrb	r0, [r4, #22]
 8009e06:	f080 0001 	eor.w	r0, r0, #1
 8009e0a:	b002      	add	sp, #8
 8009e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e10:	466b      	mov	r3, sp
 8009e12:	cb03      	ldmia	r3!, {r0, r1}
 8009e14:	68a3      	ldr	r3, [r4, #8]
 8009e16:	6018      	str	r0, [r3, #0]
 8009e18:	6059      	str	r1, [r3, #4]
 8009e1a:	e7eb      	b.n	8009df4 <ucdr_serialize_uint64_t+0x10c>
 8009e1c:	68a2      	ldr	r2, [r4, #8]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	7da0      	ldrb	r0, [r4, #22]
 8009e22:	7567      	strb	r7, [r4, #21]
 8009e24:	1b52      	subs	r2, r2, r5
 8009e26:	f080 0001 	eor.w	r0, r0, #1
 8009e2a:	1b5d      	subs	r5, r3, r5
 8009e2c:	60a2      	str	r2, [r4, #8]
 8009e2e:	6125      	str	r5, [r4, #16]
 8009e30:	b002      	add	sp, #8
 8009e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e36:	68a3      	ldr	r3, [r4, #8]
 8009e38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009e64:	701a      	strb	r2, [r3, #0]
 8009e66:	68a3      	ldr	r3, [r4, #8]
 8009e68:	f89d 2000 	ldrb.w	r2, [sp]
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	e78a      	b.n	8009d86 <ucdr_serialize_uint64_t+0x9e>
 8009e70:	4630      	mov	r0, r6
 8009e72:	466e      	mov	r6, sp
 8009e74:	4631      	mov	r1, r6
 8009e76:	462a      	mov	r2, r5
 8009e78:	f007 fec7 	bl	8011c0a <memcpy>
 8009e7c:	68a0      	ldr	r0, [r4, #8]
 8009e7e:	4642      	mov	r2, r8
 8009e80:	1971      	adds	r1, r6, r5
 8009e82:	f007 fec2 	bl	8011c0a <memcpy>
 8009e86:	e77e      	b.n	8009d86 <ucdr_serialize_uint64_t+0x9e>

08009e88 <ucdr_serialize_int16_t>:
 8009e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	460b      	mov	r3, r1
 8009e90:	2102      	movs	r1, #2
 8009e92:	4604      	mov	r4, r0
 8009e94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009e98:	f000 fcc8 	bl	800a82c <ucdr_buffer_alignment>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	7d67      	ldrb	r7, [r4, #21]
 8009ea2:	f000 fd07 	bl	800a8b4 <ucdr_advance_buffer>
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	2102      	movs	r1, #2
 8009eaa:	f000 fc61 	bl	800a770 <ucdr_check_buffer_available_for>
 8009eae:	bb78      	cbnz	r0, 8009f10 <ucdr_serialize_int16_t+0x88>
 8009eb0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009eb4:	42b5      	cmp	r5, r6
 8009eb6:	d926      	bls.n	8009f06 <ucdr_serialize_int16_t+0x7e>
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	60a5      	str	r5, [r4, #8]
 8009ebc:	1bad      	subs	r5, r5, r6
 8009ebe:	442a      	add	r2, r5
 8009ec0:	f1c5 0802 	rsb	r8, r5, #2
 8009ec4:	6122      	str	r2, [r4, #16]
 8009ec6:	4641      	mov	r1, r8
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fc5d 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d03b      	beq.n	8009f4a <ucdr_serialize_int16_t+0xc2>
 8009ed2:	7d23      	ldrb	r3, [r4, #20]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d04a      	beq.n	8009f6e <ucdr_serialize_int16_t+0xe6>
 8009ed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009edc:	7033      	strb	r3, [r6, #0]
 8009ede:	2d00      	cmp	r5, #0
 8009ee0:	d040      	beq.n	8009f64 <ucdr_serialize_int16_t+0xdc>
 8009ee2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009ee6:	7073      	strb	r3, [r6, #1]
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	68a2      	ldr	r2, [r4, #8]
 8009eec:	7da0      	ldrb	r0, [r4, #22]
 8009eee:	3302      	adds	r3, #2
 8009ef0:	1b5b      	subs	r3, r3, r5
 8009ef2:	4442      	add	r2, r8
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	f080 0001 	eor.w	r0, r0, #1
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	60a2      	str	r2, [r4, #8]
 8009efe:	7561      	strb	r1, [r4, #21]
 8009f00:	b002      	add	sp, #8
 8009f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f06:	2102      	movs	r1, #2
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fc3d 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009f0e:	b190      	cbz	r0, 8009f36 <ucdr_serialize_int16_t+0xae>
 8009f10:	7d23      	ldrb	r3, [r4, #20]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	68a3      	ldr	r3, [r4, #8]
 8009f16:	d014      	beq.n	8009f42 <ucdr_serialize_int16_t+0xba>
 8009f18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f24:	705a      	strb	r2, [r3, #1]
 8009f26:	68a2      	ldr	r2, [r4, #8]
 8009f28:	6923      	ldr	r3, [r4, #16]
 8009f2a:	3202      	adds	r2, #2
 8009f2c:	3302      	adds	r3, #2
 8009f2e:	2102      	movs	r1, #2
 8009f30:	60a2      	str	r2, [r4, #8]
 8009f32:	6123      	str	r3, [r4, #16]
 8009f34:	7561      	strb	r1, [r4, #21]
 8009f36:	7da0      	ldrb	r0, [r4, #22]
 8009f38:	f080 0001 	eor.w	r0, r0, #1
 8009f3c:	b002      	add	sp, #8
 8009f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009f46:	801a      	strh	r2, [r3, #0]
 8009f48:	e7ed      	b.n	8009f26 <ucdr_serialize_int16_t+0x9e>
 8009f4a:	68a2      	ldr	r2, [r4, #8]
 8009f4c:	6923      	ldr	r3, [r4, #16]
 8009f4e:	7da0      	ldrb	r0, [r4, #22]
 8009f50:	7567      	strb	r7, [r4, #21]
 8009f52:	1b52      	subs	r2, r2, r5
 8009f54:	1b5b      	subs	r3, r3, r5
 8009f56:	f080 0001 	eor.w	r0, r0, #1
 8009f5a:	60a2      	str	r2, [r4, #8]
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	b002      	add	sp, #8
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	68a3      	ldr	r3, [r4, #8]
 8009f66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009f6a:	701a      	strb	r2, [r3, #0]
 8009f6c:	e7bc      	b.n	8009ee8 <ucdr_serialize_int16_t+0x60>
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f10d 0606 	add.w	r6, sp, #6
 8009f74:	4631      	mov	r1, r6
 8009f76:	462a      	mov	r2, r5
 8009f78:	f007 fe47 	bl	8011c0a <memcpy>
 8009f7c:	68a0      	ldr	r0, [r4, #8]
 8009f7e:	4642      	mov	r2, r8
 8009f80:	1971      	adds	r1, r6, r5
 8009f82:	f007 fe42 	bl	8011c0a <memcpy>
 8009f86:	e7af      	b.n	8009ee8 <ucdr_serialize_int16_t+0x60>

08009f88 <ucdr_deserialize_int16_t>:
 8009f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	2102      	movs	r1, #2
 8009f90:	4604      	mov	r4, r0
 8009f92:	f000 fc4b 	bl	800a82c <ucdr_buffer_alignment>
 8009f96:	4601      	mov	r1, r0
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009f9e:	f000 fc89 	bl	800a8b4 <ucdr_advance_buffer>
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	2102      	movs	r1, #2
 8009fa6:	f000 fbe3 	bl	800a770 <ucdr_check_buffer_available_for>
 8009faa:	bb60      	cbnz	r0, 800a006 <ucdr_deserialize_int16_t+0x7e>
 8009fac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009fb0:	42be      	cmp	r6, r7
 8009fb2:	d923      	bls.n	8009ffc <ucdr_deserialize_int16_t+0x74>
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	60a6      	str	r6, [r4, #8]
 8009fb8:	1bf6      	subs	r6, r6, r7
 8009fba:	4432      	add	r2, r6
 8009fbc:	f1c6 0902 	rsb	r9, r6, #2
 8009fc0:	6122      	str	r2, [r4, #16]
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 fbdf 	bl	800a788 <ucdr_check_final_buffer_behavior>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d034      	beq.n	800a038 <ucdr_deserialize_int16_t+0xb0>
 8009fce:	7d23      	ldrb	r3, [r4, #20]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d042      	beq.n	800a05a <ucdr_deserialize_int16_t+0xd2>
 8009fd4:	787b      	ldrb	r3, [r7, #1]
 8009fd6:	702b      	strb	r3, [r5, #0]
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	d03a      	beq.n	800a052 <ucdr_deserialize_int16_t+0xca>
 8009fdc:	783b      	ldrb	r3, [r7, #0]
 8009fde:	706b      	strb	r3, [r5, #1]
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	68a2      	ldr	r2, [r4, #8]
 8009fe4:	7da0      	ldrb	r0, [r4, #22]
 8009fe6:	2102      	movs	r1, #2
 8009fe8:	3302      	adds	r3, #2
 8009fea:	1b9b      	subs	r3, r3, r6
 8009fec:	444a      	add	r2, r9
 8009fee:	7561      	strb	r1, [r4, #21]
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	60a2      	str	r2, [r4, #8]
 8009ff4:	f080 0001 	eor.w	r0, r0, #1
 8009ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	4620      	mov	r0, r4
 800a000:	f000 fbc2 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a004:	b180      	cbz	r0, 800a028 <ucdr_deserialize_int16_t+0xa0>
 800a006:	7d23      	ldrb	r3, [r4, #20]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	d011      	beq.n	800a032 <ucdr_deserialize_int16_t+0xaa>
 800a00e:	785b      	ldrb	r3, [r3, #1]
 800a010:	702b      	strb	r3, [r5, #0]
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	706b      	strb	r3, [r5, #1]
 800a018:	68a2      	ldr	r2, [r4, #8]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	3202      	adds	r2, #2
 800a01e:	3302      	adds	r3, #2
 800a020:	2102      	movs	r1, #2
 800a022:	60a2      	str	r2, [r4, #8]
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	7561      	strb	r1, [r4, #21]
 800a028:	7da0      	ldrb	r0, [r4, #22]
 800a02a:	f080 0001 	eor.w	r0, r0, #1
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	802b      	strh	r3, [r5, #0]
 800a036:	e7ef      	b.n	800a018 <ucdr_deserialize_int16_t+0x90>
 800a038:	68a2      	ldr	r2, [r4, #8]
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	7da0      	ldrb	r0, [r4, #22]
 800a03e:	f884 8015 	strb.w	r8, [r4, #21]
 800a042:	1b92      	subs	r2, r2, r6
 800a044:	1b9b      	subs	r3, r3, r6
 800a046:	60a2      	str	r2, [r4, #8]
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	f080 0001 	eor.w	r0, r0, #1
 800a04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	706b      	strb	r3, [r5, #1]
 800a058:	e7c2      	b.n	8009fe0 <ucdr_deserialize_int16_t+0x58>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4632      	mov	r2, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	f007 fdd3 	bl	8011c0a <memcpy>
 800a064:	68a1      	ldr	r1, [r4, #8]
 800a066:	464a      	mov	r2, r9
 800a068:	19a8      	adds	r0, r5, r6
 800a06a:	f007 fdce 	bl	8011c0a <memcpy>
 800a06e:	e7b7      	b.n	8009fe0 <ucdr_deserialize_int16_t+0x58>

0800a070 <ucdr_serialize_int32_t>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	4604      	mov	r4, r0
 800a078:	9101      	str	r1, [sp, #4]
 800a07a:	2104      	movs	r1, #4
 800a07c:	f000 fbd6 	bl	800a82c <ucdr_buffer_alignment>
 800a080:	4601      	mov	r1, r0
 800a082:	4620      	mov	r0, r4
 800a084:	7d67      	ldrb	r7, [r4, #21]
 800a086:	f000 fc15 	bl	800a8b4 <ucdr_advance_buffer>
 800a08a:	4620      	mov	r0, r4
 800a08c:	2104      	movs	r1, #4
 800a08e:	f000 fb6f 	bl	800a770 <ucdr_check_buffer_available_for>
 800a092:	2800      	cmp	r0, #0
 800a094:	d139      	bne.n	800a10a <ucdr_serialize_int32_t+0x9a>
 800a096:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a09a:	42ae      	cmp	r6, r5
 800a09c:	d930      	bls.n	800a100 <ucdr_serialize_int32_t+0x90>
 800a09e:	6922      	ldr	r2, [r4, #16]
 800a0a0:	60a6      	str	r6, [r4, #8]
 800a0a2:	1b76      	subs	r6, r6, r5
 800a0a4:	4432      	add	r2, r6
 800a0a6:	f1c6 0804 	rsb	r8, r6, #4
 800a0aa:	6122      	str	r2, [r4, #16]
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 fb6a 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d04c      	beq.n	800a152 <ucdr_serialize_int32_t+0xe2>
 800a0b8:	7d23      	ldrb	r3, [r4, #20]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d063      	beq.n	800a186 <ucdr_serialize_int32_t+0x116>
 800a0be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a0c2:	702b      	strb	r3, [r5, #0]
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	d051      	beq.n	800a16c <ucdr_serialize_int32_t+0xfc>
 800a0c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a0cc:	706b      	strb	r3, [r5, #1]
 800a0ce:	2e01      	cmp	r6, #1
 800a0d0:	d050      	beq.n	800a174 <ucdr_serialize_int32_t+0x104>
 800a0d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a0d6:	70ab      	strb	r3, [r5, #2]
 800a0d8:	2e02      	cmp	r6, #2
 800a0da:	d04f      	beq.n	800a17c <ucdr_serialize_int32_t+0x10c>
 800a0dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0e0:	70eb      	strb	r3, [r5, #3]
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	68a2      	ldr	r2, [r4, #8]
 800a0e6:	7da0      	ldrb	r0, [r4, #22]
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	1b9b      	subs	r3, r3, r6
 800a0ec:	4442      	add	r2, r8
 800a0ee:	2104      	movs	r1, #4
 800a0f0:	f080 0001 	eor.w	r0, r0, #1
 800a0f4:	6123      	str	r3, [r4, #16]
 800a0f6:	60a2      	str	r2, [r4, #8]
 800a0f8:	7561      	strb	r1, [r4, #21]
 800a0fa:	b002      	add	sp, #8
 800a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a100:	2104      	movs	r1, #4
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fb40 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a108:	b1d0      	cbz	r0, 800a140 <ucdr_serialize_int32_t+0xd0>
 800a10a:	7d23      	ldrb	r3, [r4, #20]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	d01c      	beq.n	800a14c <ucdr_serialize_int32_t+0xdc>
 800a112:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a116:	701a      	strb	r2, [r3, #0]
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a11e:	705a      	strb	r2, [r3, #1]
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a126:	709a      	strb	r2, [r3, #2]
 800a128:	68a3      	ldr	r3, [r4, #8]
 800a12a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a12e:	70da      	strb	r2, [r3, #3]
 800a130:	68a2      	ldr	r2, [r4, #8]
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	3204      	adds	r2, #4
 800a136:	3304      	adds	r3, #4
 800a138:	2104      	movs	r1, #4
 800a13a:	60a2      	str	r2, [r4, #8]
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	7561      	strb	r1, [r4, #21]
 800a140:	7da0      	ldrb	r0, [r4, #22]
 800a142:	f080 0001 	eor.w	r0, r0, #1
 800a146:	b002      	add	sp, #8
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	9a01      	ldr	r2, [sp, #4]
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	e7ee      	b.n	800a130 <ucdr_serialize_int32_t+0xc0>
 800a152:	68a2      	ldr	r2, [r4, #8]
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	7da0      	ldrb	r0, [r4, #22]
 800a158:	7567      	strb	r7, [r4, #21]
 800a15a:	1b92      	subs	r2, r2, r6
 800a15c:	1b9b      	subs	r3, r3, r6
 800a15e:	f080 0001 	eor.w	r0, r0, #1
 800a162:	60a2      	str	r2, [r4, #8]
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	b002      	add	sp, #8
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	68a3      	ldr	r3, [r4, #8]
 800a16e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	68a3      	ldr	r3, [r4, #8]
 800a176:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	68a3      	ldr	r3, [r4, #8]
 800a17e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a182:	701a      	strb	r2, [r3, #0]
 800a184:	e7ad      	b.n	800a0e2 <ucdr_serialize_int32_t+0x72>
 800a186:	4628      	mov	r0, r5
 800a188:	ad01      	add	r5, sp, #4
 800a18a:	4629      	mov	r1, r5
 800a18c:	4632      	mov	r2, r6
 800a18e:	f007 fd3c 	bl	8011c0a <memcpy>
 800a192:	68a0      	ldr	r0, [r4, #8]
 800a194:	4642      	mov	r2, r8
 800a196:	19a9      	adds	r1, r5, r6
 800a198:	f007 fd37 	bl	8011c0a <memcpy>
 800a19c:	e7a1      	b.n	800a0e2 <ucdr_serialize_int32_t+0x72>
 800a19e:	bf00      	nop

0800a1a0 <ucdr_deserialize_int32_t>:
 800a1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a4:	460d      	mov	r5, r1
 800a1a6:	2104      	movs	r1, #4
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	f000 fb3f 	bl	800a82c <ucdr_buffer_alignment>
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a1b6:	f000 fb7d 	bl	800a8b4 <ucdr_advance_buffer>
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	2104      	movs	r1, #4
 800a1be:	f000 fad7 	bl	800a770 <ucdr_check_buffer_available_for>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d138      	bne.n	800a238 <ucdr_deserialize_int32_t+0x98>
 800a1c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a1ca:	42b7      	cmp	r7, r6
 800a1cc:	d92f      	bls.n	800a22e <ucdr_deserialize_int32_t+0x8e>
 800a1ce:	6922      	ldr	r2, [r4, #16]
 800a1d0:	60a7      	str	r7, [r4, #8]
 800a1d2:	1bbf      	subs	r7, r7, r6
 800a1d4:	443a      	add	r2, r7
 800a1d6:	f1c7 0904 	rsb	r9, r7, #4
 800a1da:	6122      	str	r2, [r4, #16]
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f000 fad2 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d046      	beq.n	800a276 <ucdr_deserialize_int32_t+0xd6>
 800a1e8:	7d23      	ldrb	r3, [r4, #20]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d05c      	beq.n	800a2a8 <ucdr_deserialize_int32_t+0x108>
 800a1ee:	78f3      	ldrb	r3, [r6, #3]
 800a1f0:	702b      	strb	r3, [r5, #0]
 800a1f2:	2f00      	cmp	r7, #0
 800a1f4:	d04c      	beq.n	800a290 <ucdr_deserialize_int32_t+0xf0>
 800a1f6:	78b3      	ldrb	r3, [r6, #2]
 800a1f8:	706b      	strb	r3, [r5, #1]
 800a1fa:	2f01      	cmp	r7, #1
 800a1fc:	f105 0302 	add.w	r3, r5, #2
 800a200:	d04a      	beq.n	800a298 <ucdr_deserialize_int32_t+0xf8>
 800a202:	7873      	ldrb	r3, [r6, #1]
 800a204:	70ab      	strb	r3, [r5, #2]
 800a206:	2f02      	cmp	r7, #2
 800a208:	f105 0303 	add.w	r3, r5, #3
 800a20c:	d048      	beq.n	800a2a0 <ucdr_deserialize_int32_t+0x100>
 800a20e:	7833      	ldrb	r3, [r6, #0]
 800a210:	70eb      	strb	r3, [r5, #3]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	68a2      	ldr	r2, [r4, #8]
 800a216:	7da0      	ldrb	r0, [r4, #22]
 800a218:	2104      	movs	r1, #4
 800a21a:	3304      	adds	r3, #4
 800a21c:	1bdb      	subs	r3, r3, r7
 800a21e:	444a      	add	r2, r9
 800a220:	7561      	strb	r1, [r4, #21]
 800a222:	6123      	str	r3, [r4, #16]
 800a224:	60a2      	str	r2, [r4, #8]
 800a226:	f080 0001 	eor.w	r0, r0, #1
 800a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22e:	2104      	movs	r1, #4
 800a230:	4620      	mov	r0, r4
 800a232:	f000 faa9 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a236:	b1b0      	cbz	r0, 800a266 <ucdr_deserialize_int32_t+0xc6>
 800a238:	7d23      	ldrb	r3, [r4, #20]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	68a3      	ldr	r3, [r4, #8]
 800a23e:	d017      	beq.n	800a270 <ucdr_deserialize_int32_t+0xd0>
 800a240:	78db      	ldrb	r3, [r3, #3]
 800a242:	702b      	strb	r3, [r5, #0]
 800a244:	68a3      	ldr	r3, [r4, #8]
 800a246:	789b      	ldrb	r3, [r3, #2]
 800a248:	706b      	strb	r3, [r5, #1]
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	785b      	ldrb	r3, [r3, #1]
 800a24e:	70ab      	strb	r3, [r5, #2]
 800a250:	68a3      	ldr	r3, [r4, #8]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	70eb      	strb	r3, [r5, #3]
 800a256:	68a2      	ldr	r2, [r4, #8]
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	3204      	adds	r2, #4
 800a25c:	3304      	adds	r3, #4
 800a25e:	2104      	movs	r1, #4
 800a260:	60a2      	str	r2, [r4, #8]
 800a262:	6123      	str	r3, [r4, #16]
 800a264:	7561      	strb	r1, [r4, #21]
 800a266:	7da0      	ldrb	r0, [r4, #22]
 800a268:	f080 0001 	eor.w	r0, r0, #1
 800a26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	e7ef      	b.n	800a256 <ucdr_deserialize_int32_t+0xb6>
 800a276:	68a2      	ldr	r2, [r4, #8]
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	7da0      	ldrb	r0, [r4, #22]
 800a27c:	f884 8015 	strb.w	r8, [r4, #21]
 800a280:	1bd2      	subs	r2, r2, r7
 800a282:	1bdb      	subs	r3, r3, r7
 800a284:	60a2      	str	r2, [r4, #8]
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	f080 0001 	eor.w	r0, r0, #1
 800a28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	789b      	ldrb	r3, [r3, #2]
 800a294:	706b      	strb	r3, [r5, #1]
 800a296:	1cab      	adds	r3, r5, #2
 800a298:	68a2      	ldr	r2, [r4, #8]
 800a29a:	7852      	ldrb	r2, [r2, #1]
 800a29c:	f803 2b01 	strb.w	r2, [r3], #1
 800a2a0:	68a2      	ldr	r2, [r4, #8]
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	e7b4      	b.n	800a212 <ucdr_deserialize_int32_t+0x72>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	463a      	mov	r2, r7
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f007 fcac 	bl	8011c0a <memcpy>
 800a2b2:	68a1      	ldr	r1, [r4, #8]
 800a2b4:	464a      	mov	r2, r9
 800a2b6:	19e8      	adds	r0, r5, r7
 800a2b8:	f007 fca7 	bl	8011c0a <memcpy>
 800a2bc:	e7a9      	b.n	800a212 <ucdr_deserialize_int32_t+0x72>
 800a2be:	bf00      	nop

0800a2c0 <ucdr_serialize_float>:
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	2104      	movs	r1, #4
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a2ce:	f000 faad 	bl	800a82c <ucdr_buffer_alignment>
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	7d67      	ldrb	r7, [r4, #21]
 800a2d8:	f000 faec 	bl	800a8b4 <ucdr_advance_buffer>
 800a2dc:	4620      	mov	r0, r4
 800a2de:	2104      	movs	r1, #4
 800a2e0:	f000 fa46 	bl	800a770 <ucdr_check_buffer_available_for>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d139      	bne.n	800a35c <ucdr_serialize_float+0x9c>
 800a2e8:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800a2ec:	42ae      	cmp	r6, r5
 800a2ee:	d930      	bls.n	800a352 <ucdr_serialize_float+0x92>
 800a2f0:	6922      	ldr	r2, [r4, #16]
 800a2f2:	60a6      	str	r6, [r4, #8]
 800a2f4:	1b76      	subs	r6, r6, r5
 800a2f6:	4432      	add	r2, r6
 800a2f8:	f1c6 0804 	rsb	r8, r6, #4
 800a2fc:	6122      	str	r2, [r4, #16]
 800a2fe:	4641      	mov	r1, r8
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fa41 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a306:	2800      	cmp	r0, #0
 800a308:	d04c      	beq.n	800a3a4 <ucdr_serialize_float+0xe4>
 800a30a:	7d23      	ldrb	r3, [r4, #20]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d063      	beq.n	800a3d8 <ucdr_serialize_float+0x118>
 800a310:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a314:	702b      	strb	r3, [r5, #0]
 800a316:	2e00      	cmp	r6, #0
 800a318:	d051      	beq.n	800a3be <ucdr_serialize_float+0xfe>
 800a31a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a31e:	706b      	strb	r3, [r5, #1]
 800a320:	2e01      	cmp	r6, #1
 800a322:	d050      	beq.n	800a3c6 <ucdr_serialize_float+0x106>
 800a324:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a328:	70ab      	strb	r3, [r5, #2]
 800a32a:	2e02      	cmp	r6, #2
 800a32c:	d04f      	beq.n	800a3ce <ucdr_serialize_float+0x10e>
 800a32e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a332:	70eb      	strb	r3, [r5, #3]
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	68a2      	ldr	r2, [r4, #8]
 800a338:	7da0      	ldrb	r0, [r4, #22]
 800a33a:	3304      	adds	r3, #4
 800a33c:	1b9b      	subs	r3, r3, r6
 800a33e:	4442      	add	r2, r8
 800a340:	2104      	movs	r1, #4
 800a342:	f080 0001 	eor.w	r0, r0, #1
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	60a2      	str	r2, [r4, #8]
 800a34a:	7561      	strb	r1, [r4, #21]
 800a34c:	b002      	add	sp, #8
 800a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a352:	2104      	movs	r1, #4
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fa17 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a35a:	b1d0      	cbz	r0, 800a392 <ucdr_serialize_float+0xd2>
 800a35c:	7d23      	ldrb	r3, [r4, #20]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	68a3      	ldr	r3, [r4, #8]
 800a362:	d01c      	beq.n	800a39e <ucdr_serialize_float+0xde>
 800a364:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a368:	701a      	strb	r2, [r3, #0]
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a370:	705a      	strb	r2, [r3, #1]
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a378:	709a      	strb	r2, [r3, #2]
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a380:	70da      	strb	r2, [r3, #3]
 800a382:	68a2      	ldr	r2, [r4, #8]
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	3204      	adds	r2, #4
 800a388:	3304      	adds	r3, #4
 800a38a:	2104      	movs	r1, #4
 800a38c:	60a2      	str	r2, [r4, #8]
 800a38e:	6123      	str	r3, [r4, #16]
 800a390:	7561      	strb	r1, [r4, #21]
 800a392:	7da0      	ldrb	r0, [r4, #22]
 800a394:	f080 0001 	eor.w	r0, r0, #1
 800a398:	b002      	add	sp, #8
 800a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39e:	9a01      	ldr	r2, [sp, #4]
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	e7ee      	b.n	800a382 <ucdr_serialize_float+0xc2>
 800a3a4:	68a2      	ldr	r2, [r4, #8]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	7da0      	ldrb	r0, [r4, #22]
 800a3aa:	7567      	strb	r7, [r4, #21]
 800a3ac:	1b92      	subs	r2, r2, r6
 800a3ae:	1b9b      	subs	r3, r3, r6
 800a3b0:	f080 0001 	eor.w	r0, r0, #1
 800a3b4:	60a2      	str	r2, [r4, #8]
 800a3b6:	6123      	str	r3, [r4, #16]
 800a3b8:	b002      	add	sp, #8
 800a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3be:	68a3      	ldr	r3, [r4, #8]
 800a3c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	68a3      	ldr	r3, [r4, #8]
 800a3c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	68a3      	ldr	r3, [r4, #8]
 800a3d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	e7ad      	b.n	800a334 <ucdr_serialize_float+0x74>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	ad01      	add	r5, sp, #4
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4632      	mov	r2, r6
 800a3e0:	f007 fc13 	bl	8011c0a <memcpy>
 800a3e4:	68a0      	ldr	r0, [r4, #8]
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	19a9      	adds	r1, r5, r6
 800a3ea:	f007 fc0e 	bl	8011c0a <memcpy>
 800a3ee:	e7a1      	b.n	800a334 <ucdr_serialize_float+0x74>

0800a3f0 <ucdr_serialize_endian_float>:
 800a3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a400:	f000 fa14 	bl	800a82c <ucdr_buffer_alignment>
 800a404:	4601      	mov	r1, r0
 800a406:	4620      	mov	r0, r4
 800a408:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a40c:	f000 fa52 	bl	800a8b4 <ucdr_advance_buffer>
 800a410:	4620      	mov	r0, r4
 800a412:	2104      	movs	r1, #4
 800a414:	f000 f9ac 	bl	800a770 <ucdr_check_buffer_available_for>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d138      	bne.n	800a48e <ucdr_serialize_endian_float+0x9e>
 800a41c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a420:	42b7      	cmp	r7, r6
 800a422:	d92f      	bls.n	800a484 <ucdr_serialize_endian_float+0x94>
 800a424:	6922      	ldr	r2, [r4, #16]
 800a426:	60a7      	str	r7, [r4, #8]
 800a428:	1bbf      	subs	r7, r7, r6
 800a42a:	443a      	add	r2, r7
 800a42c:	f1c7 0904 	rsb	r9, r7, #4
 800a430:	6122      	str	r2, [r4, #16]
 800a432:	4649      	mov	r1, r9
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f9a7 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d04a      	beq.n	800a4d4 <ucdr_serialize_endian_float+0xe4>
 800a43e:	2d01      	cmp	r5, #1
 800a440:	d063      	beq.n	800a50a <ucdr_serialize_endian_float+0x11a>
 800a442:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a446:	7033      	strb	r3, [r6, #0]
 800a448:	2f00      	cmp	r7, #0
 800a44a:	d051      	beq.n	800a4f0 <ucdr_serialize_endian_float+0x100>
 800a44c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a450:	7073      	strb	r3, [r6, #1]
 800a452:	2f01      	cmp	r7, #1
 800a454:	d050      	beq.n	800a4f8 <ucdr_serialize_endian_float+0x108>
 800a456:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a45a:	70b3      	strb	r3, [r6, #2]
 800a45c:	2f02      	cmp	r7, #2
 800a45e:	d04f      	beq.n	800a500 <ucdr_serialize_endian_float+0x110>
 800a460:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a464:	70f3      	strb	r3, [r6, #3]
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	68a2      	ldr	r2, [r4, #8]
 800a46a:	7da0      	ldrb	r0, [r4, #22]
 800a46c:	3304      	adds	r3, #4
 800a46e:	1bdb      	subs	r3, r3, r7
 800a470:	444a      	add	r2, r9
 800a472:	2104      	movs	r1, #4
 800a474:	f080 0001 	eor.w	r0, r0, #1
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	60a2      	str	r2, [r4, #8]
 800a47c:	7561      	strb	r1, [r4, #21]
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a484:	2104      	movs	r1, #4
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f97e 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a48c:	b1c8      	cbz	r0, 800a4c2 <ucdr_serialize_endian_float+0xd2>
 800a48e:	2d01      	cmp	r5, #1
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	d01c      	beq.n	800a4ce <ucdr_serialize_endian_float+0xde>
 800a494:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4a0:	705a      	strb	r2, [r3, #1]
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4a8:	709a      	strb	r2, [r3, #2]
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a4b0:	70da      	strb	r2, [r3, #3]
 800a4b2:	68a2      	ldr	r2, [r4, #8]
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	3204      	adds	r2, #4
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	60a2      	str	r2, [r4, #8]
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	7561      	strb	r1, [r4, #21]
 800a4c2:	7da0      	ldrb	r0, [r4, #22]
 800a4c4:	f080 0001 	eor.w	r0, r0, #1
 800a4c8:	b003      	add	sp, #12
 800a4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	9a01      	ldr	r2, [sp, #4]
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	e7ee      	b.n	800a4b2 <ucdr_serialize_endian_float+0xc2>
 800a4d4:	68a2      	ldr	r2, [r4, #8]
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	7da0      	ldrb	r0, [r4, #22]
 800a4da:	f884 8015 	strb.w	r8, [r4, #21]
 800a4de:	1bd2      	subs	r2, r2, r7
 800a4e0:	1bdb      	subs	r3, r3, r7
 800a4e2:	f080 0001 	eor.w	r0, r0, #1
 800a4e6:	60a2      	str	r2, [r4, #8]
 800a4e8:	6123      	str	r3, [r4, #16]
 800a4ea:	b003      	add	sp, #12
 800a4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f0:	68a3      	ldr	r3, [r4, #8]
 800a4f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	68a3      	ldr	r3, [r4, #8]
 800a4fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	68a3      	ldr	r3, [r4, #8]
 800a502:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a506:	701a      	strb	r2, [r3, #0]
 800a508:	e7ad      	b.n	800a466 <ucdr_serialize_endian_float+0x76>
 800a50a:	ad01      	add	r5, sp, #4
 800a50c:	4629      	mov	r1, r5
 800a50e:	463a      	mov	r2, r7
 800a510:	4630      	mov	r0, r6
 800a512:	f007 fb7a 	bl	8011c0a <memcpy>
 800a516:	68a0      	ldr	r0, [r4, #8]
 800a518:	464a      	mov	r2, r9
 800a51a:	19e9      	adds	r1, r5, r7
 800a51c:	f007 fb75 	bl	8011c0a <memcpy>
 800a520:	e7a1      	b.n	800a466 <ucdr_serialize_endian_float+0x76>
 800a522:	bf00      	nop

0800a524 <ucdr_deserialize_float>:
 800a524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a528:	460d      	mov	r5, r1
 800a52a:	2104      	movs	r1, #4
 800a52c:	4604      	mov	r4, r0
 800a52e:	f000 f97d 	bl	800a82c <ucdr_buffer_alignment>
 800a532:	4601      	mov	r1, r0
 800a534:	4620      	mov	r0, r4
 800a536:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a53a:	f000 f9bb 	bl	800a8b4 <ucdr_advance_buffer>
 800a53e:	4620      	mov	r0, r4
 800a540:	2104      	movs	r1, #4
 800a542:	f000 f915 	bl	800a770 <ucdr_check_buffer_available_for>
 800a546:	2800      	cmp	r0, #0
 800a548:	d138      	bne.n	800a5bc <ucdr_deserialize_float+0x98>
 800a54a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800a54e:	42b7      	cmp	r7, r6
 800a550:	d92f      	bls.n	800a5b2 <ucdr_deserialize_float+0x8e>
 800a552:	6922      	ldr	r2, [r4, #16]
 800a554:	60a7      	str	r7, [r4, #8]
 800a556:	1bbf      	subs	r7, r7, r6
 800a558:	443a      	add	r2, r7
 800a55a:	f1c7 0904 	rsb	r9, r7, #4
 800a55e:	6122      	str	r2, [r4, #16]
 800a560:	4649      	mov	r1, r9
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f910 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d046      	beq.n	800a5fa <ucdr_deserialize_float+0xd6>
 800a56c:	7d23      	ldrb	r3, [r4, #20]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d05c      	beq.n	800a62c <ucdr_deserialize_float+0x108>
 800a572:	78f3      	ldrb	r3, [r6, #3]
 800a574:	702b      	strb	r3, [r5, #0]
 800a576:	2f00      	cmp	r7, #0
 800a578:	d04c      	beq.n	800a614 <ucdr_deserialize_float+0xf0>
 800a57a:	78b3      	ldrb	r3, [r6, #2]
 800a57c:	706b      	strb	r3, [r5, #1]
 800a57e:	2f01      	cmp	r7, #1
 800a580:	f105 0302 	add.w	r3, r5, #2
 800a584:	d04a      	beq.n	800a61c <ucdr_deserialize_float+0xf8>
 800a586:	7873      	ldrb	r3, [r6, #1]
 800a588:	70ab      	strb	r3, [r5, #2]
 800a58a:	2f02      	cmp	r7, #2
 800a58c:	f105 0303 	add.w	r3, r5, #3
 800a590:	d048      	beq.n	800a624 <ucdr_deserialize_float+0x100>
 800a592:	7833      	ldrb	r3, [r6, #0]
 800a594:	70eb      	strb	r3, [r5, #3]
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	68a2      	ldr	r2, [r4, #8]
 800a59a:	7da0      	ldrb	r0, [r4, #22]
 800a59c:	2104      	movs	r1, #4
 800a59e:	3304      	adds	r3, #4
 800a5a0:	1bdb      	subs	r3, r3, r7
 800a5a2:	444a      	add	r2, r9
 800a5a4:	7561      	strb	r1, [r4, #21]
 800a5a6:	6123      	str	r3, [r4, #16]
 800a5a8:	60a2      	str	r2, [r4, #8]
 800a5aa:	f080 0001 	eor.w	r0, r0, #1
 800a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	2104      	movs	r1, #4
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 f8e7 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a5ba:	b1b0      	cbz	r0, 800a5ea <ucdr_deserialize_float+0xc6>
 800a5bc:	7d23      	ldrb	r3, [r4, #20]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	68a3      	ldr	r3, [r4, #8]
 800a5c2:	d017      	beq.n	800a5f4 <ucdr_deserialize_float+0xd0>
 800a5c4:	78db      	ldrb	r3, [r3, #3]
 800a5c6:	702b      	strb	r3, [r5, #0]
 800a5c8:	68a3      	ldr	r3, [r4, #8]
 800a5ca:	789b      	ldrb	r3, [r3, #2]
 800a5cc:	706b      	strb	r3, [r5, #1]
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	785b      	ldrb	r3, [r3, #1]
 800a5d2:	70ab      	strb	r3, [r5, #2]
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	70eb      	strb	r3, [r5, #3]
 800a5da:	68a2      	ldr	r2, [r4, #8]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	3204      	adds	r2, #4
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	2104      	movs	r1, #4
 800a5e4:	60a2      	str	r2, [r4, #8]
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	7561      	strb	r1, [r4, #21]
 800a5ea:	7da0      	ldrb	r0, [r4, #22]
 800a5ec:	f080 0001 	eor.w	r0, r0, #1
 800a5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	e7ef      	b.n	800a5da <ucdr_deserialize_float+0xb6>
 800a5fa:	68a2      	ldr	r2, [r4, #8]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	7da0      	ldrb	r0, [r4, #22]
 800a600:	f884 8015 	strb.w	r8, [r4, #21]
 800a604:	1bd2      	subs	r2, r2, r7
 800a606:	1bdb      	subs	r3, r3, r7
 800a608:	60a2      	str	r2, [r4, #8]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	f080 0001 	eor.w	r0, r0, #1
 800a610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	706b      	strb	r3, [r5, #1]
 800a61a:	1cab      	adds	r3, r5, #2
 800a61c:	68a2      	ldr	r2, [r4, #8]
 800a61e:	7852      	ldrb	r2, [r2, #1]
 800a620:	f803 2b01 	strb.w	r2, [r3], #1
 800a624:	68a2      	ldr	r2, [r4, #8]
 800a626:	7812      	ldrb	r2, [r2, #0]
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	e7b4      	b.n	800a596 <ucdr_deserialize_float+0x72>
 800a62c:	4631      	mov	r1, r6
 800a62e:	463a      	mov	r2, r7
 800a630:	4628      	mov	r0, r5
 800a632:	f007 faea 	bl	8011c0a <memcpy>
 800a636:	68a1      	ldr	r1, [r4, #8]
 800a638:	464a      	mov	r2, r9
 800a63a:	19e8      	adds	r0, r5, r7
 800a63c:	f007 fae5 	bl	8011c0a <memcpy>
 800a640:	e7a9      	b.n	800a596 <ucdr_deserialize_float+0x72>
 800a642:	bf00      	nop

0800a644 <ucdr_deserialize_endian_float>:
 800a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a648:	460e      	mov	r6, r1
 800a64a:	2104      	movs	r1, #4
 800a64c:	4604      	mov	r4, r0
 800a64e:	4615      	mov	r5, r2
 800a650:	f000 f8ec 	bl	800a82c <ucdr_buffer_alignment>
 800a654:	4601      	mov	r1, r0
 800a656:	4620      	mov	r0, r4
 800a658:	f894 9015 	ldrb.w	r9, [r4, #21]
 800a65c:	f000 f92a 	bl	800a8b4 <ucdr_advance_buffer>
 800a660:	4620      	mov	r0, r4
 800a662:	2104      	movs	r1, #4
 800a664:	f000 f884 	bl	800a770 <ucdr_check_buffer_available_for>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d13c      	bne.n	800a6e6 <ucdr_deserialize_endian_float+0xa2>
 800a66c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800a670:	42bb      	cmp	r3, r7
 800a672:	d933      	bls.n	800a6dc <ucdr_deserialize_endian_float+0x98>
 800a674:	6922      	ldr	r2, [r4, #16]
 800a676:	60a3      	str	r3, [r4, #8]
 800a678:	eba3 0807 	sub.w	r8, r3, r7
 800a67c:	4442      	add	r2, r8
 800a67e:	f1c8 0a04 	rsb	sl, r8, #4
 800a682:	6122      	str	r2, [r4, #16]
 800a684:	4651      	mov	r1, sl
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f87e 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d048      	beq.n	800a722 <ucdr_deserialize_endian_float+0xde>
 800a690:	2e01      	cmp	r6, #1
 800a692:	d061      	beq.n	800a758 <ucdr_deserialize_endian_float+0x114>
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	702b      	strb	r3, [r5, #0]
 800a698:	f1b8 0f00 	cmp.w	r8, #0
 800a69c:	d050      	beq.n	800a740 <ucdr_deserialize_endian_float+0xfc>
 800a69e:	78bb      	ldrb	r3, [r7, #2]
 800a6a0:	706b      	strb	r3, [r5, #1]
 800a6a2:	f1b8 0f01 	cmp.w	r8, #1
 800a6a6:	f105 0302 	add.w	r3, r5, #2
 800a6aa:	d04d      	beq.n	800a748 <ucdr_deserialize_endian_float+0x104>
 800a6ac:	787b      	ldrb	r3, [r7, #1]
 800a6ae:	70ab      	strb	r3, [r5, #2]
 800a6b0:	f1b8 0f02 	cmp.w	r8, #2
 800a6b4:	f105 0303 	add.w	r3, r5, #3
 800a6b8:	d04a      	beq.n	800a750 <ucdr_deserialize_endian_float+0x10c>
 800a6ba:	783b      	ldrb	r3, [r7, #0]
 800a6bc:	70eb      	strb	r3, [r5, #3]
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	68a2      	ldr	r2, [r4, #8]
 800a6c2:	7da0      	ldrb	r0, [r4, #22]
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	eba3 0308 	sub.w	r3, r3, r8
 800a6cc:	4452      	add	r2, sl
 800a6ce:	7561      	strb	r1, [r4, #21]
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	60a2      	str	r2, [r4, #8]
 800a6d4:	f080 0001 	eor.w	r0, r0, #1
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	2104      	movs	r1, #4
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f852 	bl	800a788 <ucdr_check_final_buffer_behavior>
 800a6e4:	b1a8      	cbz	r0, 800a712 <ucdr_deserialize_endian_float+0xce>
 800a6e6:	2e01      	cmp	r6, #1
 800a6e8:	68a3      	ldr	r3, [r4, #8]
 800a6ea:	d017      	beq.n	800a71c <ucdr_deserialize_endian_float+0xd8>
 800a6ec:	78db      	ldrb	r3, [r3, #3]
 800a6ee:	702b      	strb	r3, [r5, #0]
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	789b      	ldrb	r3, [r3, #2]
 800a6f4:	706b      	strb	r3, [r5, #1]
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	70ab      	strb	r3, [r5, #2]
 800a6fc:	68a3      	ldr	r3, [r4, #8]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	70eb      	strb	r3, [r5, #3]
 800a702:	68a2      	ldr	r2, [r4, #8]
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	3204      	adds	r2, #4
 800a708:	3304      	adds	r3, #4
 800a70a:	2104      	movs	r1, #4
 800a70c:	60a2      	str	r2, [r4, #8]
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	7561      	strb	r1, [r4, #21]
 800a712:	7da0      	ldrb	r0, [r4, #22]
 800a714:	f080 0001 	eor.w	r0, r0, #1
 800a718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	e7ef      	b.n	800a702 <ucdr_deserialize_endian_float+0xbe>
 800a722:	68a2      	ldr	r2, [r4, #8]
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	7da0      	ldrb	r0, [r4, #22]
 800a728:	f884 9015 	strb.w	r9, [r4, #21]
 800a72c:	eba2 0208 	sub.w	r2, r2, r8
 800a730:	eba3 0308 	sub.w	r3, r3, r8
 800a734:	60a2      	str	r2, [r4, #8]
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	f080 0001 	eor.w	r0, r0, #1
 800a73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a740:	68a3      	ldr	r3, [r4, #8]
 800a742:	789b      	ldrb	r3, [r3, #2]
 800a744:	706b      	strb	r3, [r5, #1]
 800a746:	1cab      	adds	r3, r5, #2
 800a748:	68a2      	ldr	r2, [r4, #8]
 800a74a:	7852      	ldrb	r2, [r2, #1]
 800a74c:	f803 2b01 	strb.w	r2, [r3], #1
 800a750:	68a2      	ldr	r2, [r4, #8]
 800a752:	7812      	ldrb	r2, [r2, #0]
 800a754:	701a      	strb	r2, [r3, #0]
 800a756:	e7b2      	b.n	800a6be <ucdr_deserialize_endian_float+0x7a>
 800a758:	4639      	mov	r1, r7
 800a75a:	4642      	mov	r2, r8
 800a75c:	4628      	mov	r0, r5
 800a75e:	f007 fa54 	bl	8011c0a <memcpy>
 800a762:	68a1      	ldr	r1, [r4, #8]
 800a764:	4652      	mov	r2, sl
 800a766:	eb05 0008 	add.w	r0, r5, r8
 800a76a:	f007 fa4e 	bl	8011c0a <memcpy>
 800a76e:	e7a6      	b.n	800a6be <ucdr_deserialize_endian_float+0x7a>

0800a770 <ucdr_check_buffer_available_for>:
 800a770:	7d83      	ldrb	r3, [r0, #22]
 800a772:	b93b      	cbnz	r3, 800a784 <ucdr_check_buffer_available_for+0x14>
 800a774:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800a778:	4419      	add	r1, r3
 800a77a:	4288      	cmp	r0, r1
 800a77c:	bf34      	ite	cc
 800a77e:	2000      	movcc	r0, #0
 800a780:	2001      	movcs	r0, #1
 800a782:	4770      	bx	lr
 800a784:	2000      	movs	r0, #0
 800a786:	4770      	bx	lr

0800a788 <ucdr_check_final_buffer_behavior>:
 800a788:	7d83      	ldrb	r3, [r0, #22]
 800a78a:	b943      	cbnz	r3, 800a79e <ucdr_check_final_buffer_behavior+0x16>
 800a78c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800a790:	4291      	cmp	r1, r2
 800a792:	b510      	push	{r4, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	d205      	bcs.n	800a7a4 <ucdr_check_final_buffer_behavior+0x1c>
 800a798:	2301      	movs	r3, #1
 800a79a:	4618      	mov	r0, r3
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	4770      	bx	lr
 800a7a4:	6982      	ldr	r2, [r0, #24]
 800a7a6:	b13a      	cbz	r2, 800a7b8 <ucdr_check_final_buffer_behavior+0x30>
 800a7a8:	69c1      	ldr	r1, [r0, #28]
 800a7aa:	4790      	blx	r2
 800a7ac:	f080 0301 	eor.w	r3, r0, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	75a0      	strb	r0, [r4, #22]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	bd10      	pop	{r4, pc}
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	75a0      	strb	r0, [r4, #22]
 800a7bc:	e7fa      	b.n	800a7b4 <ucdr_check_final_buffer_behavior+0x2c>
 800a7be:	bf00      	nop

0800a7c0 <ucdr_set_on_full_buffer_callback>:
 800a7c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop

0800a7c8 <ucdr_init_buffer_origin_offset_endian>:
 800a7c8:	b430      	push	{r4, r5}
 800a7ca:	9c02      	ldr	r4, [sp, #8]
 800a7cc:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800a7d0:	6001      	str	r1, [r0, #0]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	60c3      	str	r3, [r0, #12]
 800a7d6:	4421      	add	r1, r4
 800a7d8:	441c      	add	r4, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6104      	str	r4, [r0, #16]
 800a7de:	7505      	strb	r5, [r0, #20]
 800a7e0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a7e4:	bc30      	pop	{r4, r5}
 800a7e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a7ea:	7543      	strb	r3, [r0, #21]
 800a7ec:	7583      	strb	r3, [r0, #22]
 800a7ee:	4770      	bx	lr

0800a7f0 <ucdr_init_buffer_origin_offset>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	9c04      	ldr	r4, [sp, #16]
 800a7f6:	9400      	str	r4, [sp, #0]
 800a7f8:	2401      	movs	r4, #1
 800a7fa:	9401      	str	r4, [sp, #4]
 800a7fc:	f7ff ffe4 	bl	800a7c8 <ucdr_init_buffer_origin_offset_endian>
 800a800:	b002      	add	sp, #8
 800a802:	bd10      	pop	{r4, pc}

0800a804 <ucdr_init_buffer_origin>:
 800a804:	b510      	push	{r4, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	2400      	movs	r4, #0
 800a80a:	9400      	str	r4, [sp, #0]
 800a80c:	f7ff fff0 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800a810:	b002      	add	sp, #8
 800a812:	bd10      	pop	{r4, pc}

0800a814 <ucdr_init_buffer>:
 800a814:	2300      	movs	r3, #0
 800a816:	f7ff bff5 	b.w	800a804 <ucdr_init_buffer_origin>
 800a81a:	bf00      	nop

0800a81c <ucdr_alignment>:
 800a81c:	fbb0 f3f1 	udiv	r3, r0, r1
 800a820:	fb03 0011 	mls	r0, r3, r1, r0
 800a824:	1a08      	subs	r0, r1, r0
 800a826:	3901      	subs	r1, #1
 800a828:	4008      	ands	r0, r1
 800a82a:	4770      	bx	lr

0800a82c <ucdr_buffer_alignment>:
 800a82c:	7d43      	ldrb	r3, [r0, #21]
 800a82e:	428b      	cmp	r3, r1
 800a830:	d208      	bcs.n	800a844 <ucdr_buffer_alignment+0x18>
 800a832:	6903      	ldr	r3, [r0, #16]
 800a834:	fbb3 f0f1 	udiv	r0, r3, r1
 800a838:	fb01 3010 	mls	r0, r1, r0, r3
 800a83c:	1a08      	subs	r0, r1, r0
 800a83e:	3901      	subs	r1, #1
 800a840:	4008      	ands	r0, r1
 800a842:	4770      	bx	lr
 800a844:	2000      	movs	r0, #0
 800a846:	4770      	bx	lr

0800a848 <ucdr_align_to>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	4604      	mov	r4, r0
 800a84c:	460e      	mov	r6, r1
 800a84e:	f7ff ffed 	bl	800a82c <ucdr_buffer_alignment>
 800a852:	68a5      	ldr	r5, [r4, #8]
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	7566      	strb	r6, [r4, #21]
 800a85a:	4405      	add	r5, r0
 800a85c:	42ab      	cmp	r3, r5
 800a85e:	4410      	add	r0, r2
 800a860:	bf28      	it	cs
 800a862:	462b      	movcs	r3, r5
 800a864:	6120      	str	r0, [r4, #16]
 800a866:	60a3      	str	r3, [r4, #8]
 800a868:	bd70      	pop	{r4, r5, r6, pc}
 800a86a:	bf00      	nop

0800a86c <ucdr_buffer_length>:
 800a86c:	6882      	ldr	r2, [r0, #8]
 800a86e:	6800      	ldr	r0, [r0, #0]
 800a870:	1a10      	subs	r0, r2, r0
 800a872:	4770      	bx	lr

0800a874 <ucdr_buffer_remaining>:
 800a874:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a878:	1a10      	subs	r0, r2, r0
 800a87a:	4770      	bx	lr

0800a87c <ucdr_check_final_buffer_behavior_array>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	7d83      	ldrb	r3, [r0, #22]
 800a880:	b963      	cbnz	r3, 800a89c <ucdr_check_final_buffer_behavior_array+0x20>
 800a882:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	d308      	bcc.n	800a8a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800a88e:	b139      	cbz	r1, 800a8a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800a890:	6983      	ldr	r3, [r0, #24]
 800a892:	b163      	cbz	r3, 800a8ae <ucdr_check_final_buffer_behavior_array+0x32>
 800a894:	69c1      	ldr	r1, [r0, #28]
 800a896:	4798      	blx	r3
 800a898:	75a0      	strb	r0, [r4, #22]
 800a89a:	b108      	cbz	r0, 800a8a0 <ucdr_check_final_buffer_behavior_array+0x24>
 800a89c:	2000      	movs	r0, #0
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7ff ffe7 	bl	800a874 <ucdr_buffer_remaining>
 800a8a6:	42a8      	cmp	r0, r5
 800a8a8:	bf28      	it	cs
 800a8aa:	4628      	movcs	r0, r5
 800a8ac:	bd38      	pop	{r3, r4, r5, pc}
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	7583      	strb	r3, [r0, #22]
 800a8b2:	e7f3      	b.n	800a89c <ucdr_check_final_buffer_behavior_array+0x20>

0800a8b4 <ucdr_advance_buffer>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	f7ff ff59 	bl	800a770 <ucdr_check_buffer_available_for>
 800a8be:	b178      	cbz	r0, 800a8e0 <ucdr_advance_buffer+0x2c>
 800a8c0:	68a3      	ldr	r3, [r4, #8]
 800a8c2:	6921      	ldr	r1, [r4, #16]
 800a8c4:	442b      	add	r3, r5
 800a8c6:	60a3      	str	r3, [r4, #8]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	4429      	add	r1, r5
 800a8cc:	7563      	strb	r3, [r4, #21]
 800a8ce:	6121      	str	r1, [r4, #16]
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	68a2      	ldr	r2, [r4, #8]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	4402      	add	r2, r0
 800a8d8:	4403      	add	r3, r0
 800a8da:	1a2d      	subs	r5, r5, r0
 800a8dc:	60a2      	str	r2, [r4, #8]
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f7ff ffc9 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d1f1      	bne.n	800a8d2 <ucdr_advance_buffer+0x1e>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	7563      	strb	r3, [r4, #21]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}

0800a8f4 <ucdr_serialize_sequence_char>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	460e      	mov	r6, r1
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	7d01      	ldrb	r1, [r0, #20]
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	f7ff f835 	bl	800996c <ucdr_serialize_endian_uint32_t>
 800a902:	b90d      	cbnz	r5, 800a908 <ucdr_serialize_sequence_char+0x14>
 800a904:	2001      	movs	r0, #1
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	7d21      	ldrb	r1, [r4, #20]
 800a90a:	462b      	mov	r3, r5
 800a90c:	4632      	mov	r2, r6
 800a90e:	4620      	mov	r0, r4
 800a910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a914:	f004 bd82 	b.w	800f41c <ucdr_serialize_endian_array_char>

0800a918 <ucdr_deserialize_sequence_char>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	461d      	mov	r5, r3
 800a91e:	4616      	mov	r6, r2
 800a920:	460f      	mov	r7, r1
 800a922:	461a      	mov	r2, r3
 800a924:	7d01      	ldrb	r1, [r0, #20]
 800a926:	4604      	mov	r4, r0
 800a928:	f7ff f948 	bl	8009bbc <ucdr_deserialize_endian_uint32_t>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	429e      	cmp	r6, r3
 800a930:	bf3c      	itt	cc
 800a932:	2201      	movcc	r2, #1
 800a934:	75a2      	strbcc	r2, [r4, #22]
 800a936:	b913      	cbnz	r3, 800a93e <ucdr_deserialize_sequence_char+0x26>
 800a938:	2001      	movs	r0, #1
 800a93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93e:	7d21      	ldrb	r1, [r4, #20]
 800a940:	463a      	mov	r2, r7
 800a942:	4620      	mov	r0, r4
 800a944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	f004 bd9a 	b.w	800f480 <ucdr_deserialize_endian_array_char>

0800a94c <ucdr_serialize_sequence_uint8_t>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	460e      	mov	r6, r1
 800a950:	4615      	mov	r5, r2
 800a952:	7d01      	ldrb	r1, [r0, #20]
 800a954:	4604      	mov	r4, r0
 800a956:	f7ff f809 	bl	800996c <ucdr_serialize_endian_uint32_t>
 800a95a:	b90d      	cbnz	r5, 800a960 <ucdr_serialize_sequence_uint8_t+0x14>
 800a95c:	2001      	movs	r0, #1
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	7d21      	ldrb	r1, [r4, #20]
 800a962:	462b      	mov	r3, r5
 800a964:	4632      	mov	r2, r6
 800a966:	4620      	mov	r0, r4
 800a968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a96c:	f004 bdec 	b.w	800f548 <ucdr_serialize_endian_array_uint8_t>

0800a970 <ucdr_deserialize_sequence_uint8_t>:
 800a970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a974:	461d      	mov	r5, r3
 800a976:	4616      	mov	r6, r2
 800a978:	460f      	mov	r7, r1
 800a97a:	461a      	mov	r2, r3
 800a97c:	7d01      	ldrb	r1, [r0, #20]
 800a97e:	4604      	mov	r4, r0
 800a980:	f7ff f91c 	bl	8009bbc <ucdr_deserialize_endian_uint32_t>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	429e      	cmp	r6, r3
 800a988:	bf3c      	itt	cc
 800a98a:	2201      	movcc	r2, #1
 800a98c:	75a2      	strbcc	r2, [r4, #22]
 800a98e:	b913      	cbnz	r3, 800a996 <ucdr_deserialize_sequence_uint8_t+0x26>
 800a990:	2001      	movs	r0, #1
 800a992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a996:	7d21      	ldrb	r1, [r4, #20]
 800a998:	463a      	mov	r2, r7
 800a99a:	4620      	mov	r0, r4
 800a99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a0:	f004 be36 	b.w	800f610 <ucdr_deserialize_endian_array_uint8_t>

0800a9a4 <ucdr_serialize_sequence_float>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	460e      	mov	r6, r1
 800a9a8:	4615      	mov	r5, r2
 800a9aa:	7d01      	ldrb	r1, [r0, #20]
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	f7fe ffdd 	bl	800996c <ucdr_serialize_endian_uint32_t>
 800a9b2:	b90d      	cbnz	r5, 800a9b8 <ucdr_serialize_sequence_float+0x14>
 800a9b4:	2001      	movs	r0, #1
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	7d21      	ldrb	r1, [r4, #20]
 800a9ba:	462b      	mov	r3, r5
 800a9bc:	4632      	mov	r2, r6
 800a9be:	4620      	mov	r0, r4
 800a9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9c4:	f004 be56 	b.w	800f674 <ucdr_serialize_endian_array_float>

0800a9c8 <ucdr_deserialize_sequence_float>:
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	461d      	mov	r5, r3
 800a9ce:	4616      	mov	r6, r2
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	7d01      	ldrb	r1, [r0, #20]
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	f7ff f8f0 	bl	8009bbc <ucdr_deserialize_endian_uint32_t>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	429e      	cmp	r6, r3
 800a9e0:	bf3c      	itt	cc
 800a9e2:	2201      	movcc	r2, #1
 800a9e4:	75a2      	strbcc	r2, [r4, #22]
 800a9e6:	b913      	cbnz	r3, 800a9ee <ucdr_deserialize_sequence_float+0x26>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ee:	7d21      	ldrb	r1, [r4, #20]
 800a9f0:	463a      	mov	r2, r7
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	f004 be92 	b.w	800f720 <ucdr_deserialize_endian_array_float>

0800a9fc <uxr_buffer_delete_entity>:
 800a9fc:	b530      	push	{r4, r5, lr}
 800a9fe:	b08f      	sub	sp, #60	; 0x3c
 800aa00:	2403      	movs	r4, #3
 800aa02:	2500      	movs	r5, #0
 800aa04:	e9cd 4500 	strd	r4, r5, [sp]
 800aa08:	9202      	str	r2, [sp, #8]
 800aa0a:	ab06      	add	r3, sp, #24
 800aa0c:	2204      	movs	r2, #4
 800aa0e:	9103      	str	r1, [sp, #12]
 800aa10:	4604      	mov	r4, r0
 800aa12:	f001 f87b 	bl	800bb0c <uxr_prepare_stream_to_write_submessage>
 800aa16:	b918      	cbnz	r0, 800aa20 <uxr_buffer_delete_entity+0x24>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	b00f      	add	sp, #60	; 0x3c
 800aa1e:	bd30      	pop	{r4, r5, pc}
 800aa20:	9902      	ldr	r1, [sp, #8]
 800aa22:	aa05      	add	r2, sp, #20
 800aa24:	4620      	mov	r0, r4
 800aa26:	f001 f9ab 	bl	800bd80 <uxr_init_base_object_request>
 800aa2a:	a905      	add	r1, sp, #20
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	a806      	add	r0, sp, #24
 800aa30:	f002 fafa 	bl	800d028 <uxr_serialize_DELETE_Payload>
 800aa34:	4620      	mov	r0, r4
 800aa36:	b00f      	add	sp, #60	; 0x3c
 800aa38:	bd30      	pop	{r4, r5, pc}
 800aa3a:	bf00      	nop

0800aa3c <uxr_common_create_entity>:
 800aa3c:	b530      	push	{r4, r5, lr}
 800aa3e:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800aa42:	b08d      	sub	sp, #52	; 0x34
 800aa44:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800aa48:	2d01      	cmp	r5, #1
 800aa4a:	bf0c      	ite	eq
 800aa4c:	f003 0201 	andeq.w	r2, r3, #1
 800aa50:	2200      	movne	r2, #0
 800aa52:	330e      	adds	r3, #14
 800aa54:	4604      	mov	r4, r0
 800aa56:	441a      	add	r2, r3
 800aa58:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800aa5c:	9001      	str	r0, [sp, #4]
 800aa5e:	2101      	movs	r1, #1
 800aa60:	9100      	str	r1, [sp, #0]
 800aa62:	b292      	uxth	r2, r2
 800aa64:	9903      	ldr	r1, [sp, #12]
 800aa66:	ab04      	add	r3, sp, #16
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f001 f84f 	bl	800bb0c <uxr_prepare_stream_to_write_submessage>
 800aa6e:	b918      	cbnz	r0, 800aa78 <uxr_common_create_entity+0x3c>
 800aa70:	4604      	mov	r4, r0
 800aa72:	4620      	mov	r0, r4
 800aa74:	b00d      	add	sp, #52	; 0x34
 800aa76:	bd30      	pop	{r4, r5, pc}
 800aa78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa7a:	9902      	ldr	r1, [sp, #8]
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f001 f97f 	bl	800bd80 <uxr_init_base_object_request>
 800aa82:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa84:	4604      	mov	r4, r0
 800aa86:	a804      	add	r0, sp, #16
 800aa88:	f002 fa22 	bl	800ced0 <uxr_serialize_CREATE_Payload>
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	b00d      	add	sp, #52	; 0x34
 800aa90:	bd30      	pop	{r4, r5, pc}
 800aa92:	bf00      	nop

0800aa94 <uxr_buffer_create_participant_bin>:
 800aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa96:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800aa9a:	ac11      	add	r4, sp, #68	; 0x44
 800aa9c:	9103      	str	r1, [sp, #12]
 800aa9e:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800aaa0:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800aaa4:	2103      	movs	r1, #3
 800aaa6:	7221      	strb	r1, [r4, #8]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	2100      	movs	r1, #0
 800aaac:	7123      	strb	r3, [r4, #4]
 800aaae:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800aab2:	9202      	str	r2, [sp, #8]
 800aab4:	4605      	mov	r5, r0
 800aab6:	f88d 1014 	strb.w	r1, [sp, #20]
 800aaba:	b1ce      	cbz	r6, 800aaf0 <uxr_buffer_create_participant_bin+0x5c>
 800aabc:	f88d 301c 	strb.w	r3, [sp, #28]
 800aac0:	9608      	str	r6, [sp, #32]
 800aac2:	a809      	add	r0, sp, #36	; 0x24
 800aac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aac8:	a915      	add	r1, sp, #84	; 0x54
 800aaca:	f7ff fea3 	bl	800a814 <ucdr_init_buffer>
 800aace:	a905      	add	r1, sp, #20
 800aad0:	a809      	add	r0, sp, #36	; 0x24
 800aad2:	f001 feb1 	bl	800c838 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800aad6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aad8:	9401      	str	r4, [sp, #4]
 800aada:	b283      	uxth	r3, r0
 800aadc:	9700      	str	r7, [sp, #0]
 800aade:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aae2:	60e0      	str	r0, [r4, #12]
 800aae4:	4628      	mov	r0, r5
 800aae6:	f7ff ffa9 	bl	800aa3c <uxr_common_create_entity>
 800aaea:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800aaee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf0:	f88d 601c 	strb.w	r6, [sp, #28]
 800aaf4:	e7e5      	b.n	800aac2 <uxr_buffer_create_participant_bin+0x2e>
 800aaf6:	bf00      	nop

0800aaf8 <uxr_buffer_create_topic_bin>:
 800aaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafa:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800aafe:	ac13      	add	r4, sp, #76	; 0x4c
 800ab00:	4605      	mov	r5, r0
 800ab02:	9105      	str	r1, [sp, #20]
 800ab04:	4618      	mov	r0, r3
 800ab06:	a997      	add	r1, sp, #604	; 0x25c
 800ab08:	2602      	movs	r6, #2
 800ab0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ab0e:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800ab12:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800ab16:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800ab18:	f000 f8ea 	bl	800acf0 <uxr_object_id_to_raw>
 800ab1c:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800ab1e:	9206      	str	r2, [sp, #24]
 800ab20:	2303      	movs	r3, #3
 800ab22:	2101      	movs	r1, #1
 800ab24:	7223      	strb	r3, [r4, #8]
 800ab26:	a80b      	add	r0, sp, #44	; 0x2c
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab2e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ab32:	a917      	add	r1, sp, #92	; 0x5c
 800ab34:	f88d 301c 	strb.w	r3, [sp, #28]
 800ab38:	960a      	str	r6, [sp, #40]	; 0x28
 800ab3a:	f7ff fe6b 	bl	800a814 <ucdr_init_buffer>
 800ab3e:	a906      	add	r1, sp, #24
 800ab40:	a80b      	add	r0, sp, #44	; 0x2c
 800ab42:	f001 fe9b 	bl	800c87c <uxr_serialize_OBJK_Topic_Binary>
 800ab46:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800ab48:	9401      	str	r4, [sp, #4]
 800ab4a:	9700      	str	r7, [sp, #0]
 800ab4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ab50:	4628      	mov	r0, r5
 800ab52:	b2b3      	uxth	r3, r6
 800ab54:	60e6      	str	r6, [r4, #12]
 800ab56:	f7ff ff71 	bl	800aa3c <uxr_common_create_entity>
 800ab5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ab5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab60 <uxr_buffer_create_publisher_bin>:
 800ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab62:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800ab66:	ac0e      	add	r4, sp, #56	; 0x38
 800ab68:	4605      	mov	r5, r0
 800ab6a:	9105      	str	r1, [sp, #20]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	2603      	movs	r6, #3
 800ab70:	a992      	add	r1, sp, #584	; 0x248
 800ab72:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ab76:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800ab7a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800ab7e:	f000 f8b7 	bl	800acf0 <uxr_object_id_to_raw>
 800ab82:	2300      	movs	r3, #0
 800ab84:	a806      	add	r0, sp, #24
 800ab86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab8a:	a912      	add	r1, sp, #72	; 0x48
 800ab8c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800ab90:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800ab94:	7226      	strb	r6, [r4, #8]
 800ab96:	f7ff fe3d 	bl	800a814 <ucdr_init_buffer>
 800ab9a:	a993      	add	r1, sp, #588	; 0x24c
 800ab9c:	a806      	add	r0, sp, #24
 800ab9e:	f001 ff21 	bl	800c9e4 <uxr_serialize_OBJK_Publisher_Binary>
 800aba2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aba4:	9700      	str	r7, [sp, #0]
 800aba6:	9401      	str	r4, [sp, #4]
 800aba8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800abac:	4628      	mov	r0, r5
 800abae:	b2b3      	uxth	r3, r6
 800abb0:	60e6      	str	r6, [r4, #12]
 800abb2:	f7ff ff43 	bl	800aa3c <uxr_common_create_entity>
 800abb6:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800abba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abbc <uxr_buffer_create_datawriter_bin>:
 800abbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc0:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800abc4:	ac1d      	add	r4, sp, #116	; 0x74
 800abc6:	2505      	movs	r5, #5
 800abc8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	4606      	mov	r6, r0
 800abd0:	a9a1      	add	r1, sp, #644	; 0x284
 800abd2:	4618      	mov	r0, r3
 800abd4:	7125      	strb	r5, [r4, #4]
 800abd6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800abda:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800abde:	2703      	movs	r7, #3
 800abe0:	f000 f886 	bl	800acf0 <uxr_object_id_to_raw>
 800abe4:	a90e      	add	r1, sp, #56	; 0x38
 800abe6:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800abe8:	7227      	strb	r7, [r4, #8]
 800abea:	f000 f881 	bl	800acf0 <uxr_object_id_to_raw>
 800abee:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800abf2:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800abf6:	3d00      	subs	r5, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	bf18      	it	ne
 800abfe:	2501      	movne	r5, #1
 800ac00:	2201      	movs	r2, #1
 800ac02:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800ac06:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ac0a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800ac0e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800ac12:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800ac16:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ac1a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ac1e:	bb89      	cbnz	r1, 800ac84 <uxr_buffer_create_datawriter_bin+0xc8>
 800ac20:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ac24:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800ac28:	f04f 0c13 	mov.w	ip, #19
 800ac2c:	250b      	movs	r5, #11
 800ac2e:	2221      	movs	r2, #33	; 0x21
 800ac30:	2111      	movs	r1, #17
 800ac32:	2009      	movs	r0, #9
 800ac34:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800ac38:	b923      	cbnz	r3, 800ac44 <uxr_buffer_create_datawriter_bin+0x88>
 800ac3a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800ac3e:	4672      	mov	r2, lr
 800ac40:	4661      	mov	r1, ip
 800ac42:	4628      	mov	r0, r5
 800ac44:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d025      	beq.n	800ac98 <uxr_buffer_create_datawriter_bin+0xdc>
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d029      	beq.n	800aca4 <uxr_buffer_create_datawriter_bin+0xe8>
 800ac50:	b32b      	cbz	r3, 800ac9e <uxr_buffer_create_datawriter_bin+0xe2>
 800ac52:	a806      	add	r0, sp, #24
 800ac54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac58:	a921      	add	r1, sp, #132	; 0x84
 800ac5a:	f7ff fddb 	bl	800a814 <ucdr_init_buffer>
 800ac5e:	a90e      	add	r1, sp, #56	; 0x38
 800ac60:	a806      	add	r0, sp, #24
 800ac62:	f001 ff35 	bl	800cad0 <uxr_serialize_OBJK_DataWriter_Binary>
 800ac66:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac68:	9401      	str	r4, [sp, #4]
 800ac6a:	b283      	uxth	r3, r0
 800ac6c:	f8cd 8000 	str.w	r8, [sp]
 800ac70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ac74:	60e0      	str	r0, [r4, #12]
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7ff fee0 	bl	800aa3c <uxr_common_create_entity>
 800ac7c:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ac80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac84:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800ac88:	f04f 0c12 	mov.w	ip, #18
 800ac8c:	250a      	movs	r5, #10
 800ac8e:	2220      	movs	r2, #32
 800ac90:	2110      	movs	r1, #16
 800ac92:	2008      	movs	r0, #8
 800ac94:	2702      	movs	r7, #2
 800ac96:	e7cd      	b.n	800ac34 <uxr_buffer_create_datawriter_bin+0x78>
 800ac98:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ac9c:	e7d9      	b.n	800ac52 <uxr_buffer_create_datawriter_bin+0x96>
 800ac9e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800aca2:	e7d6      	b.n	800ac52 <uxr_buffer_create_datawriter_bin+0x96>
 800aca4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800aca8:	e7d3      	b.n	800ac52 <uxr_buffer_create_datawriter_bin+0x96>
 800acaa:	bf00      	nop

0800acac <uxr_object_id>:
 800acac:	b082      	sub	sp, #8
 800acae:	2300      	movs	r3, #0
 800acb0:	f88d 1006 	strb.w	r1, [sp, #6]
 800acb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800acb8:	f360 030f 	bfi	r3, r0, #0, #16
 800acbc:	f362 431f 	bfi	r3, r2, #16, #16
 800acc0:	4618      	mov	r0, r3
 800acc2:	b002      	add	sp, #8
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop

0800acc8 <uxr_object_id_from_raw>:
 800acc8:	7843      	ldrb	r3, [r0, #1]
 800acca:	7801      	ldrb	r1, [r0, #0]
 800accc:	b082      	sub	sp, #8
 800acce:	f003 000f 	and.w	r0, r3, #15
 800acd2:	f88d 0006 	strb.w	r0, [sp, #6]
 800acd6:	091b      	lsrs	r3, r3, #4
 800acd8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800acdc:	2200      	movs	r2, #0
 800acde:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800ace2:	f363 020f 	bfi	r2, r3, #0, #16
 800ace6:	f361 421f 	bfi	r2, r1, #16, #16
 800acea:	4610      	mov	r0, r2
 800acec:	b002      	add	sp, #8
 800acee:	4770      	bx	lr

0800acf0 <uxr_object_id_to_raw>:
 800acf0:	4602      	mov	r2, r0
 800acf2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800acf6:	b082      	sub	sp, #8
 800acf8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800acfc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800ad00:	700a      	strb	r2, [r1, #0]
 800ad02:	704b      	strb	r3, [r1, #1]
 800ad04:	b002      	add	sp, #8
 800ad06:	4770      	bx	lr

0800ad08 <on_get_fragmentation_info>:
 800ad08:	b500      	push	{lr}
 800ad0a:	b08b      	sub	sp, #44	; 0x2c
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	2204      	movs	r2, #4
 800ad10:	a802      	add	r0, sp, #8
 800ad12:	f7ff fd7f 	bl	800a814 <ucdr_init_buffer>
 800ad16:	f10d 0305 	add.w	r3, sp, #5
 800ad1a:	a802      	add	r0, sp, #8
 800ad1c:	f10d 0206 	add.w	r2, sp, #6
 800ad20:	a901      	add	r1, sp, #4
 800ad22:	f001 f9b1 	bl	800c088 <uxr_read_submessage_header>
 800ad26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad2a:	2b0d      	cmp	r3, #13
 800ad2c:	d003      	beq.n	800ad36 <on_get_fragmentation_info+0x2e>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	b00b      	add	sp, #44	; 0x2c
 800ad32:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad3a:	f013 0f02 	tst.w	r3, #2
 800ad3e:	bf14      	ite	ne
 800ad40:	2002      	movne	r0, #2
 800ad42:	2001      	moveq	r0, #1
 800ad44:	b00b      	add	sp, #44	; 0x2c
 800ad46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad4a:	bf00      	nop

0800ad4c <read_submessage_get_info>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	2500      	movs	r5, #0
 800ad50:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800ad54:	4604      	mov	r4, r0
 800ad56:	f44f 7224 	mov.w	r2, #656	; 0x290
 800ad5a:	460e      	mov	r6, r1
 800ad5c:	a810      	add	r0, sp, #64	; 0x40
 800ad5e:	4629      	mov	r1, r5
 800ad60:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ad64:	f006 fe88 	bl	8011a78 <memset>
 800ad68:	a903      	add	r1, sp, #12
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f002 f948 	bl	800d000 <uxr_deserialize_GET_INFO_Payload>
 800ad70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ad74:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f000 fff9 	bl	800bd70 <uxr_session_header_offset>
 800ad7e:	462b      	mov	r3, r5
 800ad80:	9000      	str	r0, [sp, #0]
 800ad82:	a905      	add	r1, sp, #20
 800ad84:	a808      	add	r0, sp, #32
 800ad86:	220c      	movs	r2, #12
 800ad88:	f7ff fd32 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800ad8c:	a910      	add	r1, sp, #64	; 0x40
 800ad8e:	a808      	add	r0, sp, #32
 800ad90:	f002 f9a8 	bl	800d0e4 <uxr_serialize_INFO_Payload>
 800ad94:	9b08      	ldr	r3, [sp, #32]
 800ad96:	462a      	mov	r2, r5
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 ff90 	bl	800bcc0 <uxr_stamp_session_header>
 800ada0:	a808      	add	r0, sp, #32
 800ada2:	f7ff fd63 	bl	800a86c <ucdr_buffer_length>
 800ada6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ada8:	4602      	mov	r2, r0
 800adaa:	a905      	add	r1, sp, #20
 800adac:	e9d3 0400 	ldrd	r0, r4, [r3]
 800adb0:	47a0      	blx	r4
 800adb2:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800adb6:	bd70      	pop	{r4, r5, r6, pc}

0800adb8 <write_submessage_acknack.isra.0>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	b092      	sub	sp, #72	; 0x48
 800adbc:	4605      	mov	r5, r0
 800adbe:	460e      	mov	r6, r1
 800adc0:	4614      	mov	r4, r2
 800adc2:	f000 ffd5 	bl	800bd70 <uxr_session_header_offset>
 800adc6:	a905      	add	r1, sp, #20
 800adc8:	9000      	str	r0, [sp, #0]
 800adca:	2300      	movs	r3, #0
 800adcc:	a80a      	add	r0, sp, #40	; 0x28
 800adce:	2211      	movs	r2, #17
 800add0:	f7ff fd0e 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800add4:	2218      	movs	r2, #24
 800add6:	fb02 5404 	mla	r4, r2, r4, r5
 800adda:	2300      	movs	r3, #0
 800addc:	2205      	movs	r2, #5
 800adde:	3450      	adds	r4, #80	; 0x50
 800ade0:	a80a      	add	r0, sp, #40	; 0x28
 800ade2:	210a      	movs	r1, #10
 800ade4:	f001 f936 	bl	800c054 <uxr_buffer_submessage_header>
 800ade8:	a903      	add	r1, sp, #12
 800adea:	4620      	mov	r0, r4
 800adec:	f004 ff5c 	bl	800fca8 <uxr_compute_acknack>
 800adf0:	a903      	add	r1, sp, #12
 800adf2:	ba43      	rev16	r3, r0
 800adf4:	a80a      	add	r0, sp, #40	; 0x28
 800adf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800adfa:	f88d 6010 	strb.w	r6, [sp, #16]
 800adfe:	f002 f9e1 	bl	800d1c4 <uxr_serialize_ACKNACK_Payload>
 800ae02:	2200      	movs	r2, #0
 800ae04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae06:	4611      	mov	r1, r2
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 ff59 	bl	800bcc0 <uxr_stamp_session_header>
 800ae0e:	a80a      	add	r0, sp, #40	; 0x28
 800ae10:	f7ff fd2c 	bl	800a86c <ucdr_buffer_length>
 800ae14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ae16:	4602      	mov	r2, r0
 800ae18:	a905      	add	r1, sp, #20
 800ae1a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ae1e:	47a0      	blx	r4
 800ae20:	b012      	add	sp, #72	; 0x48
 800ae22:	bd70      	pop	{r4, r5, r6, pc}

0800ae24 <uxr_init_session>:
 800ae24:	b5d0      	push	{r4, r6, r7, lr}
 800ae26:	2300      	movs	r3, #0
 800ae28:	2600      	movs	r6, #0
 800ae2a:	2700      	movs	r7, #0
 800ae2c:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800ae30:	4604      	mov	r4, r0
 800ae32:	6701      	str	r1, [r0, #112]	; 0x70
 800ae34:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800ae38:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800ae3c:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800ae40:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800ae44:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800ae48:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800ae4c:	2181      	movs	r1, #129	; 0x81
 800ae4e:	f000 fea1 	bl	800bb94 <uxr_init_session_info>
 800ae52:	f104 0008 	add.w	r0, r4, #8
 800ae56:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800ae5a:	f001 b817 	b.w	800be8c <uxr_init_stream_storage>
 800ae5e:	bf00      	nop

0800ae60 <uxr_set_status_callback>:
 800ae60:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop

0800ae68 <uxr_set_topic_callback>:
 800ae68:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop

0800ae70 <uxr_set_request_callback>:
 800ae70:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop

0800ae78 <uxr_set_reply_callback>:
 800ae78:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop

0800ae80 <uxr_create_output_best_effort_stream>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	e9cd 2100 	strd	r2, r1, [sp]
 800ae88:	4604      	mov	r4, r0
 800ae8a:	f000 ff71 	bl	800bd70 <uxr_session_header_offset>
 800ae8e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ae92:	4603      	mov	r3, r0
 800ae94:	f104 0008 	add.w	r0, r4, #8
 800ae98:	b004      	add	sp, #16
 800ae9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9e:	f001 b83f 	b.w	800bf20 <uxr_add_output_best_effort_buffer>
 800aea2:	bf00      	nop

0800aea4 <uxr_create_output_reliable_stream>:
 800aea4:	b530      	push	{r4, r5, lr}
 800aea6:	b089      	sub	sp, #36	; 0x24
 800aea8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800aeac:	9303      	str	r3, [sp, #12]
 800aeae:	4604      	mov	r4, r0
 800aeb0:	f000 ff5e 	bl	800bd70 <uxr_session_header_offset>
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800aeba:	9905      	ldr	r1, [sp, #20]
 800aebc:	9500      	str	r5, [sp, #0]
 800aebe:	f104 0008 	add.w	r0, r4, #8
 800aec2:	f001 f83f 	bl	800bf44 <uxr_add_output_reliable_buffer>
 800aec6:	2200      	movs	r2, #0
 800aec8:	b2c3      	uxtb	r3, r0
 800aeca:	f363 0207 	bfi	r2, r3, #0, #8
 800aece:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800aed2:	f363 220f 	bfi	r2, r3, #8, #8
 800aed6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800aeda:	f363 4217 	bfi	r2, r3, #16, #8
 800aede:	0e03      	lsrs	r3, r0, #24
 800aee0:	f363 621f 	bfi	r2, r3, #24, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	b009      	add	sp, #36	; 0x24
 800aee8:	bd30      	pop	{r4, r5, pc}
 800aeea:	bf00      	nop

0800aeec <uxr_create_input_best_effort_stream>:
 800aeec:	b082      	sub	sp, #8
 800aeee:	3008      	adds	r0, #8
 800aef0:	b002      	add	sp, #8
 800aef2:	f001 b841 	b.w	800bf78 <uxr_add_input_best_effort_buffer>
 800aef6:	bf00      	nop

0800aef8 <uxr_create_input_reliable_stream>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	4c0b      	ldr	r4, [pc, #44]	; (800af2c <uxr_create_input_reliable_stream+0x34>)
 800aefe:	9400      	str	r4, [sp, #0]
 800af00:	3008      	adds	r0, #8
 800af02:	f001 f84f 	bl	800bfa4 <uxr_add_input_reliable_buffer>
 800af06:	2200      	movs	r2, #0
 800af08:	b2c3      	uxtb	r3, r0
 800af0a:	f363 0207 	bfi	r2, r3, #0, #8
 800af0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800af12:	f363 220f 	bfi	r2, r3, #8, #8
 800af16:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800af1a:	f363 4217 	bfi	r2, r3, #16, #8
 800af1e:	0e03      	lsrs	r3, r0, #24
 800af20:	f363 621f 	bfi	r2, r3, #24, #8
 800af24:	4610      	mov	r0, r2
 800af26:	b004      	add	sp, #16
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	bf00      	nop
 800af2c:	0800ad09 	.word	0x0800ad09

0800af30 <uxr_epoch_nanos>:
 800af30:	b510      	push	{r4, lr}
 800af32:	4604      	mov	r4, r0
 800af34:	f001 f8f0 	bl	800c118 <uxr_nanos>
 800af38:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800af3c:	1ac0      	subs	r0, r0, r3
 800af3e:	eb61 0102 	sbc.w	r1, r1, r2
 800af42:	bd10      	pop	{r4, pc}

0800af44 <uxr_flash_output_streams>:
 800af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af48:	7e03      	ldrb	r3, [r0, #24]
 800af4a:	b084      	sub	sp, #16
 800af4c:	4604      	mov	r4, r0
 800af4e:	b1fb      	cbz	r3, 800af90 <uxr_flash_output_streams+0x4c>
 800af50:	f04f 0900 	mov.w	r9, #0
 800af54:	4648      	mov	r0, r9
 800af56:	f10d 0802 	add.w	r8, sp, #2
 800af5a:	af03      	add	r7, sp, #12
 800af5c:	ae02      	add	r6, sp, #8
 800af5e:	2201      	movs	r2, #1
 800af60:	4611      	mov	r1, r2
 800af62:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800af66:	f000 ff3b 	bl	800bde0 <uxr_stream_id>
 800af6a:	3508      	adds	r5, #8
 800af6c:	4684      	mov	ip, r0
 800af6e:	4643      	mov	r3, r8
 800af70:	4628      	mov	r0, r5
 800af72:	463a      	mov	r2, r7
 800af74:	4631      	mov	r1, r6
 800af76:	f8cd c004 	str.w	ip, [sp, #4]
 800af7a:	f004 ff1d 	bl	800fdb8 <uxr_prepare_best_effort_buffer_to_send>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d13d      	bne.n	800affe <uxr_flash_output_streams+0xba>
 800af82:	7e23      	ldrb	r3, [r4, #24]
 800af84:	f109 0901 	add.w	r9, r9, #1
 800af88:	fa5f f089 	uxtb.w	r0, r9
 800af8c:	4283      	cmp	r3, r0
 800af8e:	d8e6      	bhi.n	800af5e <uxr_flash_output_streams+0x1a>
 800af90:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800af94:	b383      	cbz	r3, 800aff8 <uxr_flash_output_streams+0xb4>
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	4648      	mov	r0, r9
 800af9c:	f10d 0802 	add.w	r8, sp, #2
 800afa0:	af03      	add	r7, sp, #12
 800afa2:	ae02      	add	r6, sp, #8
 800afa4:	2201      	movs	r2, #1
 800afa6:	2102      	movs	r1, #2
 800afa8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800afac:	f000 ff18 	bl	800bde0 <uxr_stream_id>
 800afb0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800afb4:	3520      	adds	r5, #32
 800afb6:	9001      	str	r0, [sp, #4]
 800afb8:	e00c      	b.n	800afd4 <uxr_flash_output_streams+0x90>
 800afba:	9b02      	ldr	r3, [sp, #8]
 800afbc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800afc0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800afc4:	f000 fe7c 	bl	800bcc0 <uxr_stamp_session_header>
 800afc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800afca:	9a03      	ldr	r2, [sp, #12]
 800afcc:	9902      	ldr	r1, [sp, #8]
 800afce:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800afd2:	47d0      	blx	sl
 800afd4:	4643      	mov	r3, r8
 800afd6:	463a      	mov	r2, r7
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	f005 f900 	bl	80101e0 <uxr_prepare_next_reliable_buffer_to_send>
 800afe0:	4603      	mov	r3, r0
 800afe2:	4620      	mov	r0, r4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e8      	bne.n	800afba <uxr_flash_output_streams+0x76>
 800afe8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800afec:	f109 0901 	add.w	r9, r9, #1
 800aff0:	fa5f f089 	uxtb.w	r0, r9
 800aff4:	4283      	cmp	r3, r0
 800aff6:	d8d5      	bhi.n	800afa4 <uxr_flash_output_streams+0x60>
 800aff8:	b004      	add	sp, #16
 800affa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affe:	9b02      	ldr	r3, [sp, #8]
 800b000:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b004:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fe59 	bl	800bcc0 <uxr_stamp_session_header>
 800b00e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b010:	9a03      	ldr	r2, [sp, #12]
 800b012:	9902      	ldr	r1, [sp, #8]
 800b014:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b018:	47a8      	blx	r5
 800b01a:	f109 0901 	add.w	r9, r9, #1
 800b01e:	7e23      	ldrb	r3, [r4, #24]
 800b020:	fa5f f089 	uxtb.w	r0, r9
 800b024:	4283      	cmp	r3, r0
 800b026:	d89a      	bhi.n	800af5e <uxr_flash_output_streams+0x1a>
 800b028:	e7b2      	b.n	800af90 <uxr_flash_output_streams+0x4c>
 800b02a:	bf00      	nop

0800b02c <read_submessage_info>:
 800b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	460d      	mov	r5, r1
 800b032:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b036:	4669      	mov	r1, sp
 800b038:	4607      	mov	r7, r0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f001 fee6 	bl	800ce0c <uxr_deserialize_BaseObjectReply>
 800b040:	a902      	add	r1, sp, #8
 800b042:	4604      	mov	r4, r0
 800b044:	4628      	mov	r0, r5
 800b046:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b04a:	f7fe f9c7 	bl	80093dc <ucdr_deserialize_bool>
 800b04e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b052:	4004      	ands	r4, r0
 800b054:	b2e4      	uxtb	r4, r4
 800b056:	b95b      	cbnz	r3, 800b070 <read_submessage_info+0x44>
 800b058:	a987      	add	r1, sp, #540	; 0x21c
 800b05a:	4628      	mov	r0, r5
 800b05c:	f7fe f9be 	bl	80093dc <ucdr_deserialize_bool>
 800b060:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800b064:	4606      	mov	r6, r0
 800b066:	b94b      	cbnz	r3, 800b07c <read_submessage_info+0x50>
 800b068:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b070:	a903      	add	r1, sp, #12
 800b072:	4628      	mov	r0, r5
 800b074:	f001 fd58 	bl	800cb28 <uxr_deserialize_ObjectVariant>
 800b078:	4004      	ands	r4, r0
 800b07a:	e7ed      	b.n	800b058 <read_submessage_info+0x2c>
 800b07c:	a988      	add	r1, sp, #544	; 0x220
 800b07e:	4628      	mov	r0, r5
 800b080:	f7fe f9dc 	bl	800943c <ucdr_deserialize_uint8_t>
 800b084:	4234      	tst	r4, r6
 800b086:	d0ef      	beq.n	800b068 <read_submessage_info+0x3c>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0ed      	beq.n	800b068 <read_submessage_info+0x3c>
 800b08c:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800b090:	2b0d      	cmp	r3, #13
 800b092:	d1e9      	bne.n	800b068 <read_submessage_info+0x3c>
 800b094:	4628      	mov	r0, r5
 800b096:	a98a      	add	r1, sp, #552	; 0x228
 800b098:	f7fe ff76 	bl	8009f88 <ucdr_deserialize_int16_t>
 800b09c:	b140      	cbz	r0, 800b0b0 <read_submessage_info+0x84>
 800b09e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd07      	ble.n	800b0b6 <read_submessage_info+0x8a>
 800b0a6:	f1b8 0f00 	cmp.w	r8, #0
 800b0aa:	bf14      	ite	ne
 800b0ac:	2001      	movne	r0, #1
 800b0ae:	2002      	moveq	r0, #2
 800b0b0:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800b0b4:	e7d8      	b.n	800b068 <read_submessage_info+0x3c>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e7fa      	b.n	800b0b0 <read_submessage_info+0x84>
 800b0ba:	bf00      	nop

0800b0bc <read_submessage_list>:
 800b0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0c0:	b098      	sub	sp, #96	; 0x60
 800b0c2:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800b3c8 <read_submessage_list+0x30c>
 800b0c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	4688      	mov	r8, r1
 800b0cc:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800b0d0:	aa0e      	add	r2, sp, #56	; 0x38
 800b0d2:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	f000 ffd6 	bl	800c088 <uxr_read_submessage_header>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	f000 813d 	beq.w	800b35c <read_submessage_list+0x2a0>
 800b0e2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800b0e6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800b0ea:	3b02      	subs	r3, #2
 800b0ec:	2b0d      	cmp	r3, #13
 800b0ee:	d8ed      	bhi.n	800b0cc <read_submessage_list+0x10>
 800b0f0:	a101      	add	r1, pc, #4	; (adr r1, 800b0f8 <read_submessage_list+0x3c>)
 800b0f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b353 	.word	0x0800b353
 800b0fc:	0800b0cd 	.word	0x0800b0cd
 800b100:	0800b343 	.word	0x0800b343
 800b104:	0800b2e7 	.word	0x0800b2e7
 800b108:	0800b2dd 	.word	0x0800b2dd
 800b10c:	0800b0cd 	.word	0x0800b0cd
 800b110:	0800b0cd 	.word	0x0800b0cd
 800b114:	0800b23f 	.word	0x0800b23f
 800b118:	0800b1d1 	.word	0x0800b1d1
 800b11c:	0800b18f 	.word	0x0800b18f
 800b120:	0800b0cd 	.word	0x0800b0cd
 800b124:	0800b0cd 	.word	0x0800b0cd
 800b128:	0800b0cd 	.word	0x0800b0cd
 800b12c:	0800b131 	.word	0x0800b131
 800b130:	a912      	add	r1, sp, #72	; 0x48
 800b132:	4640      	mov	r0, r8
 800b134:	f002 f896 	bl	800d264 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800b138:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	f000 8115 	beq.w	800b36c <read_submessage_list+0x2b0>
 800b142:	f000 ffe9 	bl	800c118 <uxr_nanos>
 800b146:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b148:	460b      	mov	r3, r1
 800b14a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b14c:	2700      	movs	r7, #0
 800b14e:	fbc9 6701 	smlal	r6, r7, r9, r1
 800b152:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b156:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b158:	4602      	mov	r2, r0
 800b15a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b15c:	460e      	mov	r6, r1
 800b15e:	2700      	movs	r7, #0
 800b160:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b164:	9106      	str	r1, [sp, #24]
 800b166:	fbc9 6700 	smlal	r6, r7, r9, r0
 800b16a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b16c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b170:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b172:	2700      	movs	r7, #0
 800b174:	4608      	mov	r0, r1
 800b176:	4639      	mov	r1, r7
 800b178:	fbc9 0106 	smlal	r0, r1, r9, r6
 800b17c:	e9cd 0100 	strd	r0, r1, [sp]
 800b180:	4620      	mov	r0, r4
 800b182:	47a8      	blx	r5
 800b184:	f04f 0301 	mov.w	r3, #1
 800b188:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800b18c:	e79e      	b.n	800b0cc <read_submessage_list+0x10>
 800b18e:	a912      	add	r1, sp, #72	; 0x48
 800b190:	4640      	mov	r0, r8
 800b192:	f002 f855 	bl	800d240 <uxr_deserialize_HEARTBEAT_Payload>
 800b196:	2100      	movs	r1, #0
 800b198:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800b19c:	f000 fe4a 	bl	800be34 <uxr_stream_id_from_raw>
 800b1a0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f104 0008 	add.w	r0, r4, #8
 800b1ac:	9311      	str	r3, [sp, #68]	; 0x44
 800b1ae:	f000 ff2f 	bl	800c010 <uxr_get_input_reliable_stream>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d08a      	beq.n	800b0cc <read_submessage_list+0x10>
 800b1b6:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800b1ba:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800b1be:	f004 fd67 	bl	800fc90 <uxr_process_heartbeat>
 800b1c2:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800b1c6:	462a      	mov	r2, r5
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7ff fdf5 	bl	800adb8 <write_submessage_acknack.isra.0>
 800b1ce:	e77d      	b.n	800b0cc <read_submessage_list+0x10>
 800b1d0:	a912      	add	r1, sp, #72	; 0x48
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	f002 f80c 	bl	800d1f0 <uxr_deserialize_ACKNACK_Payload>
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800b1de:	f000 fe29 	bl	800be34 <uxr_stream_id_from_raw>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800b1e8:	f104 0008 	add.w	r0, r4, #8
 800b1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ee:	f000 fef9 	bl	800bfe4 <uxr_get_output_reliable_stream>
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	f43f af69 	beq.w	800b0cc <read_submessage_list+0x10>
 800b1fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800b1fe:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800b202:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800b206:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b20a:	b289      	uxth	r1, r1
 800b20c:	f005 f890 	bl	8010330 <uxr_process_acknack>
 800b210:	4628      	mov	r0, r5
 800b212:	f005 f853 	bl	80102bc <uxr_begin_output_nack_buffer_it>
 800b216:	af10      	add	r7, sp, #64	; 0x40
 800b218:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800b21c:	e005      	b.n	800b22a <read_submessage_list+0x16e>
 800b21e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b222:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b224:	e9d3 0600 	ldrd	r0, r6, [r3]
 800b228:	47b0      	blx	r6
 800b22a:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800b22e:	aa11      	add	r2, sp, #68	; 0x44
 800b230:	4639      	mov	r1, r7
 800b232:	4628      	mov	r0, r5
 800b234:	f005 f844 	bl	80102c0 <uxr_next_reliable_nack_buffer_to_send>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d1f0      	bne.n	800b21e <read_submessage_list+0x162>
 800b23c:	e746      	b.n	800b0cc <read_submessage_list+0x10>
 800b23e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800b242:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800b246:	af10      	add	r7, sp, #64	; 0x40
 800b248:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800b24c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800b250:	4639      	mov	r1, r7
 800b252:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b256:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800b25a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800b25e:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800b262:	4640      	mov	r0, r8
 800b264:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800b268:	f001 fd0c 	bl	800cc84 <uxr_deserialize_BaseObjectRequest>
 800b26c:	4638      	mov	r0, r7
 800b26e:	a911      	add	r1, sp, #68	; 0x44
 800b270:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800b274:	f000 fda2 	bl	800bdbc <uxr_parse_base_object_request>
 800b278:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800b27c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b27e:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800b282:	9112      	str	r1, [sp, #72]	; 0x48
 800b284:	3d04      	subs	r5, #4
 800b286:	f006 060e 	and.w	r6, r6, #14
 800b28a:	b2ad      	uxth	r5, r5
 800b28c:	f1ba 0f00 	cmp.w	sl, #0
 800b290:	d006      	beq.n	800b2a0 <read_submessage_list+0x1e4>
 800b292:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	463a      	mov	r2, r7
 800b29a:	2300      	movs	r3, #0
 800b29c:	4620      	mov	r0, r4
 800b29e:	47d0      	blx	sl
 800b2a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b2a2:	b168      	cbz	r0, 800b2c0 <read_submessage_list+0x204>
 800b2a4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	3902      	subs	r1, #2
 800b2aa:	e002      	b.n	800b2b2 <read_submessage_list+0x1f6>
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	4283      	cmp	r3, r0
 800b2b0:	d006      	beq.n	800b2c0 <read_submessage_list+0x204>
 800b2b2:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800b2b6:	42ba      	cmp	r2, r7
 800b2b8:	d1f8      	bne.n	800b2ac <read_submessage_list+0x1f0>
 800b2ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b2bc:	2100      	movs	r1, #0
 800b2be:	54d1      	strb	r1, [r2, r3]
 800b2c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b2c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b2c4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	e9cd 1000 	strd	r1, r0, [sp]
 800b2ce:	4633      	mov	r3, r6
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4641      	mov	r1, r8
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f005 f8af 	bl	8010438 <read_submessage_format>
 800b2da:	e6f7      	b.n	800b0cc <read_submessage_list+0x10>
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff fea4 	bl	800b02c <read_submessage_info>
 800b2e4:	e6f2      	b.n	800b0cc <read_submessage_list+0x10>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	d03b      	beq.n	800b362 <read_submessage_list+0x2a6>
 800b2ea:	a912      	add	r1, sp, #72	; 0x48
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	f001 fedb 	bl	800d0a8 <uxr_deserialize_STATUS_Payload>
 800b2f2:	a910      	add	r1, sp, #64	; 0x40
 800b2f4:	aa0f      	add	r2, sp, #60	; 0x3c
 800b2f6:	a812      	add	r0, sp, #72	; 0x48
 800b2f8:	f000 fd60 	bl	800bdbc <uxr_parse_base_object_request>
 800b2fc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800b300:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b302:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800b306:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800b30a:	9111      	str	r1, [sp, #68]	; 0x44
 800b30c:	b135      	cbz	r5, 800b31c <read_submessage_list+0x260>
 800b30e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	4632      	mov	r2, r6
 800b316:	463b      	mov	r3, r7
 800b318:	4620      	mov	r0, r4
 800b31a:	47a8      	blx	r5
 800b31c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f43f aed4 	beq.w	800b0cc <read_submessage_list+0x10>
 800b324:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b326:	2100      	movs	r1, #0
 800b328:	3802      	subs	r0, #2
 800b32a:	e003      	b.n	800b334 <read_submessage_list+0x278>
 800b32c:	3101      	adds	r1, #1
 800b32e:	4299      	cmp	r1, r3
 800b330:	f43f aecc 	beq.w	800b0cc <read_submessage_list+0x10>
 800b334:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800b338:	42b2      	cmp	r2, r6
 800b33a:	d1f7      	bne.n	800b32c <read_submessage_list+0x270>
 800b33c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b33e:	545f      	strb	r7, [r3, r1]
 800b340:	e6c4      	b.n	800b0cc <read_submessage_list+0x10>
 800b342:	2a00      	cmp	r2, #0
 800b344:	f47f aec2 	bne.w	800b0cc <read_submessage_list+0x10>
 800b348:	4641      	mov	r1, r8
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 fc7a 	bl	800bc44 <uxr_read_create_session_status>
 800b350:	e6bc      	b.n	800b0cc <read_submessage_list+0x10>
 800b352:	4641      	mov	r1, r8
 800b354:	4620      	mov	r0, r4
 800b356:	f7ff fcf9 	bl	800ad4c <read_submessage_get_info>
 800b35a:	e6b7      	b.n	800b0cc <read_submessage_list+0x10>
 800b35c:	b018      	add	sp, #96	; 0x60
 800b35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b362:	4641      	mov	r1, r8
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fc79 	bl	800bc5c <uxr_read_delete_session_status>
 800b36a:	e6af      	b.n	800b0cc <read_submessage_list+0x10>
 800b36c:	f000 fed4 	bl	800c118 <uxr_nanos>
 800b370:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b372:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b376:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b378:	2700      	movs	r7, #0
 800b37a:	fbc9 6703 	smlal	r6, r7, r9, r3
 800b37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b380:	eb16 0c00 	adds.w	ip, r6, r0
 800b384:	4618      	mov	r0, r3
 800b386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b388:	eb47 0e01 	adc.w	lr, r7, r1
 800b38c:	461e      	mov	r6, r3
 800b38e:	2100      	movs	r1, #0
 800b390:	2700      	movs	r7, #0
 800b392:	fbc9 0105 	smlal	r0, r1, r9, r5
 800b396:	fbc9 6702 	smlal	r6, r7, r9, r2
 800b39a:	1983      	adds	r3, r0, r6
 800b39c:	eb41 0207 	adc.w	r2, r1, r7
 800b3a0:	ebbc 0303 	subs.w	r3, ip, r3
 800b3a4:	9308      	str	r3, [sp, #32]
 800b3a6:	eb6e 0302 	sbc.w	r3, lr, r2
 800b3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ac:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b3b0:	0fd3      	lsrs	r3, r2, #31
 800b3b2:	18c9      	adds	r1, r1, r3
 800b3b4:	f142 0200 	adc.w	r2, r2, #0
 800b3b8:	084b      	lsrs	r3, r1, #1
 800b3ba:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800b3be:	1052      	asrs	r2, r2, #1
 800b3c0:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800b3c4:	e6de      	b.n	800b184 <read_submessage_list+0xc8>
 800b3c6:	bf00      	nop
 800b3c8:	3b9aca00 	.word	0x3b9aca00

0800b3cc <listen_message_reliably>:
 800b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d0:	1e0b      	subs	r3, r1, #0
 800b3d2:	b09d      	sub	sp, #116	; 0x74
 800b3d4:	bfb8      	it	lt
 800b3d6:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	4607      	mov	r7, r0
 800b3de:	f000 fe7f 	bl	800c0e0 <uxr_millis>
 800b3e2:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800b3e6:	4681      	mov	r9, r0
 800b3e8:	2a00      	cmp	r2, #0
 800b3ea:	f000 8095 	beq.w	800b518 <listen_message_reliably+0x14c>
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800b3f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4688      	mov	r8, r1
 800b400:	46ca      	mov	sl, r9
 800b402:	e00f      	b.n	800b424 <listen_message_reliably+0x58>
 800b404:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b408:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b40c:	42a2      	cmp	r2, r4
 800b40e:	eb73 0105 	sbcs.w	r1, r3, r5
 800b412:	bfb8      	it	lt
 800b414:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800b418:	3601      	adds	r6, #1
 800b41a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b41e:	b2f0      	uxtb	r0, r6
 800b420:	4283      	cmp	r3, r0
 800b422:	d951      	bls.n	800b4c8 <listen_message_reliably+0xfc>
 800b424:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800b428:	2201      	movs	r2, #1
 800b42a:	2102      	movs	r1, #2
 800b42c:	f000 fcd8 	bl	800bde0 <uxr_stream_id>
 800b430:	00e4      	lsls	r4, r4, #3
 800b432:	f104 0520 	add.w	r5, r4, #32
 800b436:	443d      	add	r5, r7
 800b438:	4601      	mov	r1, r0
 800b43a:	4643      	mov	r3, r8
 800b43c:	4652      	mov	r2, sl
 800b43e:	4628      	mov	r0, r5
 800b440:	9109      	str	r1, [sp, #36]	; 0x24
 800b442:	f004 ff0f 	bl	8010264 <uxr_update_output_stream_heartbeat_timestamp>
 800b446:	193b      	adds	r3, r7, r4
 800b448:	2800      	cmp	r0, #0
 800b44a:	d0db      	beq.n	800b404 <listen_message_reliably+0x38>
 800b44c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800b450:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800b454:	4638      	mov	r0, r7
 800b456:	f000 fc8b 	bl	800bd70 <uxr_session_header_offset>
 800b45a:	3501      	adds	r5, #1
 800b45c:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800b460:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b464:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800b468:	9000      	str	r0, [sp, #0]
 800b46a:	2300      	movs	r3, #0
 800b46c:	4658      	mov	r0, fp
 800b46e:	2211      	movs	r2, #17
 800b470:	a90c      	add	r1, sp, #48	; 0x30
 800b472:	f7ff f9bd 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800b476:	2300      	movs	r3, #0
 800b478:	2205      	movs	r2, #5
 800b47a:	210b      	movs	r1, #11
 800b47c:	4658      	mov	r0, fp
 800b47e:	f000 fde9 	bl	800c054 <uxr_buffer_submessage_header>
 800b482:	8968      	ldrh	r0, [r5, #10]
 800b484:	2101      	movs	r1, #1
 800b486:	f005 f897 	bl	80105b8 <uxr_seq_num_add>
 800b48a:	892a      	ldrh	r2, [r5, #8]
 800b48c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800b490:	4603      	mov	r3, r0
 800b492:	a90a      	add	r1, sp, #40	; 0x28
 800b494:	4658      	mov	r0, fp
 800b496:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800b49a:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800b49e:	f001 febb 	bl	800d218 <uxr_serialize_HEARTBEAT_Payload>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f000 fc09 	bl	800bcc0 <uxr_stamp_session_header>
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	f7ff f9dc 	bl	800a86c <ucdr_buffer_length>
 800b4b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	a90c      	add	r1, sp, #48	; 0x30
 800b4ba:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b4be:	443c      	add	r4, r7
 800b4c0:	47a8      	blx	r5
 800b4c2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800b4c6:	e79f      	b.n	800b408 <listen_message_reliably+0x3c>
 800b4c8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800b4cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b4d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b4d4:	4294      	cmp	r4, r2
 800b4d6:	bf08      	it	eq
 800b4d8:	428b      	cmpeq	r3, r1
 800b4da:	d01d      	beq.n	800b518 <listen_message_reliably+0x14c>
 800b4dc:	eba3 030a 	sub.w	r3, r3, sl
 800b4e0:	9905      	ldr	r1, [sp, #20]
 800b4e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	bf08      	it	eq
 800b4e8:	2301      	moveq	r3, #1
 800b4ea:	4299      	cmp	r1, r3
 800b4ec:	bfa8      	it	ge
 800b4ee:	4619      	movge	r1, r3
 800b4f0:	6894      	ldr	r4, [r2, #8]
 800b4f2:	6810      	ldr	r0, [r2, #0]
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	aa08      	add	r2, sp, #32
 800b4fa:	a907      	add	r1, sp, #28
 800b4fc:	47a0      	blx	r4
 800b4fe:	b968      	cbnz	r0, 800b51c <listen_message_reliably+0x150>
 800b500:	9b05      	ldr	r3, [sp, #20]
 800b502:	eba3 0309 	sub.w	r3, r3, r9
 800b506:	2b00      	cmp	r3, #0
 800b508:	9305      	str	r3, [sp, #20]
 800b50a:	f73f af68 	bgt.w	800b3de <listen_message_reliably+0x12>
 800b50e:	4604      	mov	r4, r0
 800b510:	4620      	mov	r0, r4
 800b512:	b01d      	add	sp, #116	; 0x74
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	e7e1      	b.n	800b4e0 <listen_message_reliably+0x114>
 800b51c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800b520:	4604      	mov	r4, r0
 800b522:	a80c      	add	r0, sp, #48	; 0x30
 800b524:	f7ff f976 	bl	800a814 <ucdr_init_buffer>
 800b528:	2500      	movs	r5, #0
 800b52a:	a90c      	add	r1, sp, #48	; 0x30
 800b52c:	f10d 031a 	add.w	r3, sp, #26
 800b530:	aa06      	add	r2, sp, #24
 800b532:	4638      	mov	r0, r7
 800b534:	f88d 5018 	strb.w	r5, [sp, #24]
 800b538:	f000 fbd8 	bl	800bcec <uxr_read_session_header>
 800b53c:	b918      	cbnz	r0, 800b546 <listen_message_reliably+0x17a>
 800b53e:	4620      	mov	r0, r4
 800b540:	b01d      	add	sp, #116	; 0x74
 800b542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b546:	4629      	mov	r1, r5
 800b548:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800b54c:	f000 fc72 	bl	800be34 <uxr_stream_id_from_raw>
 800b550:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b554:	2e01      	cmp	r6, #1
 800b556:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800b55a:	900a      	str	r0, [sp, #40]	; 0x28
 800b55c:	fa5f fa80 	uxtb.w	sl, r0
 800b560:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b564:	d04b      	beq.n	800b5fe <listen_message_reliably+0x232>
 800b566:	2e02      	cmp	r6, #2
 800b568:	d00f      	beq.n	800b58a <listen_message_reliably+0x1be>
 800b56a:	2e00      	cmp	r6, #0
 800b56c:	d1e7      	bne.n	800b53e <listen_message_reliably+0x172>
 800b56e:	4631      	mov	r1, r6
 800b570:	4630      	mov	r0, r6
 800b572:	f000 fc5f 	bl	800be34 <uxr_stream_id_from_raw>
 800b576:	a90c      	add	r1, sp, #48	; 0x30
 800b578:	4602      	mov	r2, r0
 800b57a:	4638      	mov	r0, r7
 800b57c:	920a      	str	r2, [sp, #40]	; 0x28
 800b57e:	f7ff fd9d 	bl	800b0bc <read_submessage_list>
 800b582:	4620      	mov	r0, r4
 800b584:	b01d      	add	sp, #116	; 0x74
 800b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58a:	4629      	mov	r1, r5
 800b58c:	f107 0008 	add.w	r0, r7, #8
 800b590:	f000 fd3e 	bl	800c010 <uxr_get_input_reliable_stream>
 800b594:	4680      	mov	r8, r0
 800b596:	b348      	cbz	r0, 800b5ec <listen_message_reliably+0x220>
 800b598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b59a:	9202      	str	r2, [sp, #8]
 800b59c:	a80c      	add	r0, sp, #48	; 0x30
 800b59e:	f7ff f969 	bl	800a874 <ucdr_buffer_remaining>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f10d 0019 	add.w	r0, sp, #25
 800b5a8:	9000      	str	r0, [sp, #0]
 800b5aa:	9a02      	ldr	r2, [sp, #8]
 800b5ac:	4649      	mov	r1, r9
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	f004 fa70 	bl	800fa94 <uxr_receive_reliable_message>
 800b5b4:	b1d0      	cbz	r0, 800b5ec <listen_message_reliably+0x220>
 800b5b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d037      	beq.n	800b62e <listen_message_reliably+0x262>
 800b5be:	ae14      	add	r6, sp, #80	; 0x50
 800b5c0:	f04f 0902 	mov.w	r9, #2
 800b5c4:	e008      	b.n	800b5d8 <listen_message_reliably+0x20c>
 800b5c6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800b5ca:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800b5ce:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800b5d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d4:	f7ff fd72 	bl	800b0bc <read_submessage_list>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	2204      	movs	r2, #4
 800b5dc:	4640      	mov	r0, r8
 800b5de:	f004 fad9 	bl	800fb94 <uxr_next_input_reliable_buffer_available>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1ec      	bne.n	800b5c6 <listen_message_reliably+0x1fa>
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4651      	mov	r1, sl
 800b5f2:	f7ff fbe1 	bl	800adb8 <write_submessage_acknack.isra.0>
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	b01d      	add	sp, #116	; 0x74
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fe:	4629      	mov	r1, r5
 800b600:	f107 0008 	add.w	r0, r7, #8
 800b604:	f000 fcfa 	bl	800bffc <uxr_get_input_best_effort_stream>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d098      	beq.n	800b53e <listen_message_reliably+0x172>
 800b60c:	4649      	mov	r1, r9
 800b60e:	f004 f9bd 	bl	800f98c <uxr_receive_best_effort_message>
 800b612:	2800      	cmp	r0, #0
 800b614:	d093      	beq.n	800b53e <listen_message_reliably+0x172>
 800b616:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800b61a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800b61e:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b624:	a90c      	add	r1, sp, #48	; 0x30
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff fd48 	bl	800b0bc <read_submessage_list>
 800b62c:	e787      	b.n	800b53e <listen_message_reliably+0x172>
 800b62e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800b632:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800b636:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800b63a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b63c:	a90c      	add	r1, sp, #48	; 0x30
 800b63e:	4638      	mov	r0, r7
 800b640:	f7ff fd3c 	bl	800b0bc <read_submessage_list>
 800b644:	e7bb      	b.n	800b5be <listen_message_reliably+0x1f2>
 800b646:	bf00      	nop

0800b648 <uxr_run_session_until_confirm_delivery>:
 800b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64c:	4606      	mov	r6, r0
 800b64e:	460d      	mov	r5, r1
 800b650:	f000 fd46 	bl	800c0e0 <uxr_millis>
 800b654:	4607      	mov	r7, r0
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff fc74 	bl	800af44 <uxr_flash_output_streams>
 800b65c:	2d00      	cmp	r5, #0
 800b65e:	f106 0808 	add.w	r8, r6, #8
 800b662:	bfa8      	it	ge
 800b664:	462c      	movge	r4, r5
 800b666:	da07      	bge.n	800b678 <uxr_run_session_until_confirm_delivery+0x30>
 800b668:	e00e      	b.n	800b688 <uxr_run_session_until_confirm_delivery+0x40>
 800b66a:	f7ff feaf 	bl	800b3cc <listen_message_reliably>
 800b66e:	f000 fd37 	bl	800c0e0 <uxr_millis>
 800b672:	1bc3      	subs	r3, r0, r7
 800b674:	1aec      	subs	r4, r5, r3
 800b676:	d407      	bmi.n	800b688 <uxr_run_session_until_confirm_delivery+0x40>
 800b678:	4640      	mov	r0, r8
 800b67a:	f000 fcd5 	bl	800c028 <uxr_output_streams_confirmed>
 800b67e:	4603      	mov	r3, r0
 800b680:	4621      	mov	r1, r4
 800b682:	4630      	mov	r0, r6
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0f0      	beq.n	800b66a <uxr_run_session_until_confirm_delivery+0x22>
 800b688:	4640      	mov	r0, r8
 800b68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	f000 bccb 	b.w	800c028 <uxr_output_streams_confirmed>
 800b692:	bf00      	nop

0800b694 <uxr_run_session_until_all_status>:
 800b694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b698:	9d08      	ldr	r5, [sp, #32]
 800b69a:	460f      	mov	r7, r1
 800b69c:	4692      	mov	sl, r2
 800b69e:	461c      	mov	r4, r3
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	f7ff fc4f 	bl	800af44 <uxr_flash_output_streams>
 800b6a6:	b125      	cbz	r5, 800b6b2 <uxr_run_session_until_all_status+0x1e>
 800b6a8:	462a      	mov	r2, r5
 800b6aa:	21ff      	movs	r1, #255	; 0xff
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f006 f9e3 	bl	8011a78 <memset>
 800b6b2:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800b6b6:	67f5      	str	r5, [r6, #124]	; 0x7c
 800b6b8:	f000 fd12 	bl	800c0e0 <uxr_millis>
 800b6bc:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800b6c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fe7f 	bl	800b3cc <listen_message_reliably>
 800b6ce:	f000 fd07 	bl	800c0e0 <uxr_millis>
 800b6d2:	eba0 0008 	sub.w	r0, r0, r8
 800b6d6:	1a39      	subs	r1, r7, r0
 800b6d8:	b33d      	cbz	r5, 800b72a <uxr_run_session_until_all_status+0x96>
 800b6da:	46cc      	mov	ip, r9
 800b6dc:	464a      	mov	r2, r9
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e002      	b.n	800b6e8 <uxr_run_session_until_all_status+0x54>
 800b6e2:	42ab      	cmp	r3, r5
 800b6e4:	d20c      	bcs.n	800b700 <uxr_run_session_until_all_status+0x6c>
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800b6ec:	2cff      	cmp	r4, #255	; 0xff
 800b6ee:	d1f8      	bne.n	800b6e2 <uxr_run_session_until_all_status+0x4e>
 800b6f0:	42ab      	cmp	r3, r5
 800b6f2:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800b6f6:	d213      	bcs.n	800b720 <uxr_run_session_until_all_status+0x8c>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d0f4      	beq.n	800b6e6 <uxr_run_session_until_all_status+0x52>
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	dce3      	bgt.n	800b6c8 <uxr_run_session_until_all_status+0x34>
 800b700:	2300      	movs	r3, #0
 800b702:	444d      	add	r5, r9
 800b704:	67f3      	str	r3, [r6, #124]	; 0x7c
 800b706:	e001      	b.n	800b70c <uxr_run_session_until_all_status+0x78>
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d812      	bhi.n	800b732 <uxr_run_session_until_all_status+0x9e>
 800b70c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800b710:	4565      	cmp	r5, ip
 800b712:	d1f9      	bne.n	800b708 <uxr_run_session_until_all_status+0x74>
 800b714:	2b01      	cmp	r3, #1
 800b716:	bf8c      	ite	hi
 800b718:	2000      	movhi	r0, #0
 800b71a:	2001      	movls	r0, #1
 800b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b720:	2900      	cmp	r1, #0
 800b722:	dded      	ble.n	800b700 <uxr_run_session_until_all_status+0x6c>
 800b724:	2800      	cmp	r0, #0
 800b726:	d1cf      	bne.n	800b6c8 <uxr_run_session_until_all_status+0x34>
 800b728:	e7ea      	b.n	800b700 <uxr_run_session_until_all_status+0x6c>
 800b72a:	67f5      	str	r5, [r6, #124]	; 0x7c
 800b72c:	2001      	movs	r0, #1
 800b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b732:	2000      	movs	r0, #0
 800b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b738 <uxr_create_session>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	ed2d 8b02 	vpush	{d8}
 800b740:	f100 0808 	add.w	r8, r0, #8
 800b744:	b0a9      	sub	sp, #164	; 0xa4
 800b746:	4604      	mov	r4, r0
 800b748:	4640      	mov	r0, r8
 800b74a:	f000 fba9 	bl	800bea0 <uxr_reset_stream_storage>
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 fb0e 	bl	800bd70 <uxr_session_header_offset>
 800b754:	a909      	add	r1, sp, #36	; 0x24
 800b756:	9000      	str	r0, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	a810      	add	r0, sp, #64	; 0x40
 800b75c:	221c      	movs	r2, #28
 800b75e:	f7ff f847 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800b762:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b764:	8a1a      	ldrh	r2, [r3, #16]
 800b766:	3a04      	subs	r2, #4
 800b768:	b292      	uxth	r2, r2
 800b76a:	4620      	mov	r0, r4
 800b76c:	a910      	add	r1, sp, #64	; 0x40
 800b76e:	f000 fa23 	bl	800bbb8 <uxr_buffer_create_session>
 800b772:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fa8f 	bl	800bc98 <uxr_stamp_create_session_header>
 800b77a:	a810      	add	r0, sp, #64	; 0x40
 800b77c:	f7ff f876 	bl	800a86c <ucdr_buffer_length>
 800b780:	23ff      	movs	r3, #255	; 0xff
 800b782:	ee08 0a10 	vmov	s16, r0
 800b786:	7163      	strb	r3, [r4, #5]
 800b788:	f04f 090a 	mov.w	r9, #10
 800b78c:	46c2      	mov	sl, r8
 800b78e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b790:	ee18 2a10 	vmov	r2, s16
 800b794:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b798:	a909      	add	r1, sp, #36	; 0x24
 800b79a:	47a8      	blx	r5
 800b79c:	f000 fca0 	bl	800c0e0 <uxr_millis>
 800b7a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b7a4:	9002      	str	r0, [sp, #8]
 800b7a6:	e00c      	b.n	800b7c2 <uxr_create_session+0x8a>
 800b7a8:	f000 fc9a 	bl	800c0e0 <uxr_millis>
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	7962      	ldrb	r2, [r4, #5]
 800b7b0:	1ac0      	subs	r0, r0, r3
 800b7b2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f340 8094 	ble.w	800b8e4 <uxr_create_session+0x1ac>
 800b7bc:	2aff      	cmp	r2, #255	; 0xff
 800b7be:	f040 8097 	bne.w	800b8f0 <uxr_create_session+0x1b8>
 800b7c2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b7c4:	a905      	add	r1, sp, #20
 800b7c6:	6895      	ldr	r5, [r2, #8]
 800b7c8:	6810      	ldr	r0, [r2, #0]
 800b7ca:	aa06      	add	r2, sp, #24
 800b7cc:	47a8      	blx	r5
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0ea      	beq.n	800b7a8 <uxr_create_session+0x70>
 800b7d2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800b7d6:	a818      	add	r0, sp, #96	; 0x60
 800b7d8:	f7ff f81c 	bl	800a814 <ucdr_init_buffer>
 800b7dc:	2500      	movs	r5, #0
 800b7de:	f10d 0312 	add.w	r3, sp, #18
 800b7e2:	aa04      	add	r2, sp, #16
 800b7e4:	a918      	add	r1, sp, #96	; 0x60
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f88d 5010 	strb.w	r5, [sp, #16]
 800b7ec:	f000 fa7e 	bl	800bcec <uxr_read_session_header>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0d9      	beq.n	800b7a8 <uxr_create_session+0x70>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800b7fa:	f000 fb1b 	bl	800be34 <uxr_stream_id_from_raw>
 800b7fe:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b802:	2f01      	cmp	r7, #1
 800b804:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b808:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800b80c:	fa5f f880 	uxtb.w	r8, r0
 800b810:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800b814:	d04d      	beq.n	800b8b2 <uxr_create_session+0x17a>
 800b816:	2f02      	cmp	r7, #2
 800b818:	d00c      	beq.n	800b834 <uxr_create_session+0xfc>
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	d1c4      	bne.n	800b7a8 <uxr_create_session+0x70>
 800b81e:	4639      	mov	r1, r7
 800b820:	4638      	mov	r0, r7
 800b822:	f000 fb07 	bl	800be34 <uxr_stream_id_from_raw>
 800b826:	a918      	add	r1, sp, #96	; 0x60
 800b828:	4602      	mov	r2, r0
 800b82a:	4620      	mov	r0, r4
 800b82c:	9208      	str	r2, [sp, #32]
 800b82e:	f7ff fc45 	bl	800b0bc <read_submessage_list>
 800b832:	e7b9      	b.n	800b7a8 <uxr_create_session+0x70>
 800b834:	4629      	mov	r1, r5
 800b836:	4650      	mov	r0, sl
 800b838:	f000 fbea 	bl	800c010 <uxr_get_input_reliable_stream>
 800b83c:	4606      	mov	r6, r0
 800b83e:	b390      	cbz	r0, 800b8a6 <uxr_create_session+0x16e>
 800b840:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b842:	9203      	str	r2, [sp, #12]
 800b844:	a818      	add	r0, sp, #96	; 0x60
 800b846:	f7ff f815 	bl	800a874 <ucdr_buffer_remaining>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f10d 0011 	add.w	r0, sp, #17
 800b850:	9000      	str	r0, [sp, #0]
 800b852:	9a03      	ldr	r2, [sp, #12]
 800b854:	4659      	mov	r1, fp
 800b856:	4630      	mov	r0, r6
 800b858:	f004 f91c 	bl	800fa94 <uxr_receive_reliable_message>
 800b85c:	b318      	cbz	r0, 800b8a6 <uxr_create_session+0x16e>
 800b85e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800b862:	b9b3      	cbnz	r3, 800b892 <uxr_create_session+0x15a>
 800b864:	f88d 8020 	strb.w	r8, [sp, #32]
 800b868:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b86c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800b870:	9a08      	ldr	r2, [sp, #32]
 800b872:	a918      	add	r1, sp, #96	; 0x60
 800b874:	4620      	mov	r0, r4
 800b876:	f7ff fc21 	bl	800b0bc <read_submessage_list>
 800b87a:	e00a      	b.n	800b892 <uxr_create_session+0x15a>
 800b87c:	f04f 0302 	mov.w	r3, #2
 800b880:	f88d 8020 	strb.w	r8, [sp, #32]
 800b884:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b888:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800b88c:	9a08      	ldr	r2, [sp, #32]
 800b88e:	f7ff fc15 	bl	800b0bc <read_submessage_list>
 800b892:	a920      	add	r1, sp, #128	; 0x80
 800b894:	2204      	movs	r2, #4
 800b896:	4630      	mov	r0, r6
 800b898:	f004 f97c 	bl	800fb94 <uxr_next_input_reliable_buffer_available>
 800b89c:	4603      	mov	r3, r0
 800b89e:	a920      	add	r1, sp, #128	; 0x80
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1ea      	bne.n	800b87c <uxr_create_session+0x144>
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4641      	mov	r1, r8
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7ff fa84 	bl	800adb8 <write_submessage_acknack.isra.0>
 800b8b0:	e77a      	b.n	800b7a8 <uxr_create_session+0x70>
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	f000 fba1 	bl	800bffc <uxr_get_input_best_effort_stream>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	f43f af74 	beq.w	800b7a8 <uxr_create_session+0x70>
 800b8c0:	4659      	mov	r1, fp
 800b8c2:	f004 f863 	bl	800f98c <uxr_receive_best_effort_message>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	f43f af6e 	beq.w	800b7a8 <uxr_create_session+0x70>
 800b8cc:	f88d 8020 	strb.w	r8, [sp, #32]
 800b8d0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800b8d4:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800b8d8:	9a08      	ldr	r2, [sp, #32]
 800b8da:	a918      	add	r1, sp, #96	; 0x60
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff fbed 	bl	800b0bc <read_submessage_list>
 800b8e2:	e761      	b.n	800b7a8 <uxr_create_session+0x70>
 800b8e4:	f1b9 0901 	subs.w	r9, r9, #1
 800b8e8:	d002      	beq.n	800b8f0 <uxr_create_session+0x1b8>
 800b8ea:	2aff      	cmp	r2, #255	; 0xff
 800b8ec:	f43f af4f 	beq.w	800b78e <uxr_create_session+0x56>
 800b8f0:	b12a      	cbz	r2, 800b8fe <uxr_create_session+0x1c6>
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	b029      	add	sp, #164	; 0xa4
 800b8f6:	ecbd 8b02 	vpop	{d8}
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fe:	4650      	mov	r0, sl
 800b900:	f000 face 	bl	800bea0 <uxr_reset_stream_storage>
 800b904:	2001      	movs	r0, #1
 800b906:	b029      	add	sp, #164	; 0xa4
 800b908:	ecbd 8b02 	vpop	{d8}
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b910 <wait_session_status>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4604      	mov	r4, r0
 800b916:	b09d      	sub	sp, #116	; 0x74
 800b918:	20ff      	movs	r0, #255	; 0xff
 800b91a:	7160      	strb	r0, [r4, #5]
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 80b8 	beq.w	800ba94 <wait_session_status+0x184>
 800b924:	2300      	movs	r3, #0
 800b926:	468b      	mov	fp, r1
 800b928:	4692      	mov	sl, r2
 800b92a:	9303      	str	r3, [sp, #12]
 800b92c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b92e:	4652      	mov	r2, sl
 800b930:	e9d3 0500 	ldrd	r0, r5, [r3]
 800b934:	4659      	mov	r1, fp
 800b936:	47a8      	blx	r5
 800b938:	f000 fbd2 	bl	800c0e0 <uxr_millis>
 800b93c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b940:	4605      	mov	r5, r0
 800b942:	e009      	b.n	800b958 <wait_session_status+0x48>
 800b944:	f000 fbcc 	bl	800c0e0 <uxr_millis>
 800b948:	1b40      	subs	r0, r0, r5
 800b94a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dd42      	ble.n	800b9d8 <wait_session_status+0xc8>
 800b952:	7960      	ldrb	r0, [r4, #5]
 800b954:	28ff      	cmp	r0, #255	; 0xff
 800b956:	d148      	bne.n	800b9ea <wait_session_status+0xda>
 800b958:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b95a:	a908      	add	r1, sp, #32
 800b95c:	6896      	ldr	r6, [r2, #8]
 800b95e:	6810      	ldr	r0, [r2, #0]
 800b960:	aa09      	add	r2, sp, #36	; 0x24
 800b962:	47b0      	blx	r6
 800b964:	2800      	cmp	r0, #0
 800b966:	d0ed      	beq.n	800b944 <wait_session_status+0x34>
 800b968:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800b96c:	a80c      	add	r0, sp, #48	; 0x30
 800b96e:	f7fe ff51 	bl	800a814 <ucdr_init_buffer>
 800b972:	2600      	movs	r6, #0
 800b974:	f10d 031e 	add.w	r3, sp, #30
 800b978:	aa07      	add	r2, sp, #28
 800b97a:	a90c      	add	r1, sp, #48	; 0x30
 800b97c:	4620      	mov	r0, r4
 800b97e:	f88d 601c 	strb.w	r6, [sp, #28]
 800b982:	f000 f9b3 	bl	800bcec <uxr_read_session_header>
 800b986:	2800      	cmp	r0, #0
 800b988:	d0dc      	beq.n	800b944 <wait_session_status+0x34>
 800b98a:	4631      	mov	r1, r6
 800b98c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b990:	f000 fa50 	bl	800be34 <uxr_stream_id_from_raw>
 800b994:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800b998:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b99c:	9302      	str	r3, [sp, #8]
 800b99e:	2f01      	cmp	r7, #1
 800b9a0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800b9a4:	fa5f f880 	uxtb.w	r8, r0
 800b9a8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800b9ac:	d058      	beq.n	800ba60 <wait_session_status+0x150>
 800b9ae:	2f02      	cmp	r7, #2
 800b9b0:	d021      	beq.n	800b9f6 <wait_session_status+0xe6>
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	d1c6      	bne.n	800b944 <wait_session_status+0x34>
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f000 fa3b 	bl	800be34 <uxr_stream_id_from_raw>
 800b9be:	a90c      	add	r1, sp, #48	; 0x30
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b9c6:	f7ff fb79 	bl	800b0bc <read_submessage_list>
 800b9ca:	f000 fb89 	bl	800c0e0 <uxr_millis>
 800b9ce:	1b40      	subs	r0, r0, r5
 800b9d0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dcbc      	bgt.n	800b952 <wait_session_status+0x42>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	9a04      	ldr	r2, [sp, #16]
 800b9dc:	7960      	ldrb	r0, [r4, #5]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	d001      	beq.n	800b9ea <wait_session_status+0xda>
 800b9e6:	28ff      	cmp	r0, #255	; 0xff
 800b9e8:	d0a0      	beq.n	800b92c <wait_session_status+0x1c>
 800b9ea:	38ff      	subs	r0, #255	; 0xff
 800b9ec:	bf18      	it	ne
 800b9ee:	2001      	movne	r0, #1
 800b9f0:	b01d      	add	sp, #116	; 0x74
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	4631      	mov	r1, r6
 800b9f8:	f104 0008 	add.w	r0, r4, #8
 800b9fc:	f000 fb08 	bl	800c010 <uxr_get_input_reliable_stream>
 800ba00:	4681      	mov	r9, r0
 800ba02:	b338      	cbz	r0, 800ba54 <wait_session_status+0x144>
 800ba04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba06:	9205      	str	r2, [sp, #20]
 800ba08:	a80c      	add	r0, sp, #48	; 0x30
 800ba0a:	f7fe ff33 	bl	800a874 <ucdr_buffer_remaining>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f10d 001d 	add.w	r0, sp, #29
 800ba14:	9000      	str	r0, [sp, #0]
 800ba16:	9a05      	ldr	r2, [sp, #20]
 800ba18:	9902      	ldr	r1, [sp, #8]
 800ba1a:	4648      	mov	r0, r9
 800ba1c:	f004 f83a 	bl	800fa94 <uxr_receive_reliable_message>
 800ba20:	b1c0      	cbz	r0, 800ba54 <wait_session_status+0x144>
 800ba22:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ba26:	b95b      	cbnz	r3, 800ba40 <wait_session_status+0x130>
 800ba28:	e03c      	b.n	800baa4 <wait_session_status+0x194>
 800ba2a:	f04f 0302 	mov.w	r3, #2
 800ba2e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ba32:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ba36:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800ba3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba3c:	f7ff fb3e 	bl	800b0bc <read_submessage_list>
 800ba40:	a914      	add	r1, sp, #80	; 0x50
 800ba42:	2204      	movs	r2, #4
 800ba44:	4648      	mov	r0, r9
 800ba46:	f004 f8a5 	bl	800fb94 <uxr_next_input_reliable_buffer_available>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	a914      	add	r1, sp, #80	; 0x50
 800ba4e:	4620      	mov	r0, r4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1ea      	bne.n	800ba2a <wait_session_status+0x11a>
 800ba54:	4632      	mov	r2, r6
 800ba56:	4641      	mov	r1, r8
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f7ff f9ad 	bl	800adb8 <write_submessage_acknack.isra.0>
 800ba5e:	e771      	b.n	800b944 <wait_session_status+0x34>
 800ba60:	4631      	mov	r1, r6
 800ba62:	f104 0008 	add.w	r0, r4, #8
 800ba66:	f000 fac9 	bl	800bffc <uxr_get_input_best_effort_stream>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	f43f af6a 	beq.w	800b944 <wait_session_status+0x34>
 800ba70:	9902      	ldr	r1, [sp, #8]
 800ba72:	f003 ff8b 	bl	800f98c <uxr_receive_best_effort_message>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	f43f af64 	beq.w	800b944 <wait_session_status+0x34>
 800ba7c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ba80:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ba84:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ba88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba8a:	a90c      	add	r1, sp, #48	; 0x30
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f7ff fb15 	bl	800b0bc <read_submessage_list>
 800ba92:	e757      	b.n	800b944 <wait_session_status+0x34>
 800ba94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ba96:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ba9a:	47a0      	blx	r4
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	b01d      	add	sp, #116	; 0x74
 800baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa4:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800baa8:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800baac:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800bab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bab2:	a90c      	add	r1, sp, #48	; 0x30
 800bab4:	4620      	mov	r0, r4
 800bab6:	f7ff fb01 	bl	800b0bc <read_submessage_list>
 800baba:	e7c1      	b.n	800ba40 <wait_session_status+0x130>

0800babc <uxr_delete_session_retries>:
 800babc:	b530      	push	{r4, r5, lr}
 800babe:	b08f      	sub	sp, #60	; 0x3c
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	f000 f954 	bl	800bd70 <uxr_session_header_offset>
 800bac8:	2300      	movs	r3, #0
 800baca:	2210      	movs	r2, #16
 800bacc:	9000      	str	r0, [sp, #0]
 800bace:	a902      	add	r1, sp, #8
 800bad0:	a806      	add	r0, sp, #24
 800bad2:	f7fe fe8d 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800bad6:	a906      	add	r1, sp, #24
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 f897 	bl	800bc0c <uxr_buffer_delete_session>
 800bade:	2200      	movs	r2, #0
 800bae0:	4611      	mov	r1, r2
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	4620      	mov	r0, r4
 800bae6:	f000 f8eb 	bl	800bcc0 <uxr_stamp_session_header>
 800baea:	a806      	add	r0, sp, #24
 800baec:	f7fe febe 	bl	800a86c <ucdr_buffer_length>
 800baf0:	462b      	mov	r3, r5
 800baf2:	4602      	mov	r2, r0
 800baf4:	a902      	add	r1, sp, #8
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7ff ff0a 	bl	800b910 <wait_session_status>
 800bafc:	b118      	cbz	r0, 800bb06 <uxr_delete_session_retries+0x4a>
 800bafe:	7960      	ldrb	r0, [r4, #5]
 800bb00:	fab0 f080 	clz	r0, r0
 800bb04:	0940      	lsrs	r0, r0, #5
 800bb06:	b00f      	add	sp, #60	; 0x3c
 800bb08:	bd30      	pop	{r4, r5, pc}
 800bb0a:	bf00      	nop

0800bb0c <uxr_prepare_stream_to_write_submessage>:
 800bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	4682      	mov	sl, r0
 800bb14:	4610      	mov	r0, r2
 800bb16:	4615      	mov	r5, r2
 800bb18:	461e      	mov	r6, r3
 800bb1a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800bb1e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800bb22:	9101      	str	r1, [sp, #4]
 800bb24:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800bb28:	f000 fad4 	bl	800c0d4 <uxr_submessage_padding>
 800bb2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb30:	f105 0904 	add.w	r9, r5, #4
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	4481      	add	r9, r0
 800bb38:	d01d      	beq.n	800bb76 <uxr_prepare_stream_to_write_submessage+0x6a>
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d116      	bne.n	800bb6c <uxr_prepare_stream_to_write_submessage+0x60>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	f10a 0008 	add.w	r0, sl, #8
 800bb44:	f000 fa4e 	bl	800bfe4 <uxr_get_output_reliable_stream>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	b158      	cbz	r0, 800bb64 <uxr_prepare_stream_to_write_submessage+0x58>
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	4632      	mov	r2, r6
 800bb50:	f004 f9d6 	bl	800ff00 <uxr_prepare_reliable_buffer_to_write>
 800bb54:	4604      	mov	r4, r0
 800bb56:	b12c      	cbz	r4, 800bb64 <uxr_prepare_stream_to_write_submessage+0x58>
 800bb58:	4643      	mov	r3, r8
 800bb5a:	b2aa      	uxth	r2, r5
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f000 fa78 	bl	800c054 <uxr_buffer_submessage_header>
 800bb64:	4620      	mov	r0, r4
 800bb66:	b002      	add	sp, #8
 800bb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6c:	2400      	movs	r4, #0
 800bb6e:	4620      	mov	r0, r4
 800bb70:	b002      	add	sp, #8
 800bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb76:	4621      	mov	r1, r4
 800bb78:	f10a 0008 	add.w	r0, sl, #8
 800bb7c:	f000 fa2a 	bl	800bfd4 <uxr_get_output_best_effort_stream>
 800bb80:	4604      	mov	r4, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0ee      	beq.n	800bb64 <uxr_prepare_stream_to_write_submessage+0x58>
 800bb86:	4649      	mov	r1, r9
 800bb88:	4632      	mov	r2, r6
 800bb8a:	f004 f8f5 	bl	800fd78 <uxr_prepare_best_effort_buffer_to_write>
 800bb8e:	4604      	mov	r4, r0
 800bb90:	e7e1      	b.n	800bb56 <uxr_prepare_stream_to_write_submessage+0x4a>
 800bb92:	bf00      	nop

0800bb94 <uxr_init_session_info>:
 800bb94:	b470      	push	{r4, r5, r6}
 800bb96:	7102      	strb	r2, [r0, #4]
 800bb98:	0e16      	lsrs	r6, r2, #24
 800bb9a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800bb9e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800bba2:	23ff      	movs	r3, #255	; 0xff
 800bba4:	2209      	movs	r2, #9
 800bba6:	7046      	strb	r6, [r0, #1]
 800bba8:	7085      	strb	r5, [r0, #2]
 800bbaa:	70c4      	strb	r4, [r0, #3]
 800bbac:	7001      	strb	r1, [r0, #0]
 800bbae:	bc70      	pop	{r4, r5, r6}
 800bbb0:	80c2      	strh	r2, [r0, #6]
 800bbb2:	7143      	strb	r3, [r0, #5]
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop

0800bbb8 <uxr_buffer_create_session>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4d12      	ldr	r5, [pc, #72]	; (800bc08 <uxr_buffer_create_session+0x50>)
 800bbc0:	9307      	str	r3, [sp, #28]
 800bbc2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800bbc6:	7802      	ldrb	r2, [r0, #0]
 800bbc8:	9303      	str	r3, [sp, #12]
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f88d 200c 	strb.w	r2, [sp, #12]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	682a      	ldr	r2, [r5, #0]
 800bbd4:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800bbd8:	88ad      	ldrh	r5, [r5, #4]
 800bbda:	80c1      	strh	r1, [r0, #6]
 800bbdc:	f8ad 1004 	strh.w	r1, [sp, #4]
 800bbe0:	9200      	str	r2, [sp, #0]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	2210      	movs	r2, #16
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800bbec:	9306      	str	r3, [sp, #24]
 800bbee:	f88d 300d 	strb.w	r3, [sp, #13]
 800bbf2:	9602      	str	r6, [sp, #8]
 800bbf4:	f8ad 5006 	strh.w	r5, [sp, #6]
 800bbf8:	f000 fa2c 	bl	800c054 <uxr_buffer_submessage_header>
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4669      	mov	r1, sp
 800bc00:	f001 f964 	bl	800cecc <uxr_serialize_CREATE_CLIENT_Payload>
 800bc04:	b008      	add	sp, #32
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	08012aa8 	.word	0x08012aa8

0800bc0c <uxr_buffer_delete_session>:
 800bc0c:	b530      	push	{r4, r5, lr}
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <uxr_buffer_delete_session+0x34>)
 800bc10:	b083      	sub	sp, #12
 800bc12:	891b      	ldrh	r3, [r3, #8]
 800bc14:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bc18:	2202      	movs	r2, #2
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	80c2      	strh	r2, [r0, #6]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2204      	movs	r2, #4
 800bc22:	4608      	mov	r0, r1
 800bc24:	f44f 7500 	mov.w	r5, #512	; 0x200
 800bc28:	2103      	movs	r1, #3
 800bc2a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800bc2e:	f000 fa11 	bl	800c054 <uxr_buffer_submessage_header>
 800bc32:	4620      	mov	r0, r4
 800bc34:	a901      	add	r1, sp, #4
 800bc36:	f001 f9f7 	bl	800d028 <uxr_serialize_DELETE_Payload>
 800bc3a:	b003      	add	sp, #12
 800bc3c:	bd30      	pop	{r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	08012aa8 	.word	0x08012aa8

0800bc44 <uxr_read_create_session_status>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	4604      	mov	r4, r0
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	a901      	add	r1, sp, #4
 800bc4e:	f001 f9fb 	bl	800d048 <uxr_deserialize_STATUS_AGENT_Payload>
 800bc52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc56:	7163      	strb	r3, [r4, #5]
 800bc58:	b008      	add	sp, #32
 800bc5a:	bd10      	pop	{r4, pc}

0800bc5c <uxr_read_delete_session_status>:
 800bc5c:	b510      	push	{r4, lr}
 800bc5e:	4604      	mov	r4, r0
 800bc60:	b084      	sub	sp, #16
 800bc62:	4608      	mov	r0, r1
 800bc64:	a902      	add	r1, sp, #8
 800bc66:	f001 fa1f 	bl	800d0a8 <uxr_deserialize_STATUS_Payload>
 800bc6a:	88e3      	ldrh	r3, [r4, #6]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d001      	beq.n	800bc74 <uxr_read_delete_session_status+0x18>
 800bc70:	b004      	add	sp, #16
 800bc72:	bd10      	pop	{r4, pc}
 800bc74:	f10d 000a 	add.w	r0, sp, #10
 800bc78:	f7ff f826 	bl	800acc8 <uxr_object_id_from_raw>
 800bc7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800bc80:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800bc84:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	bf04      	itt	eq
 800bc8e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800bc92:	7163      	strbeq	r3, [r4, #5]
 800bc94:	b004      	add	sp, #16
 800bc96:	bd10      	pop	{r4, pc}

0800bc98 <uxr_stamp_create_session_header>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	b08a      	sub	sp, #40	; 0x28
 800bc9e:	a802      	add	r0, sp, #8
 800bca0:	2208      	movs	r2, #8
 800bca2:	f7fe fdb7 	bl	800a814 <ucdr_init_buffer>
 800bca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcaa:	9400      	str	r4, [sp, #0]
 800bcac:	2300      	movs	r3, #0
 800bcae:	a802      	add	r0, sp, #8
 800bcb0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f000 fbcb 	bl	800c450 <uxr_serialize_message_header>
 800bcba:	b00a      	add	sp, #40	; 0x28
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	bf00      	nop

0800bcc0 <uxr_stamp_session_header>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b08c      	sub	sp, #48	; 0x30
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	4616      	mov	r6, r2
 800bcca:	4619      	mov	r1, r3
 800bccc:	a804      	add	r0, sp, #16
 800bcce:	2208      	movs	r2, #8
 800bcd0:	9603      	str	r6, [sp, #12]
 800bcd2:	f7fe fd9f 	bl	800a814 <ucdr_init_buffer>
 800bcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	9400      	str	r4, [sp, #0]
 800bcde:	462a      	mov	r2, r5
 800bce0:	a804      	add	r0, sp, #16
 800bce2:	f000 fbb5 	bl	800c450 <uxr_serialize_message_header>
 800bce6:	b00c      	add	sp, #48	; 0x30
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	bf00      	nop

0800bcec <uxr_read_session_header>:
 800bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4615      	mov	r5, r2
 800bcfa:	461e      	mov	r6, r3
 800bcfc:	f7fe fdba 	bl	800a874 <ucdr_buffer_remaining>
 800bd00:	2808      	cmp	r0, #8
 800bd02:	d803      	bhi.n	800bd0c <uxr_read_session_header+0x20>
 800bd04:	2000      	movs	r0, #0
 800bd06:	b004      	add	sp, #16
 800bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0c:	f10d 080c 	add.w	r8, sp, #12
 800bd10:	4633      	mov	r3, r6
 800bd12:	462a      	mov	r2, r5
 800bd14:	4620      	mov	r0, r4
 800bd16:	f8cd 8000 	str.w	r8, [sp]
 800bd1a:	f10d 010b 	add.w	r1, sp, #11
 800bd1e:	f000 fbb5 	bl	800c48c <uxr_deserialize_message_header>
 800bd22:	783a      	ldrb	r2, [r7, #0]
 800bd24:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d1eb      	bne.n	800bd04 <uxr_read_session_header+0x18>
 800bd2c:	061b      	lsls	r3, r3, #24
 800bd2e:	d41c      	bmi.n	800bd6a <uxr_read_session_header+0x7e>
 800bd30:	f898 2000 	ldrb.w	r2, [r8]
 800bd34:	787b      	ldrb	r3, [r7, #1]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d003      	beq.n	800bd42 <uxr_read_session_header+0x56>
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	f080 0001 	eor.w	r0, r0, #1
 800bd40:	e7e1      	b.n	800bd06 <uxr_read_session_header+0x1a>
 800bd42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bd46:	78bb      	ldrb	r3, [r7, #2]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	f107 0102 	add.w	r1, r7, #2
 800bd4e:	d1f4      	bne.n	800bd3a <uxr_read_session_header+0x4e>
 800bd50:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800bd54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d1ee      	bne.n	800bd3a <uxr_read_session_header+0x4e>
 800bd5c:	784b      	ldrb	r3, [r1, #1]
 800bd5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d1e9      	bne.n	800bd3a <uxr_read_session_header+0x4e>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e7e8      	b.n	800bd3c <uxr_read_session_header+0x50>
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	e7cb      	b.n	800bd06 <uxr_read_session_header+0x1a>
 800bd6e:	bf00      	nop

0800bd70 <uxr_session_header_offset>:
 800bd70:	f990 3000 	ldrsb.w	r3, [r0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	bfac      	ite	ge
 800bd78:	2008      	movge	r0, #8
 800bd7a:	2004      	movlt	r0, #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop

0800bd80 <uxr_init_base_object_request>:
 800bd80:	b530      	push	{r4, r5, lr}
 800bd82:	88c3      	ldrh	r3, [r0, #6]
 800bd84:	b083      	sub	sp, #12
 800bd86:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800bd8a:	9101      	str	r1, [sp, #4]
 800bd8c:	f1a3 010a 	sub.w	r1, r3, #10
 800bd90:	b289      	uxth	r1, r1
 800bd92:	42a1      	cmp	r1, r4
 800bd94:	d80e      	bhi.n	800bdb4 <uxr_init_base_object_request+0x34>
 800bd96:	3301      	adds	r3, #1
 800bd98:	b29c      	uxth	r4, r3
 800bd9a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	80c4      	strh	r4, [r0, #6]
 800bda2:	1c91      	adds	r1, r2, #2
 800bda4:	9801      	ldr	r0, [sp, #4]
 800bda6:	7015      	strb	r5, [r2, #0]
 800bda8:	7053      	strb	r3, [r2, #1]
 800bdaa:	f7fe ffa1 	bl	800acf0 <uxr_object_id_to_raw>
 800bdae:	4620      	mov	r0, r4
 800bdb0:	b003      	add	sp, #12
 800bdb2:	bd30      	pop	{r4, r5, pc}
 800bdb4:	230a      	movs	r3, #10
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	2500      	movs	r5, #0
 800bdba:	e7f1      	b.n	800bda0 <uxr_init_base_object_request+0x20>

0800bdbc <uxr_parse_base_object_request>:
 800bdbc:	b570      	push	{r4, r5, r6, lr}
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	3002      	adds	r0, #2
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	f7fe ff7f 	bl	800acc8 <uxr_object_id_from_raw>
 800bdca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800bdce:	8028      	strh	r0, [r5, #0]
 800bdd0:	806b      	strh	r3, [r5, #2]
 800bdd2:	7822      	ldrb	r2, [r4, #0]
 800bdd4:	7863      	ldrb	r3, [r4, #1]
 800bdd6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800bdda:	8033      	strh	r3, [r6, #0]
 800bddc:	bd70      	pop	{r4, r5, r6, pc}
 800bdde:	bf00      	nop

0800bde0 <uxr_stream_id>:
 800bde0:	b410      	push	{r4}
 800bde2:	2901      	cmp	r1, #1
 800bde4:	b083      	sub	sp, #12
 800bde6:	d01f      	beq.n	800be28 <uxr_stream_id+0x48>
 800bde8:	2902      	cmp	r1, #2
 800bdea:	f04f 0400 	mov.w	r4, #0
 800bdee:	d01e      	beq.n	800be2e <uxr_stream_id+0x4e>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f364 0307 	bfi	r3, r4, #0, #8
 800bdf6:	f360 230f 	bfi	r3, r0, #8, #8
 800bdfa:	f361 4317 	bfi	r3, r1, #16, #8
 800bdfe:	f362 631f 	bfi	r3, r2, #24, #8
 800be02:	b2da      	uxtb	r2, r3
 800be04:	2000      	movs	r0, #0
 800be06:	f362 0007 	bfi	r0, r2, #0, #8
 800be0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800be0e:	f362 200f 	bfi	r0, r2, #8, #8
 800be12:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800be16:	f362 4017 	bfi	r0, r2, #16, #8
 800be1a:	0e1b      	lsrs	r3, r3, #24
 800be1c:	f363 601f 	bfi	r0, r3, #24, #8
 800be20:	b003      	add	sp, #12
 800be22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	1c44      	adds	r4, r0, #1
 800be2a:	b2e4      	uxtb	r4, r4
 800be2c:	e7e0      	b.n	800bdf0 <uxr_stream_id+0x10>
 800be2e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800be32:	e7dd      	b.n	800bdf0 <uxr_stream_id+0x10>

0800be34 <uxr_stream_id_from_raw>:
 800be34:	b410      	push	{r4}
 800be36:	b083      	sub	sp, #12
 800be38:	b128      	cbz	r0, 800be46 <uxr_stream_id_from_raw+0x12>
 800be3a:	0603      	lsls	r3, r0, #24
 800be3c:	d421      	bmi.n	800be82 <uxr_stream_id_from_raw+0x4e>
 800be3e:	1e42      	subs	r2, r0, #1
 800be40:	b2d2      	uxtb	r2, r2
 800be42:	2401      	movs	r4, #1
 800be44:	e001      	b.n	800be4a <uxr_stream_id_from_raw+0x16>
 800be46:	4604      	mov	r4, r0
 800be48:	4602      	mov	r2, r0
 800be4a:	2300      	movs	r3, #0
 800be4c:	f360 0307 	bfi	r3, r0, #0, #8
 800be50:	f362 230f 	bfi	r3, r2, #8, #8
 800be54:	f364 4317 	bfi	r3, r4, #16, #8
 800be58:	f361 631f 	bfi	r3, r1, #24, #8
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	2000      	movs	r0, #0
 800be60:	f362 0007 	bfi	r0, r2, #0, #8
 800be64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800be68:	f362 200f 	bfi	r0, r2, #8, #8
 800be6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800be70:	f362 4017 	bfi	r0, r2, #16, #8
 800be74:	0e1b      	lsrs	r3, r3, #24
 800be76:	f363 601f 	bfi	r0, r3, #24, #8
 800be7a:	b003      	add	sp, #12
 800be7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800be86:	2402      	movs	r4, #2
 800be88:	e7df      	b.n	800be4a <uxr_stream_id_from_raw+0x16>
 800be8a:	bf00      	nop

0800be8c <uxr_init_stream_storage>:
 800be8c:	2300      	movs	r3, #0
 800be8e:	7403      	strb	r3, [r0, #16]
 800be90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800be94:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800be98:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop

0800bea0 <uxr_reset_stream_storage>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	7c03      	ldrb	r3, [r0, #16]
 800bea4:	4604      	mov	r4, r0
 800bea6:	b153      	cbz	r3, 800bebe <uxr_reset_stream_storage+0x1e>
 800bea8:	4606      	mov	r6, r0
 800beaa:	2500      	movs	r5, #0
 800beac:	4630      	mov	r0, r6
 800beae:	f003 ff5d 	bl	800fd6c <uxr_reset_output_best_effort_stream>
 800beb2:	7c23      	ldrb	r3, [r4, #16]
 800beb4:	3501      	adds	r5, #1
 800beb6:	42ab      	cmp	r3, r5
 800beb8:	f106 0610 	add.w	r6, r6, #16
 800bebc:	d8f6      	bhi.n	800beac <uxr_reset_stream_storage+0xc>
 800bebe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bec2:	b163      	cbz	r3, 800bede <uxr_reset_stream_storage+0x3e>
 800bec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bec8:	2500      	movs	r5, #0
 800beca:	4630      	mov	r0, r6
 800becc:	f003 fd5a 	bl	800f984 <uxr_reset_input_best_effort_stream>
 800bed0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bed4:	3501      	adds	r5, #1
 800bed6:	42ab      	cmp	r3, r5
 800bed8:	f106 0602 	add.w	r6, r6, #2
 800bedc:	d8f5      	bhi.n	800beca <uxr_reset_stream_storage+0x2a>
 800bede:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bee2:	b163      	cbz	r3, 800befe <uxr_reset_stream_storage+0x5e>
 800bee4:	f104 0618 	add.w	r6, r4, #24
 800bee8:	2500      	movs	r5, #0
 800beea:	4630      	mov	r0, r6
 800beec:	f003 ffde 	bl	800feac <uxr_reset_output_reliable_stream>
 800bef0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800bef4:	3501      	adds	r5, #1
 800bef6:	42ab      	cmp	r3, r5
 800bef8:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800befc:	d8f5      	bhi.n	800beea <uxr_reset_stream_storage+0x4a>
 800befe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bf02:	b163      	cbz	r3, 800bf1e <uxr_reset_stream_storage+0x7e>
 800bf04:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800bf08:	2500      	movs	r5, #0
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f003 fda2 	bl	800fa54 <uxr_reset_input_reliable_stream>
 800bf10:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800bf14:	3501      	adds	r5, #1
 800bf16:	42ab      	cmp	r3, r5
 800bf18:	f106 0618 	add.w	r6, r6, #24
 800bf1c:	d8f5      	bhi.n	800bf0a <uxr_reset_stream_storage+0x6a>
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}

0800bf20 <uxr_add_output_best_effort_buffer>:
 800bf20:	b530      	push	{r4, r5, lr}
 800bf22:	7c04      	ldrb	r4, [r0, #16]
 800bf24:	1c65      	adds	r5, r4, #1
 800bf26:	b083      	sub	sp, #12
 800bf28:	7405      	strb	r5, [r0, #16]
 800bf2a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800bf2e:	f003 ff11 	bl	800fd54 <uxr_init_output_best_effort_stream>
 800bf32:	2201      	movs	r2, #1
 800bf34:	4620      	mov	r0, r4
 800bf36:	4611      	mov	r1, r2
 800bf38:	b003      	add	sp, #12
 800bf3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf3e:	f7ff bf4f 	b.w	800bde0 <uxr_stream_id>
 800bf42:	bf00      	nop

0800bf44 <uxr_add_output_reliable_buffer>:
 800bf44:	b570      	push	{r4, r5, r6, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800bf4c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800bf50:	9600      	str	r6, [sp, #0]
 800bf52:	2528      	movs	r5, #40	; 0x28
 800bf54:	1c66      	adds	r6, r4, #1
 800bf56:	fb05 0504 	mla	r5, r5, r4, r0
 800bf5a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800bf5e:	f105 0018 	add.w	r0, r5, #24
 800bf62:	f003 ff71 	bl	800fe48 <uxr_init_output_reliable_stream>
 800bf66:	4620      	mov	r0, r4
 800bf68:	2201      	movs	r2, #1
 800bf6a:	2102      	movs	r1, #2
 800bf6c:	b004      	add	sp, #16
 800bf6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf72:	f7ff bf35 	b.w	800bde0 <uxr_stream_id>
 800bf76:	bf00      	nop

0800bf78 <uxr_add_input_best_effort_buffer>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800bf7e:	1c62      	adds	r2, r4, #1
 800bf80:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800bf84:	b082      	sub	sp, #8
 800bf86:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800bf8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800bf8e:	f003 fcf5 	bl	800f97c <uxr_init_input_best_effort_stream>
 800bf92:	4620      	mov	r0, r4
 800bf94:	2200      	movs	r2, #0
 800bf96:	2101      	movs	r1, #1
 800bf98:	b002      	add	sp, #8
 800bf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf9e:	f7ff bf1f 	b.w	800bde0 <uxr_stream_id>
 800bfa2:	bf00      	nop

0800bfa4 <uxr_add_input_reliable_buffer>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800bfac:	9e08      	ldr	r6, [sp, #32]
 800bfae:	9600      	str	r6, [sp, #0]
 800bfb0:	2518      	movs	r5, #24
 800bfb2:	1c66      	adds	r6, r4, #1
 800bfb4:	fb05 0504 	mla	r5, r5, r4, r0
 800bfb8:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800bfbc:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800bfc0:	f003 fd24 	bl	800fa0c <uxr_init_input_reliable_stream>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2102      	movs	r1, #2
 800bfca:	b004      	add	sp, #16
 800bfcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfd0:	f7ff bf06 	b.w	800bde0 <uxr_stream_id>

0800bfd4 <uxr_get_output_best_effort_stream>:
 800bfd4:	7c03      	ldrb	r3, [r0, #16]
 800bfd6:	428b      	cmp	r3, r1
 800bfd8:	bf8c      	ite	hi
 800bfda:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800bfde:	2000      	movls	r0, #0
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop

0800bfe4 <uxr_get_output_reliable_stream>:
 800bfe4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	bf83      	ittte	hi
 800bfec:	2328      	movhi	r3, #40	; 0x28
 800bfee:	fb03 0101 	mlahi	r1, r3, r1, r0
 800bff2:	f101 0018 	addhi.w	r0, r1, #24
 800bff6:	2000      	movls	r0, #0
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop

0800bffc <uxr_get_input_best_effort_stream>:
 800bffc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c000:	428b      	cmp	r3, r1
 800c002:	bf86      	itte	hi
 800c004:	3121      	addhi	r1, #33	; 0x21
 800c006:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800c00a:	2000      	movls	r0, #0
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop

0800c010 <uxr_get_input_reliable_stream>:
 800c010:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800c014:	428b      	cmp	r3, r1
 800c016:	bf83      	ittte	hi
 800c018:	2318      	movhi	r3, #24
 800c01a:	fb03 0101 	mlahi	r1, r3, r1, r0
 800c01e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800c022:	2000      	movls	r0, #0
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop

0800c028 <uxr_output_streams_confirmed>:
 800c028:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c02c:	b183      	cbz	r3, 800c050 <uxr_output_streams_confirmed+0x28>
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	4606      	mov	r6, r0
 800c032:	f100 0518 	add.w	r5, r0, #24
 800c036:	2400      	movs	r4, #0
 800c038:	e001      	b.n	800c03e <uxr_output_streams_confirmed+0x16>
 800c03a:	3528      	adds	r5, #40	; 0x28
 800c03c:	b138      	cbz	r0, 800c04e <uxr_output_streams_confirmed+0x26>
 800c03e:	4628      	mov	r0, r5
 800c040:	f004 f9a4 	bl	801038c <uxr_is_output_up_to_date>
 800c044:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800c048:	3401      	adds	r4, #1
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	d8f5      	bhi.n	800c03a <uxr_output_streams_confirmed+0x12>
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	2001      	movs	r0, #1
 800c052:	4770      	bx	lr

0800c054 <uxr_buffer_submessage_header>:
 800c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c056:	4604      	mov	r4, r0
 800c058:	460e      	mov	r6, r1
 800c05a:	2104      	movs	r1, #4
 800c05c:	4615      	mov	r5, r2
 800c05e:	461f      	mov	r7, r3
 800c060:	f7fe fbf2 	bl	800a848 <ucdr_align_to>
 800c064:	2301      	movs	r3, #1
 800c066:	ea47 0203 	orr.w	r2, r7, r3
 800c06a:	4631      	mov	r1, r6
 800c06c:	7523      	strb	r3, [r4, #20]
 800c06e:	4620      	mov	r0, r4
 800c070:	462b      	mov	r3, r5
 800c072:	f000 fa2b 	bl	800c4cc <uxr_serialize_submessage_header>
 800c076:	4620      	mov	r0, r4
 800c078:	f7fe fbfc 	bl	800a874 <ucdr_buffer_remaining>
 800c07c:	42a8      	cmp	r0, r5
 800c07e:	bf34      	ite	cc
 800c080:	2000      	movcc	r0, #0
 800c082:	2001      	movcs	r0, #1
 800c084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c086:	bf00      	nop

0800c088 <uxr_read_submessage_header>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	2104      	movs	r1, #4
 800c092:	4616      	mov	r6, r2
 800c094:	4698      	mov	r8, r3
 800c096:	f7fe fbd7 	bl	800a848 <ucdr_align_to>
 800c09a:	4620      	mov	r0, r4
 800c09c:	f7fe fbea 	bl	800a874 <ucdr_buffer_remaining>
 800c0a0:	2803      	cmp	r0, #3
 800c0a2:	bf8c      	ite	hi
 800c0a4:	2701      	movhi	r7, #1
 800c0a6:	2700      	movls	r7, #0
 800c0a8:	d802      	bhi.n	800c0b0 <uxr_read_submessage_header+0x28>
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b0:	4633      	mov	r3, r6
 800c0b2:	4642      	mov	r2, r8
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f000 fa1c 	bl	800c4f4 <uxr_deserialize_submessage_header>
 800c0bc:	f898 3000 	ldrb.w	r3, [r8]
 800c0c0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	f888 2000 	strb.w	r2, [r8]
 800c0cc:	7523      	strb	r3, [r4, #20]
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0d4 <uxr_submessage_padding>:
 800c0d4:	f010 0003 	ands.w	r0, r0, #3
 800c0d8:	bf18      	it	ne
 800c0da:	f1c0 0004 	rsbne	r0, r0, #4
 800c0de:	4770      	bx	lr

0800c0e0 <uxr_millis>:
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	4669      	mov	r1, sp
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	f7f5 f952 	bl	8001390 <clock_gettime>
 800c0ec:	e9dd 2400 	ldrd	r2, r4, [sp]
 800c0f0:	4907      	ldr	r1, [pc, #28]	; (800c110 <uxr_millis+0x30>)
 800c0f2:	9802      	ldr	r0, [sp, #8]
 800c0f4:	fba2 2301 	umull	r2, r3, r2, r1
 800c0f8:	fb01 3304 	mla	r3, r1, r4, r3
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	1810      	adds	r0, r2, r0
 800c100:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800c104:	4a03      	ldr	r2, [pc, #12]	; (800c114 <uxr_millis+0x34>)
 800c106:	2300      	movs	r3, #0
 800c108:	f7f4 f8ea 	bl	80002e0 <__aeabi_ldivmod>
 800c10c:	b004      	add	sp, #16
 800c10e:	bd10      	pop	{r4, pc}
 800c110:	3b9aca00 	.word	0x3b9aca00
 800c114:	000f4240 	.word	0x000f4240

0800c118 <uxr_nanos>:
 800c118:	b510      	push	{r4, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	4669      	mov	r1, sp
 800c11e:	2001      	movs	r0, #1
 800c120:	f7f5 f936 	bl	8001390 <clock_gettime>
 800c124:	e9dd 2400 	ldrd	r2, r4, [sp]
 800c128:	4905      	ldr	r1, [pc, #20]	; (800c140 <uxr_nanos+0x28>)
 800c12a:	9802      	ldr	r0, [sp, #8]
 800c12c:	fba2 2301 	umull	r2, r3, r2, r1
 800c130:	fb01 3304 	mla	r3, r1, r4, r3
 800c134:	4604      	mov	r4, r0
 800c136:	1810      	adds	r0, r2, r0
 800c138:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800c13c:	b004      	add	sp, #16
 800c13e:	bd10      	pop	{r4, pc}
 800c140:	3b9aca00 	.word	0x3b9aca00

0800c144 <on_full_output_buffer_fragmented>:
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	b08a      	sub	sp, #40	; 0x28
 800c14c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800c150:	4606      	mov	r6, r0
 800c152:	f104 0008 	add.w	r0, r4, #8
 800c156:	f7ff ff45 	bl	800bfe4 <uxr_get_output_reliable_stream>
 800c15a:	4605      	mov	r5, r0
 800c15c:	f004 f920 	bl	80103a0 <get_available_free_slots>
 800c160:	b968      	cbnz	r0, 800c17e <on_full_output_buffer_fragmented+0x3a>
 800c162:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800c166:	4620      	mov	r0, r4
 800c168:	4798      	blx	r3
 800c16a:	b918      	cbnz	r0, 800c174 <on_full_output_buffer_fragmented+0x30>
 800c16c:	2001      	movs	r0, #1
 800c16e:	b00a      	add	sp, #40	; 0x28
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	4628      	mov	r0, r5
 800c176:	f004 f913 	bl	80103a0 <get_available_free_slots>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d0f6      	beq.n	800c16c <on_full_output_buffer_fragmented+0x28>
 800c17e:	8928      	ldrh	r0, [r5, #8]
 800c180:	89eb      	ldrh	r3, [r5, #14]
 800c182:	7b2a      	ldrb	r2, [r5, #12]
 800c184:	fbb3 f1f0 	udiv	r1, r3, r0
 800c188:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 800c18c:	fb00 3111 	mls	r1, r0, r1, r3
 800c190:	b28b      	uxth	r3, r1
 800c192:	32fc      	adds	r2, #252	; 0xfc
 800c194:	6869      	ldr	r1, [r5, #4]
 800c196:	fbb1 f1f0 	udiv	r1, r1, r0
 800c19a:	1f0f      	subs	r7, r1, #4
 800c19c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800c1a0:	fb01 f103 	mul.w	r1, r1, r3
 800c1a4:	443a      	add	r2, r7
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	fa1f f882 	uxth.w	r8, r2
 800c1ac:	3104      	adds	r1, #4
 800c1ae:	4419      	add	r1, r3
 800c1b0:	eba0 0008 	sub.w	r0, r0, r8
 800c1b4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800c1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	463a      	mov	r2, r7
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	a802      	add	r0, sp, #8
 800c1c4:	f7fe fb14 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800c1c8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800c1cc:	f102 0308 	add.w	r3, r2, #8
 800c1d0:	42bb      	cmp	r3, r7
 800c1d2:	d927      	bls.n	800c224 <on_full_output_buffer_fragmented+0xe0>
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	210d      	movs	r1, #13
 800c1da:	a802      	add	r0, sp, #8
 800c1dc:	f7ff ff3a 	bl	800c054 <uxr_buffer_submessage_header>
 800c1e0:	8928      	ldrh	r0, [r5, #8]
 800c1e2:	89eb      	ldrh	r3, [r5, #14]
 800c1e4:	fbb3 f1f0 	udiv	r1, r3, r0
 800c1e8:	fb00 3111 	mls	r1, r0, r1, r3
 800c1ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1f0:	b289      	uxth	r1, r1
 800c1f2:	fbb3 f3f0 	udiv	r3, r3, r0
 800c1f6:	fb03 f301 	mul.w	r3, r3, r1
 800c1fa:	50d7      	str	r7, [r2, r3]
 800c1fc:	89e8      	ldrh	r0, [r5, #14]
 800c1fe:	2101      	movs	r1, #1
 800c200:	f004 f9da 	bl	80105b8 <uxr_seq_num_add>
 800c204:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c208:	81e8      	strh	r0, [r5, #14]
 800c20a:	1a52      	subs	r2, r2, r1
 800c20c:	4630      	mov	r0, r6
 800c20e:	f7fe fb01 	bl	800a814 <ucdr_init_buffer>
 800c212:	4630      	mov	r0, r6
 800c214:	490f      	ldr	r1, [pc, #60]	; (800c254 <on_full_output_buffer_fragmented+0x110>)
 800c216:	4622      	mov	r2, r4
 800c218:	f7fe fad2 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800c21c:	2000      	movs	r0, #0
 800c21e:	b00a      	add	sp, #40	; 0x28
 800c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c224:	b292      	uxth	r2, r2
 800c226:	2302      	movs	r3, #2
 800c228:	210d      	movs	r1, #13
 800c22a:	a802      	add	r0, sp, #8
 800c22c:	f7ff ff12 	bl	800c054 <uxr_buffer_submessage_header>
 800c230:	8928      	ldrh	r0, [r5, #8]
 800c232:	89eb      	ldrh	r3, [r5, #14]
 800c234:	fbb3 f2f0 	udiv	r2, r3, r0
 800c238:	fb00 3212 	mls	r2, r0, r2, r3
 800c23c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800c240:	686b      	ldr	r3, [r5, #4]
 800c242:	fbb3 f3f0 	udiv	r3, r3, r0
 800c246:	b292      	uxth	r2, r2
 800c248:	6828      	ldr	r0, [r5, #0]
 800c24a:	fb03 f302 	mul.w	r3, r3, r2
 800c24e:	3108      	adds	r1, #8
 800c250:	50c1      	str	r1, [r0, r3]
 800c252:	e7d3      	b.n	800c1fc <on_full_output_buffer_fragmented+0xb8>
 800c254:	0800c145 	.word	0x0800c145

0800c258 <uxr_prepare_output_stream>:
 800c258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25a:	b087      	sub	sp, #28
 800c25c:	2407      	movs	r4, #7
 800c25e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c260:	9202      	str	r2, [sp, #8]
 800c262:	2500      	movs	r5, #0
 800c264:	1d32      	adds	r2, r6, #4
 800c266:	e9cd 4500 	strd	r4, r5, [sp]
 800c26a:	9103      	str	r1, [sp, #12]
 800c26c:	461c      	mov	r4, r3
 800c26e:	4606      	mov	r6, r0
 800c270:	f7ff fc4c 	bl	800bb0c <uxr_prepare_stream_to_write_submessage>
 800c274:	f080 0201 	eor.w	r2, r0, #1
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	75a2      	strb	r2, [r4, #22]
 800c27c:	b112      	cbz	r2, 800c284 <uxr_prepare_output_stream+0x2c>
 800c27e:	4628      	mov	r0, r5
 800c280:	b007      	add	sp, #28
 800c282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c284:	aa05      	add	r2, sp, #20
 800c286:	9902      	ldr	r1, [sp, #8]
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff fd79 	bl	800bd80 <uxr_init_base_object_request>
 800c28e:	a905      	add	r1, sp, #20
 800c290:	4605      	mov	r5, r0
 800c292:	4620      	mov	r0, r4
 800c294:	f000 ff86 	bl	800d1a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c298:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800c29c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800c2a0:	1a52      	subs	r2, r2, r1
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f7fe fab6 	bl	800a814 <ucdr_init_buffer>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	f7fe fa87 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	b007      	add	sp, #28
 800c2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2b8 <uxr_prepare_output_stream_fragmented>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	b093      	sub	sp, #76	; 0x4c
 800c2be:	4605      	mov	r5, r0
 800c2c0:	9107      	str	r1, [sp, #28]
 800c2c2:	3008      	adds	r0, #8
 800c2c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800c2c8:	9303      	str	r3, [sp, #12]
 800c2ca:	9206      	str	r2, [sp, #24]
 800c2cc:	f7ff fe8a 	bl	800bfe4 <uxr_get_output_reliable_stream>
 800c2d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	f000 8094 	beq.w	800c402 <uxr_prepare_output_stream_fragmented+0x14a>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f000 8090 	beq.w	800c402 <uxr_prepare_output_stream_fragmented+0x14a>
 800c2e2:	f004 f85d 	bl	80103a0 <get_available_free_slots>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	f000 8086 	beq.w	800c3f8 <uxr_prepare_output_stream_fragmented+0x140>
 800c2ec:	8922      	ldrh	r2, [r4, #8]
 800c2ee:	89e7      	ldrh	r7, [r4, #14]
 800c2f0:	fbb7 f8f2 	udiv	r8, r7, r2
 800c2f4:	e9d4 3100 	ldrd	r3, r1, [r4]
 800c2f8:	fb02 7818 	mls	r8, r2, r8, r7
 800c2fc:	fa1f f888 	uxth.w	r8, r8
 800c300:	fbb1 f2f2 	udiv	r2, r1, r2
 800c304:	fb02 f808 	mul.w	r8, r2, r8
 800c308:	f108 0804 	add.w	r8, r8, #4
 800c30c:	4498      	add	r8, r3
 800c30e:	7b23      	ldrb	r3, [r4, #12]
 800c310:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800c314:	9204      	str	r2, [sp, #16]
 800c316:	4553      	cmp	r3, sl
 800c318:	f1a2 0b04 	sub.w	fp, r2, #4
 800c31c:	d37d      	bcc.n	800c41a <uxr_prepare_output_stream_fragmented+0x162>
 800c31e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c320:	f8cd a000 	str.w	sl, [sp]
 800c324:	f1ab 0904 	sub.w	r9, fp, #4
 800c328:	eba9 0903 	sub.w	r9, r9, r3
 800c32c:	3608      	adds	r6, #8
 800c32e:	a80a      	add	r0, sp, #40	; 0x28
 800c330:	2300      	movs	r3, #0
 800c332:	465a      	mov	r2, fp
 800c334:	4641      	mov	r1, r8
 800c336:	fa1f f989 	uxth.w	r9, r9
 800c33a:	9605      	str	r6, [sp, #20]
 800c33c:	f7fe fa58 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800c340:	455e      	cmp	r6, fp
 800c342:	bf34      	ite	cc
 800c344:	2302      	movcc	r3, #2
 800c346:	2300      	movcs	r3, #0
 800c348:	464a      	mov	r2, r9
 800c34a:	210d      	movs	r1, #13
 800c34c:	a80a      	add	r0, sp, #40	; 0x28
 800c34e:	f7ff fe81 	bl	800c054 <uxr_buffer_submessage_header>
 800c352:	8920      	ldrh	r0, [r4, #8]
 800c354:	fbb7 f3f0 	udiv	r3, r7, r0
 800c358:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c35c:	fb00 7313 	mls	r3, r0, r3, r7
 800c360:	b29b      	uxth	r3, r3
 800c362:	fbb1 f1f0 	udiv	r1, r1, r0
 800c366:	fb03 f301 	mul.w	r3, r3, r1
 800c36a:	4638      	mov	r0, r7
 800c36c:	f842 b003 	str.w	fp, [r2, r3]
 800c370:	2101      	movs	r1, #1
 800c372:	f004 f921 	bl	80105b8 <uxr_seq_num_add>
 800c376:	9b04      	ldr	r3, [sp, #16]
 800c378:	9e03      	ldr	r6, [sp, #12]
 800c37a:	f1a3 0208 	sub.w	r2, r3, #8
 800c37e:	f10a 0104 	add.w	r1, sl, #4
 800c382:	4607      	mov	r7, r0
 800c384:	eba2 020a 	sub.w	r2, r2, sl
 800c388:	4441      	add	r1, r8
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7fe fa42 	bl	800a814 <ucdr_init_buffer>
 800c390:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c392:	81e7      	strh	r7, [r4, #14]
 800c394:	1d1a      	adds	r2, r3, #4
 800c396:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c39a:	bf28      	it	cs
 800c39c:	2200      	movcs	r2, #0
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2107      	movs	r1, #7
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff fe55 	bl	800c054 <uxr_buffer_submessage_header>
 800c3aa:	9906      	ldr	r1, [sp, #24]
 800c3ac:	aa09      	add	r2, sp, #36	; 0x24
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f7ff fce6 	bl	800bd80 <uxr_init_base_object_request>
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	b328      	cbz	r0, 800c404 <uxr_prepare_output_stream_fragmented+0x14c>
 800c3b8:	9e03      	ldr	r6, [sp, #12]
 800c3ba:	a909      	add	r1, sp, #36	; 0x24
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f000 fef1 	bl	800d1a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 800c3c2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	1a52      	subs	r2, r2, r1
 800c3ca:	f7fe fa23 	bl	800a814 <ucdr_init_buffer>
 800c3ce:	9a05      	ldr	r2, [sp, #20]
 800c3d0:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800c3d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c3d6:	9b07      	ldr	r3, [sp, #28]
 800c3d8:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800c3dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c3de:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	4919      	ldr	r1, [pc, #100]	; (800c44c <uxr_prepare_output_stream_fragmented+0x194>)
 800c3e6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800c3ea:	462a      	mov	r2, r5
 800c3ec:	f7fe f9e8 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	b013      	add	sp, #76	; 0x4c
 800c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c3fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	4798      	blx	r3
 800c400:	b920      	cbnz	r0, 800c40c <uxr_prepare_output_stream_fragmented+0x154>
 800c402:	2400      	movs	r4, #0
 800c404:	4620      	mov	r0, r4
 800c406:	b013      	add	sp, #76	; 0x4c
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	4620      	mov	r0, r4
 800c40e:	f003 ffc7 	bl	80103a0 <get_available_free_slots>
 800c412:	2800      	cmp	r0, #0
 800c414:	f47f af6a 	bne.w	800c2ec <uxr_prepare_output_stream_fragmented+0x34>
 800c418:	e7f3      	b.n	800c402 <uxr_prepare_output_stream_fragmented+0x14a>
 800c41a:	4638      	mov	r0, r7
 800c41c:	2101      	movs	r1, #1
 800c41e:	f004 f8cb 	bl	80105b8 <uxr_seq_num_add>
 800c422:	8922      	ldrh	r2, [r4, #8]
 800c424:	fbb0 f8f2 	udiv	r8, r0, r2
 800c428:	fb02 0818 	mls	r8, r2, r8, r0
 800c42c:	fa1f f888 	uxth.w	r8, r8
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	fbb3 f3f2 	udiv	r3, r3, r2
 800c436:	6822      	ldr	r2, [r4, #0]
 800c438:	fb08 f803 	mul.w	r8, r8, r3
 800c43c:	f108 0804 	add.w	r8, r8, #4
 800c440:	4490      	add	r8, r2
 800c442:	7b23      	ldrb	r3, [r4, #12]
 800c444:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800c448:	4607      	mov	r7, r0
 800c44a:	e768      	b.n	800c31e <uxr_prepare_output_stream_fragmented+0x66>
 800c44c:	0800c145 	.word	0x0800c145

0800c450 <uxr_serialize_message_header>:
 800c450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c452:	b083      	sub	sp, #12
 800c454:	4616      	mov	r6, r2
 800c456:	4604      	mov	r4, r0
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	460d      	mov	r5, r1
 800c45c:	9f08      	ldr	r7, [sp, #32]
 800c45e:	f7fc ffd7 	bl	8009410 <ucdr_serialize_uint8_t>
 800c462:	4631      	mov	r1, r6
 800c464:	4620      	mov	r0, r4
 800c466:	f7fc ffd3 	bl	8009410 <ucdr_serialize_uint8_t>
 800c46a:	9a01      	ldr	r2, [sp, #4]
 800c46c:	4620      	mov	r0, r4
 800c46e:	2101      	movs	r1, #1
 800c470:	f7fd f87a 	bl	8009568 <ucdr_serialize_endian_uint16_t>
 800c474:	062b      	lsls	r3, r5, #24
 800c476:	d501      	bpl.n	800c47c <uxr_serialize_message_header+0x2c>
 800c478:	b003      	add	sp, #12
 800c47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47c:	4639      	mov	r1, r7
 800c47e:	4620      	mov	r0, r4
 800c480:	2204      	movs	r2, #4
 800c482:	b003      	add	sp, #12
 800c484:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c488:	f003 b82c 	b.w	800f4e4 <ucdr_serialize_array_uint8_t>

0800c48c <uxr_deserialize_message_header>:
 800c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48e:	b083      	sub	sp, #12
 800c490:	4616      	mov	r6, r2
 800c492:	4604      	mov	r4, r0
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	460d      	mov	r5, r1
 800c498:	9f08      	ldr	r7, [sp, #32]
 800c49a:	f7fc ffcf 	bl	800943c <ucdr_deserialize_uint8_t>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f7fc ffcb 	bl	800943c <ucdr_deserialize_uint8_t>
 800c4a6:	9a01      	ldr	r2, [sp, #4]
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	f7fd f950 	bl	8009750 <ucdr_deserialize_endian_uint16_t>
 800c4b0:	f995 3000 	ldrsb.w	r3, [r5]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	da01      	bge.n	800c4bc <uxr_deserialize_message_header+0x30>
 800c4b8:	b003      	add	sp, #12
 800c4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4bc:	4639      	mov	r1, r7
 800c4be:	4620      	mov	r0, r4
 800c4c0:	2204      	movs	r2, #4
 800c4c2:	b003      	add	sp, #12
 800c4c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c4c8:	f003 b870 	b.w	800f5ac <ucdr_deserialize_array_uint8_t>

0800c4cc <uxr_serialize_submessage_header>:
 800c4cc:	b530      	push	{r4, r5, lr}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	4615      	mov	r5, r2
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	f7fc ff9b 	bl	8009410 <ucdr_serialize_uint8_t>
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7fc ff97 	bl	8009410 <ucdr_serialize_uint8_t>
 800c4e2:	9a01      	ldr	r2, [sp, #4]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	b003      	add	sp, #12
 800c4ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4ee:	f7fd b83b 	b.w	8009568 <ucdr_serialize_endian_uint16_t>
 800c4f2:	bf00      	nop

0800c4f4 <uxr_deserialize_submessage_header>:
 800c4f4:	b530      	push	{r4, r5, lr}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	4615      	mov	r5, r2
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	f7fc ff9d 	bl	800943c <ucdr_deserialize_uint8_t>
 800c502:	4629      	mov	r1, r5
 800c504:	4620      	mov	r0, r4
 800c506:	f7fc ff99 	bl	800943c <ucdr_deserialize_uint8_t>
 800c50a:	9a01      	ldr	r2, [sp, #4]
 800c50c:	4620      	mov	r0, r4
 800c50e:	2101      	movs	r1, #1
 800c510:	b003      	add	sp, #12
 800c512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c516:	f7fd b91b 	b.w	8009750 <ucdr_deserialize_endian_uint16_t>
 800c51a:	bf00      	nop

0800c51c <uxr_serialize_CLIENT_Representation>:
 800c51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c520:	2204      	movs	r2, #4
 800c522:	460c      	mov	r4, r1
 800c524:	4605      	mov	r5, r0
 800c526:	f002 ffdd 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c52a:	1d21      	adds	r1, r4, #4
 800c52c:	4607      	mov	r7, r0
 800c52e:	2202      	movs	r2, #2
 800c530:	4628      	mov	r0, r5
 800c532:	f002 ffd7 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c536:	1da1      	adds	r1, r4, #6
 800c538:	4007      	ands	r7, r0
 800c53a:	2202      	movs	r2, #2
 800c53c:	4628      	mov	r0, r5
 800c53e:	f002 ffd1 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c542:	fa5f f887 	uxtb.w	r8, r7
 800c546:	2204      	movs	r2, #4
 800c548:	4607      	mov	r7, r0
 800c54a:	f104 0108 	add.w	r1, r4, #8
 800c54e:	4628      	mov	r0, r5
 800c550:	f002 ffc8 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c554:	ea08 0707 	and.w	r7, r8, r7
 800c558:	7b21      	ldrb	r1, [r4, #12]
 800c55a:	4680      	mov	r8, r0
 800c55c:	4628      	mov	r0, r5
 800c55e:	f7fc ff57 	bl	8009410 <ucdr_serialize_uint8_t>
 800c562:	ea08 0807 	and.w	r8, r8, r7
 800c566:	7b61      	ldrb	r1, [r4, #13]
 800c568:	4607      	mov	r7, r0
 800c56a:	4628      	mov	r0, r5
 800c56c:	f7fc ff20 	bl	80093b0 <ucdr_serialize_bool>
 800c570:	7b63      	ldrb	r3, [r4, #13]
 800c572:	ea08 0707 	and.w	r7, r8, r7
 800c576:	ea07 0600 	and.w	r6, r7, r0
 800c57a:	b933      	cbnz	r3, 800c58a <uxr_serialize_CLIENT_Representation+0x6e>
 800c57c:	8ba1      	ldrh	r1, [r4, #28]
 800c57e:	4628      	mov	r0, r5
 800c580:	f7fc ff72 	bl	8009468 <ucdr_serialize_uint16_t>
 800c584:	4030      	ands	r0, r6
 800c586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c58a:	6921      	ldr	r1, [r4, #16]
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7fd f955 	bl	800983c <ucdr_serialize_uint32_t>
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	b1cb      	cbz	r3, 800c5ca <uxr_serialize_CLIENT_Representation+0xae>
 800c596:	b1d0      	cbz	r0, 800c5ce <uxr_serialize_CLIENT_Representation+0xb2>
 800c598:	46a0      	mov	r8, r4
 800c59a:	f04f 0900 	mov.w	r9, #0
 800c59e:	e002      	b.n	800c5a6 <uxr_serialize_CLIENT_Representation+0x8a>
 800c5a0:	f108 0808 	add.w	r8, r8, #8
 800c5a4:	b198      	cbz	r0, 800c5ce <uxr_serialize_CLIENT_Representation+0xb2>
 800c5a6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f003 f90e 	bl	800f7cc <ucdr_serialize_string>
 800c5b0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f003 f908 	bl	800f7cc <ucdr_serialize_string>
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	f109 0901 	add.w	r9, r9, #1
 800c5c2:	4038      	ands	r0, r7
 800c5c4:	4599      	cmp	r9, r3
 800c5c6:	b2c0      	uxtb	r0, r0
 800c5c8:	d3ea      	bcc.n	800c5a0 <uxr_serialize_CLIENT_Representation+0x84>
 800c5ca:	4006      	ands	r6, r0
 800c5cc:	e7d6      	b.n	800c57c <uxr_serialize_CLIENT_Representation+0x60>
 800c5ce:	2600      	movs	r6, #0
 800c5d0:	e7d4      	b.n	800c57c <uxr_serialize_CLIENT_Representation+0x60>
 800c5d2:	bf00      	nop

0800c5d4 <uxr_deserialize_CLIENT_Representation>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	2204      	movs	r2, #4
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4605      	mov	r5, r0
 800c5de:	f002 ffe5 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800c5e2:	1d21      	adds	r1, r4, #4
 800c5e4:	4607      	mov	r7, r0
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f002 ffdf 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800c5ee:	1da1      	adds	r1, r4, #6
 800c5f0:	4007      	ands	r7, r0
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f002 ffd9 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800c5fa:	fa5f f887 	uxtb.w	r8, r7
 800c5fe:	2204      	movs	r2, #4
 800c600:	4607      	mov	r7, r0
 800c602:	f104 0108 	add.w	r1, r4, #8
 800c606:	4628      	mov	r0, r5
 800c608:	f002 ffd0 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800c60c:	ea08 0707 	and.w	r7, r8, r7
 800c610:	f104 010c 	add.w	r1, r4, #12
 800c614:	4680      	mov	r8, r0
 800c616:	4628      	mov	r0, r5
 800c618:	f7fc ff10 	bl	800943c <ucdr_deserialize_uint8_t>
 800c61c:	ea08 0807 	and.w	r8, r8, r7
 800c620:	f104 010d 	add.w	r1, r4, #13
 800c624:	4607      	mov	r7, r0
 800c626:	4628      	mov	r0, r5
 800c628:	f7fc fed8 	bl	80093dc <ucdr_deserialize_bool>
 800c62c:	7b63      	ldrb	r3, [r4, #13]
 800c62e:	ea08 0707 	and.w	r7, r8, r7
 800c632:	ea07 0600 	and.w	r6, r7, r0
 800c636:	b93b      	cbnz	r3, 800c648 <uxr_deserialize_CLIENT_Representation+0x74>
 800c638:	f104 011c 	add.w	r1, r4, #28
 800c63c:	4628      	mov	r0, r5
 800c63e:	f7fd f813 	bl	8009668 <ucdr_deserialize_uint16_t>
 800c642:	4030      	ands	r0, r6
 800c644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c648:	f104 0110 	add.w	r1, r4, #16
 800c64c:	4628      	mov	r0, r5
 800c64e:	f7fd fa25 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d903      	bls.n	800c660 <uxr_deserialize_CLIENT_Representation+0x8c>
 800c658:	2301      	movs	r3, #1
 800c65a:	75ab      	strb	r3, [r5, #22]
 800c65c:	2600      	movs	r6, #0
 800c65e:	e7eb      	b.n	800c638 <uxr_deserialize_CLIENT_Representation+0x64>
 800c660:	b1fb      	cbz	r3, 800c6a2 <uxr_deserialize_CLIENT_Representation+0xce>
 800c662:	2800      	cmp	r0, #0
 800c664:	d0fa      	beq.n	800c65c <uxr_deserialize_CLIENT_Representation+0x88>
 800c666:	46a0      	mov	r8, r4
 800c668:	f04f 0900 	mov.w	r9, #0
 800c66c:	e003      	b.n	800c676 <uxr_deserialize_CLIENT_Representation+0xa2>
 800c66e:	f108 0808 	add.w	r8, r8, #8
 800c672:	2800      	cmp	r0, #0
 800c674:	d0f2      	beq.n	800c65c <uxr_deserialize_CLIENT_Representation+0x88>
 800c676:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c67a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c67e:	4628      	mov	r0, r5
 800c680:	f003 f8b4 	bl	800f7ec <ucdr_deserialize_string>
 800c684:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800c688:	4607      	mov	r7, r0
 800c68a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c68e:	4628      	mov	r0, r5
 800c690:	f003 f8ac 	bl	800f7ec <ucdr_deserialize_string>
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	f109 0901 	add.w	r9, r9, #1
 800c69a:	4038      	ands	r0, r7
 800c69c:	4599      	cmp	r9, r3
 800c69e:	b2c0      	uxtb	r0, r0
 800c6a0:	d3e5      	bcc.n	800c66e <uxr_deserialize_CLIENT_Representation+0x9a>
 800c6a2:	4006      	ands	r6, r0
 800c6a4:	e7c8      	b.n	800c638 <uxr_deserialize_CLIENT_Representation+0x64>
 800c6a6:	bf00      	nop

0800c6a8 <uxr_serialize_AGENT_Representation>:
 800c6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	f002 ff17 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c6b6:	1d21      	adds	r1, r4, #4
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f002 ff11 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c6c2:	1da1      	adds	r1, r4, #6
 800c6c4:	4006      	ands	r6, r0
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f002 ff0b 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c6ce:	b2f6      	uxtb	r6, r6
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	7a21      	ldrb	r1, [r4, #8]
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	401e      	ands	r6, r3
 800c6d8:	f7fc fe6a 	bl	80093b0 <ucdr_serialize_bool>
 800c6dc:	7a23      	ldrb	r3, [r4, #8]
 800c6de:	ea00 0706 	and.w	r7, r0, r6
 800c6e2:	b913      	cbnz	r3, 800c6ea <uxr_serialize_AGENT_Representation+0x42>
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	68e1      	ldr	r1, [r4, #12]
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7fd f8a5 	bl	800983c <ucdr_serialize_uint32_t>
 800c6f2:	68e3      	ldr	r3, [r4, #12]
 800c6f4:	b313      	cbz	r3, 800c73c <uxr_serialize_AGENT_Representation+0x94>
 800c6f6:	b1e8      	cbz	r0, 800c734 <uxr_serialize_AGENT_Representation+0x8c>
 800c6f8:	46a0      	mov	r8, r4
 800c6fa:	f04f 0900 	mov.w	r9, #0
 800c6fe:	e002      	b.n	800c706 <uxr_serialize_AGENT_Representation+0x5e>
 800c700:	f108 0808 	add.w	r8, r8, #8
 800c704:	b1b3      	cbz	r3, 800c734 <uxr_serialize_AGENT_Representation+0x8c>
 800c706:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c70a:	4628      	mov	r0, r5
 800c70c:	f003 f85e 	bl	800f7cc <ucdr_serialize_string>
 800c710:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800c714:	4606      	mov	r6, r0
 800c716:	4628      	mov	r0, r5
 800c718:	f003 f858 	bl	800f7cc <ucdr_serialize_string>
 800c71c:	68e2      	ldr	r2, [r4, #12]
 800c71e:	f109 0901 	add.w	r9, r9, #1
 800c722:	ea06 0300 	and.w	r3, r6, r0
 800c726:	4591      	cmp	r9, r2
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	d3e9      	bcc.n	800c700 <uxr_serialize_AGENT_Representation+0x58>
 800c72c:	401f      	ands	r7, r3
 800c72e:	4638      	mov	r0, r7
 800c730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c734:	2700      	movs	r7, #0
 800c736:	4638      	mov	r0, r7
 800c738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c73c:	4007      	ands	r7, r0
 800c73e:	e7d1      	b.n	800c6e4 <uxr_serialize_AGENT_Representation+0x3c>

0800c740 <uxr_serialize_ObjectVariant.part.0>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	780b      	ldrb	r3, [r1, #0]
 800c744:	3b01      	subs	r3, #1
 800c746:	460c      	mov	r4, r1
 800c748:	4605      	mov	r5, r0
 800c74a:	2b0d      	cmp	r3, #13
 800c74c:	d869      	bhi.n	800c822 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c74e:	e8df f003 	tbb	[pc, r3]
 800c752:	074a      	.short	0x074a
 800c754:	07073030 	.word	0x07073030
 800c758:	21680707 	.word	0x21680707
 800c75c:	45632121 	.word	0x45632121
 800c760:	7909      	ldrb	r1, [r1, #4]
 800c762:	f7fc fe55 	bl	8009410 <ucdr_serialize_uint8_t>
 800c766:	4606      	mov	r6, r0
 800c768:	b158      	cbz	r0, 800c782 <uxr_serialize_ObjectVariant.part.0+0x42>
 800c76a:	7923      	ldrb	r3, [r4, #4]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d003      	beq.n	800c778 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c770:	2b03      	cmp	r3, #3
 800c772:	d029      	beq.n	800c7c8 <uxr_serialize_ObjectVariant.part.0+0x88>
 800c774:	2b01      	cmp	r3, #1
 800c776:	d104      	bne.n	800c782 <uxr_serialize_ObjectVariant.part.0+0x42>
 800c778:	68a1      	ldr	r1, [r4, #8]
 800c77a:	4628      	mov	r0, r5
 800c77c:	f003 f826 	bl	800f7cc <ucdr_serialize_string>
 800c780:	4606      	mov	r6, r0
 800c782:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800c786:	4628      	mov	r0, r5
 800c788:	2202      	movs	r2, #2
 800c78a:	f002 feab 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800c78e:	4030      	ands	r0, r6
 800c790:	b2c0      	uxtb	r0, r0
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	7909      	ldrb	r1, [r1, #4]
 800c796:	f7fc fe3b 	bl	8009410 <ucdr_serialize_uint8_t>
 800c79a:	b1e8      	cbz	r0, 800c7d8 <uxr_serialize_ObjectVariant.part.0+0x98>
 800c79c:	7923      	ldrb	r3, [r4, #4]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d001      	beq.n	800c7a6 <uxr_serialize_ObjectVariant.part.0+0x66>
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d13d      	bne.n	800c822 <uxr_serialize_ObjectVariant.part.0+0xe2>
 800c7a6:	68a1      	ldr	r1, [r4, #8]
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7ae:	f003 b80d 	b.w	800f7cc <ucdr_serialize_string>
 800c7b2:	7909      	ldrb	r1, [r1, #4]
 800c7b4:	f7fc fe2c 	bl	8009410 <ucdr_serialize_uint8_t>
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d0e1      	beq.n	800c782 <uxr_serialize_ObjectVariant.part.0+0x42>
 800c7be:	7923      	ldrb	r3, [r4, #4]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d0d9      	beq.n	800c778 <uxr_serialize_ObjectVariant.part.0+0x38>
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d1dc      	bne.n	800c782 <uxr_serialize_ObjectVariant.part.0+0x42>
 800c7c8:	68a2      	ldr	r2, [r4, #8]
 800c7ca:	f104 010c 	add.w	r1, r4, #12
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f7fe f8bc 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	e7d4      	b.n	800c782 <uxr_serialize_ObjectVariant.part.0+0x42>
 800c7d8:	2000      	movs	r0, #0
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7e0:	3104      	adds	r1, #4
 800c7e2:	f7ff be9b 	b.w	800c51c <uxr_serialize_CLIENT_Representation>
 800c7e6:	7909      	ldrb	r1, [r1, #4]
 800c7e8:	f7fc fe12 	bl	8009410 <ucdr_serialize_uint8_t>
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	b158      	cbz	r0, 800c808 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c7f0:	7923      	ldrb	r3, [r4, #4]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d003      	beq.n	800c7fe <uxr_serialize_ObjectVariant.part.0+0xbe>
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d015      	beq.n	800c826 <uxr_serialize_ObjectVariant.part.0+0xe6>
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d104      	bne.n	800c808 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c7fe:	68a1      	ldr	r1, [r4, #8]
 800c800:	4628      	mov	r0, r5
 800c802:	f002 ffe3 	bl	800f7cc <ucdr_serialize_string>
 800c806:	4606      	mov	r6, r0
 800c808:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800c80c:	4628      	mov	r0, r5
 800c80e:	f7fd fb3b 	bl	8009e88 <ucdr_serialize_int16_t>
 800c812:	4030      	ands	r0, r6
 800c814:	b2c0      	uxtb	r0, r0
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c81c:	3104      	adds	r1, #4
 800c81e:	f7ff bf43 	b.w	800c6a8 <uxr_serialize_AGENT_Representation>
 800c822:	2001      	movs	r0, #1
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	68a2      	ldr	r2, [r4, #8]
 800c828:	f104 010c 	add.w	r1, r4, #12
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7fe f88d 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800c832:	4606      	mov	r6, r0
 800c834:	e7e8      	b.n	800c808 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800c836:	bf00      	nop

0800c838 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	460d      	mov	r5, r1
 800c83c:	7809      	ldrb	r1, [r1, #0]
 800c83e:	4606      	mov	r6, r0
 800c840:	f7fc fdb6 	bl	80093b0 <ucdr_serialize_bool>
 800c844:	782b      	ldrb	r3, [r5, #0]
 800c846:	4604      	mov	r4, r0
 800c848:	b94b      	cbnz	r3, 800c85e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800c84a:	7a29      	ldrb	r1, [r5, #8]
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7fc fdaf 	bl	80093b0 <ucdr_serialize_bool>
 800c852:	7a2b      	ldrb	r3, [r5, #8]
 800c854:	4004      	ands	r4, r0
 800c856:	b2e4      	uxtb	r4, r4
 800c858:	b943      	cbnz	r3, 800c86c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800c85a:	4620      	mov	r0, r4
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
 800c85e:	6869      	ldr	r1, [r5, #4]
 800c860:	4630      	mov	r0, r6
 800c862:	f002 ffb3 	bl	800f7cc <ucdr_serialize_string>
 800c866:	4004      	ands	r4, r0
 800c868:	b2e4      	uxtb	r4, r4
 800c86a:	e7ee      	b.n	800c84a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800c86c:	68e9      	ldr	r1, [r5, #12]
 800c86e:	4630      	mov	r0, r6
 800c870:	f002 ffac 	bl	800f7cc <ucdr_serialize_string>
 800c874:	4004      	ands	r4, r0
 800c876:	4620      	mov	r0, r4
 800c878:	bd70      	pop	{r4, r5, r6, pc}
 800c87a:	bf00      	nop

0800c87c <uxr_serialize_OBJK_Topic_Binary>:
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	460d      	mov	r5, r1
 800c880:	6809      	ldr	r1, [r1, #0]
 800c882:	4606      	mov	r6, r0
 800c884:	f002 ffa2 	bl	800f7cc <ucdr_serialize_string>
 800c888:	7929      	ldrb	r1, [r5, #4]
 800c88a:	4604      	mov	r4, r0
 800c88c:	4630      	mov	r0, r6
 800c88e:	f7fc fd8f 	bl	80093b0 <ucdr_serialize_bool>
 800c892:	792b      	ldrb	r3, [r5, #4]
 800c894:	4004      	ands	r4, r0
 800c896:	b2e4      	uxtb	r4, r4
 800c898:	b943      	cbnz	r3, 800c8ac <uxr_serialize_OBJK_Topic_Binary+0x30>
 800c89a:	7b29      	ldrb	r1, [r5, #12]
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7fc fd87 	bl	80093b0 <ucdr_serialize_bool>
 800c8a2:	7b2b      	ldrb	r3, [r5, #12]
 800c8a4:	4004      	ands	r4, r0
 800c8a6:	b93b      	cbnz	r3, 800c8b8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	68a9      	ldr	r1, [r5, #8]
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f002 ff8c 	bl	800f7cc <ucdr_serialize_string>
 800c8b4:	4004      	ands	r4, r0
 800c8b6:	e7f0      	b.n	800c89a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800c8b8:	6929      	ldr	r1, [r5, #16]
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f002 ff86 	bl	800f7cc <ucdr_serialize_string>
 800c8c0:	4004      	ands	r4, r0
 800c8c2:	b2e4      	uxtb	r4, r4
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}

0800c8c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	7809      	ldrb	r1, [r1, #0]
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	f7fc fd6d 	bl	80093b0 <ucdr_serialize_bool>
 800c8d6:	7823      	ldrb	r3, [r4, #0]
 800c8d8:	4605      	mov	r5, r0
 800c8da:	b96b      	cbnz	r3, 800c8f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800c8dc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	f7fc fd65 	bl	80093b0 <ucdr_serialize_bool>
 800c8e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c8ea:	4005      	ands	r5, r0
 800c8ec:	b2ed      	uxtb	r5, r5
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d169      	bne.n	800c9c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	6861      	ldr	r1, [r4, #4]
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f7fc ff9e 	bl	800983c <ucdr_serialize_uint32_t>
 800c900:	6863      	ldr	r3, [r4, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d06b      	beq.n	800c9de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800c906:	2800      	cmp	r0, #0
 800c908:	d067      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c90a:	68a1      	ldr	r1, [r4, #8]
 800c90c:	4630      	mov	r0, r6
 800c90e:	f002 ff5d 	bl	800f7cc <ucdr_serialize_string>
 800c912:	6863      	ldr	r3, [r4, #4]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d953      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d05e      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c91c:	68e1      	ldr	r1, [r4, #12]
 800c91e:	4630      	mov	r0, r6
 800c920:	f002 ff54 	bl	800f7cc <ucdr_serialize_string>
 800c924:	6863      	ldr	r3, [r4, #4]
 800c926:	2b02      	cmp	r3, #2
 800c928:	d94a      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d055      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c92e:	6921      	ldr	r1, [r4, #16]
 800c930:	4630      	mov	r0, r6
 800c932:	f002 ff4b 	bl	800f7cc <ucdr_serialize_string>
 800c936:	6863      	ldr	r3, [r4, #4]
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d941      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d04c      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c940:	6961      	ldr	r1, [r4, #20]
 800c942:	4630      	mov	r0, r6
 800c944:	f002 ff42 	bl	800f7cc <ucdr_serialize_string>
 800c948:	6863      	ldr	r3, [r4, #4]
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d938      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d043      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c952:	69a1      	ldr	r1, [r4, #24]
 800c954:	4630      	mov	r0, r6
 800c956:	f002 ff39 	bl	800f7cc <ucdr_serialize_string>
 800c95a:	6863      	ldr	r3, [r4, #4]
 800c95c:	2b05      	cmp	r3, #5
 800c95e:	d92f      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c960:	2800      	cmp	r0, #0
 800c962:	d03a      	beq.n	800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c964:	69e1      	ldr	r1, [r4, #28]
 800c966:	4630      	mov	r0, r6
 800c968:	f002 ff30 	bl	800f7cc <ucdr_serialize_string>
 800c96c:	6863      	ldr	r3, [r4, #4]
 800c96e:	2b06      	cmp	r3, #6
 800c970:	d926      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c972:	b390      	cbz	r0, 800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c974:	6a21      	ldr	r1, [r4, #32]
 800c976:	4630      	mov	r0, r6
 800c978:	f002 ff28 	bl	800f7cc <ucdr_serialize_string>
 800c97c:	6863      	ldr	r3, [r4, #4]
 800c97e:	2b07      	cmp	r3, #7
 800c980:	d91e      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c982:	b350      	cbz	r0, 800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c984:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c986:	4630      	mov	r0, r6
 800c988:	f002 ff20 	bl	800f7cc <ucdr_serialize_string>
 800c98c:	6863      	ldr	r3, [r4, #4]
 800c98e:	2b08      	cmp	r3, #8
 800c990:	d916      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c992:	b310      	cbz	r0, 800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c994:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c996:	4630      	mov	r0, r6
 800c998:	f002 ff18 	bl	800f7cc <ucdr_serialize_string>
 800c99c:	6863      	ldr	r3, [r4, #4]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	d90e      	bls.n	800c9c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800c9a2:	b1d0      	cbz	r0, 800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c9a4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800c9a8:	2709      	movs	r7, #9
 800c9aa:	e000      	b.n	800c9ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800c9ac:	b1a8      	cbz	r0, 800c9da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800c9ae:	f858 1b04 	ldr.w	r1, [r8], #4
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f002 ff0a 	bl	800f7cc <ucdr_serialize_string>
 800c9b8:	6862      	ldr	r2, [r4, #4]
 800c9ba:	3701      	adds	r7, #1
 800c9bc:	4297      	cmp	r7, r2
 800c9be:	d3f5      	bcc.n	800c9ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800c9c0:	4005      	ands	r5, r0
 800c9c2:	b2ed      	uxtb	r5, r5
 800c9c4:	e78a      	b.n	800c8dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c9c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c9ce:	f7fd ffbd 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800c9d2:	4005      	ands	r5, r0
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9da:	2500      	movs	r5, #0
 800c9dc:	e77e      	b.n	800c8dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800c9de:	4028      	ands	r0, r5
 800c9e0:	b2c5      	uxtb	r5, r0
 800c9e2:	e77b      	b.n	800c8dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800c9e4 <uxr_serialize_OBJK_Publisher_Binary>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	7809      	ldrb	r1, [r1, #0]
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	f7fc fce0 	bl	80093b0 <ucdr_serialize_bool>
 800c9f0:	782b      	ldrb	r3, [r5, #0]
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	b94b      	cbnz	r3, 800ca0a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800c9f6:	7a29      	ldrb	r1, [r5, #8]
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7fc fcd9 	bl	80093b0 <ucdr_serialize_bool>
 800c9fe:	7a2b      	ldrb	r3, [r5, #8]
 800ca00:	4004      	ands	r4, r0
 800ca02:	b2e4      	uxtb	r4, r4
 800ca04:	b943      	cbnz	r3, 800ca18 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ca06:	4620      	mov	r0, r4
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
 800ca0a:	6869      	ldr	r1, [r5, #4]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f002 fedd 	bl	800f7cc <ucdr_serialize_string>
 800ca12:	4004      	ands	r4, r0
 800ca14:	b2e4      	uxtb	r4, r4
 800ca16:	e7ee      	b.n	800c9f6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ca18:	f105 010c 	add.w	r1, r5, #12
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	f7ff ff53 	bl	800c8c8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ca22:	4004      	ands	r4, r0
 800ca24:	4620      	mov	r0, r4
 800ca26:	bd70      	pop	{r4, r5, r6, pc}

0800ca28 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ca28:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800ca2c:	4688      	mov	r8, r1
 800ca2e:	8809      	ldrh	r1, [r1, #0]
 800ca30:	4681      	mov	r9, r0
 800ca32:	f7fc fd19 	bl	8009468 <ucdr_serialize_uint16_t>
 800ca36:	f898 1002 	ldrb.w	r1, [r8, #2]
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	4648      	mov	r0, r9
 800ca3e:	f7fc fcb7 	bl	80093b0 <ucdr_serialize_bool>
 800ca42:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ca46:	4030      	ands	r0, r6
 800ca48:	b2c5      	uxtb	r5, r0
 800ca4a:	b9eb      	cbnz	r3, 800ca88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800ca4c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800ca50:	4648      	mov	r0, r9
 800ca52:	f7fc fcad 	bl	80093b0 <ucdr_serialize_bool>
 800ca56:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ca5a:	4005      	ands	r5, r0
 800ca5c:	bb7b      	cbnz	r3, 800cabe <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800ca5e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800ca62:	4648      	mov	r0, r9
 800ca64:	f7fc fca4 	bl	80093b0 <ucdr_serialize_bool>
 800ca68:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ca6c:	4005      	ands	r5, r0
 800ca6e:	b9f3      	cbnz	r3, 800caae <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800ca70:	f898 1014 	ldrb.w	r1, [r8, #20]
 800ca74:	4648      	mov	r0, r9
 800ca76:	f7fc fc9b 	bl	80093b0 <ucdr_serialize_bool>
 800ca7a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800ca7e:	4005      	ands	r5, r0
 800ca80:	b94b      	cbnz	r3, 800ca96 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800ca82:	4628      	mov	r0, r5
 800ca84:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800ca88:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800ca8c:	4648      	mov	r0, r9
 800ca8e:	f7fc fceb 	bl	8009468 <ucdr_serialize_uint16_t>
 800ca92:	4005      	ands	r5, r0
 800ca94:	e7da      	b.n	800ca4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800ca96:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800ca9a:	4648      	mov	r0, r9
 800ca9c:	f108 011c 	add.w	r1, r8, #28
 800caa0:	f7fd ff54 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800caa4:	4028      	ands	r0, r5
 800caa6:	b2c5      	uxtb	r5, r0
 800caa8:	4628      	mov	r0, r5
 800caaa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800caae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cab2:	4648      	mov	r0, r9
 800cab4:	f7fc fec2 	bl	800983c <ucdr_serialize_uint32_t>
 800cab8:	4028      	ands	r0, r5
 800caba:	b2c5      	uxtb	r5, r0
 800cabc:	e7d8      	b.n	800ca70 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800cabe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800cac2:	4648      	mov	r0, r9
 800cac4:	f7fc feba 	bl	800983c <ucdr_serialize_uint32_t>
 800cac8:	4028      	ands	r0, r5
 800caca:	b2c5      	uxtb	r5, r0
 800cacc:	e7c7      	b.n	800ca5e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800cace:	bf00      	nop

0800cad0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	2202      	movs	r2, #2
 800cad4:	460d      	mov	r5, r1
 800cad6:	4606      	mov	r6, r0
 800cad8:	f002 fd04 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cadc:	78a9      	ldrb	r1, [r5, #2]
 800cade:	4604      	mov	r4, r0
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fc fc65 	bl	80093b0 <ucdr_serialize_bool>
 800cae6:	78ab      	ldrb	r3, [r5, #2]
 800cae8:	4004      	ands	r4, r0
 800caea:	b2e4      	uxtb	r4, r4
 800caec:	b90b      	cbnz	r3, 800caf2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800caee:	4620      	mov	r0, r4
 800caf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf2:	f105 0108 	add.w	r1, r5, #8
 800caf6:	4630      	mov	r0, r6
 800caf8:	f7ff ff96 	bl	800ca28 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800cafc:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800cb00:	4607      	mov	r7, r0
 800cb02:	4630      	mov	r0, r6
 800cb04:	f7fc fc54 	bl	80093b0 <ucdr_serialize_bool>
 800cb08:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800cb0c:	4007      	ands	r7, r0
 800cb0e:	b2ff      	uxtb	r7, r7
 800cb10:	b913      	cbnz	r3, 800cb18 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800cb12:	403c      	ands	r4, r7
 800cb14:	4620      	mov	r0, r4
 800cb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb18:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7fd f8e3 	bl	8009ce8 <ucdr_serialize_uint64_t>
 800cb22:	4007      	ands	r7, r0
 800cb24:	e7f5      	b.n	800cb12 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800cb26:	bf00      	nop

0800cb28 <uxr_deserialize_ObjectVariant>:
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	460e      	mov	r6, r1
 800cb2e:	f7fc fc85 	bl	800943c <ucdr_deserialize_uint8_t>
 800cb32:	b320      	cbz	r0, 800cb7e <uxr_deserialize_ObjectVariant+0x56>
 800cb34:	7833      	ldrb	r3, [r6, #0]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	4604      	mov	r4, r0
 800cb3a:	2b0d      	cmp	r3, #13
 800cb3c:	d81d      	bhi.n	800cb7a <uxr_deserialize_ObjectVariant+0x52>
 800cb3e:	e8df f003 	tbb	[pc, r3]
 800cb42:	2107      	.short	0x2107
 800cb44:	21214b4b 	.word	0x21214b4b
 800cb48:	381c2121 	.word	0x381c2121
 800cb4c:	876a3838 	.word	0x876a3838
 800cb50:	1d31      	adds	r1, r6, #4
 800cb52:	4628      	mov	r0, r5
 800cb54:	f7fc fc72 	bl	800943c <ucdr_deserialize_uint8_t>
 800cb58:	4607      	mov	r7, r0
 800cb5a:	b138      	cbz	r0, 800cb6c <uxr_deserialize_ObjectVariant+0x44>
 800cb5c:	7933      	ldrb	r3, [r6, #4]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d07c      	beq.n	800cc5c <uxr_deserialize_ObjectVariant+0x134>
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	f000 8082 	beq.w	800cc6c <uxr_deserialize_ObjectVariant+0x144>
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d077      	beq.n	800cc5c <uxr_deserialize_ObjectVariant+0x134>
 800cb6c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800cb70:	4628      	mov	r0, r5
 800cb72:	f7fd fa09 	bl	8009f88 <ucdr_deserialize_int16_t>
 800cb76:	4038      	ands	r0, r7
 800cb78:	b2c4      	uxtb	r4, r0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb7e:	2400      	movs	r4, #0
 800cb80:	4620      	mov	r0, r4
 800cb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb84:	1d31      	adds	r1, r6, #4
 800cb86:	4628      	mov	r0, r5
 800cb88:	f7fc fc58 	bl	800943c <ucdr_deserialize_uint8_t>
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	b130      	cbz	r0, 800cb9e <uxr_deserialize_ObjectVariant+0x76>
 800cb90:	7933      	ldrb	r3, [r6, #4]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d037      	beq.n	800cc06 <uxr_deserialize_ObjectVariant+0xde>
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d02a      	beq.n	800cbf0 <uxr_deserialize_ObjectVariant+0xc8>
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d033      	beq.n	800cc06 <uxr_deserialize_ObjectVariant+0xde>
 800cb9e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800cba2:	4628      	mov	r0, r5
 800cba4:	2202      	movs	r2, #2
 800cba6:	f002 fd01 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cbaa:	4038      	ands	r0, r7
 800cbac:	b2c4      	uxtb	r4, r0
 800cbae:	4620      	mov	r0, r4
 800cbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb2:	1d31      	adds	r1, r6, #4
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f7fc fc41 	bl	800943c <ucdr_deserialize_uint8_t>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d0df      	beq.n	800cb7e <uxr_deserialize_ObjectVariant+0x56>
 800cbbe:	7933      	ldrb	r3, [r6, #4]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d001      	beq.n	800cbc8 <uxr_deserialize_ObjectVariant+0xa0>
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d1d8      	bne.n	800cb7a <uxr_deserialize_ObjectVariant+0x52>
 800cbc8:	68b1      	ldr	r1, [r6, #8]
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbd4:	f002 be0a 	b.w	800f7ec <ucdr_deserialize_string>
 800cbd8:	1d31      	adds	r1, r6, #4
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f7fc fc2e 	bl	800943c <ucdr_deserialize_uint8_t>
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0db      	beq.n	800cb9e <uxr_deserialize_ObjectVariant+0x76>
 800cbe6:	7933      	ldrb	r3, [r6, #4]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d00c      	beq.n	800cc06 <uxr_deserialize_ObjectVariant+0xde>
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d1d6      	bne.n	800cb9e <uxr_deserialize_ObjectVariant+0x76>
 800cbf0:	f106 0308 	add.w	r3, r6, #8
 800cbf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbf8:	f106 010c 	add.w	r1, r6, #12
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f7fd feb7 	bl	800a970 <ucdr_deserialize_sequence_uint8_t>
 800cc02:	4607      	mov	r7, r0
 800cc04:	e7cb      	b.n	800cb9e <uxr_deserialize_ObjectVariant+0x76>
 800cc06:	68b1      	ldr	r1, [r6, #8]
 800cc08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f002 fded 	bl	800f7ec <ucdr_deserialize_string>
 800cc12:	4607      	mov	r7, r0
 800cc14:	e7c3      	b.n	800cb9e <uxr_deserialize_ObjectVariant+0x76>
 800cc16:	2204      	movs	r2, #4
 800cc18:	18b1      	adds	r1, r6, r2
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f002 fcc6 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cc20:	2202      	movs	r2, #2
 800cc22:	4604      	mov	r4, r0
 800cc24:	f106 0108 	add.w	r1, r6, #8
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f002 fcbf 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4004      	ands	r4, r0
 800cc32:	f106 010a 	add.w	r1, r6, #10
 800cc36:	4628      	mov	r0, r5
 800cc38:	f002 fcb8 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cc3c:	b2e4      	uxtb	r4, r4
 800cc3e:	4603      	mov	r3, r0
 800cc40:	f106 010c 	add.w	r1, r6, #12
 800cc44:	4628      	mov	r0, r5
 800cc46:	401c      	ands	r4, r3
 800cc48:	f7fc fbc8 	bl	80093dc <ucdr_deserialize_bool>
 800cc4c:	4004      	ands	r4, r0
 800cc4e:	e794      	b.n	800cb7a <uxr_deserialize_ObjectVariant+0x52>
 800cc50:	1d31      	adds	r1, r6, #4
 800cc52:	4628      	mov	r0, r5
 800cc54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc58:	f7ff bcbc 	b.w	800c5d4 <uxr_deserialize_CLIENT_Representation>
 800cc5c:	68b1      	ldr	r1, [r6, #8]
 800cc5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc62:	4628      	mov	r0, r5
 800cc64:	f002 fdc2 	bl	800f7ec <ucdr_deserialize_string>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	e77f      	b.n	800cb6c <uxr_deserialize_ObjectVariant+0x44>
 800cc6c:	f106 0308 	add.w	r3, r6, #8
 800cc70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc74:	f106 010c 	add.w	r1, r6, #12
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f7fd fe79 	bl	800a970 <ucdr_deserialize_sequence_uint8_t>
 800cc7e:	4607      	mov	r7, r0
 800cc80:	e774      	b.n	800cb6c <uxr_deserialize_ObjectVariant+0x44>
 800cc82:	bf00      	nop

0800cc84 <uxr_deserialize_BaseObjectRequest>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	2202      	movs	r2, #2
 800cc88:	4605      	mov	r5, r0
 800cc8a:	460e      	mov	r6, r1
 800cc8c:	f002 fc8e 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cc90:	1cb1      	adds	r1, r6, #2
 800cc92:	4604      	mov	r4, r0
 800cc94:	2202      	movs	r2, #2
 800cc96:	4628      	mov	r0, r5
 800cc98:	f002 fc88 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800cc9c:	4020      	ands	r0, r4
 800cc9e:	b2c0      	uxtb	r0, r0
 800cca0:	bd70      	pop	{r4, r5, r6, pc}
 800cca2:	bf00      	nop

0800cca4 <uxr_serialize_AGENT_ActivityInfo>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	460e      	mov	r6, r1
 800ccaa:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ccae:	4607      	mov	r7, r0
 800ccb0:	f7fd f8ea 	bl	8009e88 <ucdr_serialize_int16_t>
 800ccb4:	6871      	ldr	r1, [r6, #4]
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7fc fdbf 	bl	800983c <ucdr_serialize_uint32_t>
 800ccbe:	6873      	ldr	r3, [r6, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d06a      	beq.n	800cd9a <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800ccc4:	b318      	cbz	r0, 800cd0e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800ccc6:	f106 0904 	add.w	r9, r6, #4
 800ccca:	2500      	movs	r5, #0
 800cccc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800ccd0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800ccd4:	7a21      	ldrb	r1, [r4, #8]
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7fc fb9a 	bl	8009410 <ucdr_serialize_uint8_t>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d051      	beq.n	800cd84 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800cce0:	7a23      	ldrb	r3, [r4, #8]
 800cce2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cce6:	00c9      	lsls	r1, r1, #3
 800cce8:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d859      	bhi.n	800cda4 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800ccf0:	e8df f003 	tbb	[pc, r3]
 800ccf4:	02122436 	.word	0x02122436
 800ccf8:	4449      	add	r1, r9
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	6889      	ldr	r1, [r1, #8]
 800ccfe:	f002 fd65 	bl	800f7cc <ucdr_serialize_string>
 800cd02:	6873      	ldr	r3, [r6, #4]
 800cd04:	3501      	adds	r5, #1
 800cd06:	429d      	cmp	r5, r3
 800cd08:	d240      	bcs.n	800cd8c <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d1de      	bne.n	800cccc <uxr_serialize_AGENT_ActivityInfo+0x28>
 800cd0e:	f04f 0800 	mov.w	r8, #0
 800cd12:	4640      	mov	r0, r8
 800cd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd18:	3108      	adds	r1, #8
 800cd1a:	4449      	add	r1, r9
 800cd1c:	2210      	movs	r2, #16
 800cd1e:	4638      	mov	r0, r7
 800cd20:	f002 fbe0 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cd24:	44aa      	add	sl, r5
 800cd26:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	f8da 101c 	ldr.w	r1, [sl, #28]
 800cd30:	4638      	mov	r0, r7
 800cd32:	f7fc fd83 	bl	800983c <ucdr_serialize_uint32_t>
 800cd36:	4020      	ands	r0, r4
 800cd38:	b2c0      	uxtb	r0, r0
 800cd3a:	e7e2      	b.n	800cd02 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cd3c:	3108      	adds	r1, #8
 800cd3e:	4449      	add	r1, r9
 800cd40:	2204      	movs	r2, #4
 800cd42:	4638      	mov	r0, r7
 800cd44:	f002 fbce 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cd48:	44aa      	add	sl, r5
 800cd4a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cd4e:	4604      	mov	r4, r0
 800cd50:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7fc fb87 	bl	8009468 <ucdr_serialize_uint16_t>
 800cd5a:	4020      	ands	r0, r4
 800cd5c:	b2c0      	uxtb	r0, r0
 800cd5e:	e7d0      	b.n	800cd02 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cd60:	3108      	adds	r1, #8
 800cd62:	4449      	add	r1, r9
 800cd64:	2202      	movs	r2, #2
 800cd66:	4638      	mov	r0, r7
 800cd68:	f002 fbbc 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cd6c:	44aa      	add	sl, r5
 800cd6e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800cd72:	4604      	mov	r4, r0
 800cd74:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7fc fb49 	bl	8009410 <ucdr_serialize_uint8_t>
 800cd7e:	4020      	ands	r0, r4
 800cd80:	b2c0      	uxtb	r0, r0
 800cd82:	e7be      	b.n	800cd02 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800cd84:	6873      	ldr	r3, [r6, #4]
 800cd86:	3501      	adds	r5, #1
 800cd88:	429d      	cmp	r5, r3
 800cd8a:	d3c0      	bcc.n	800cd0e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800cd8c:	ea08 0000 	and.w	r0, r8, r0
 800cd90:	fa5f f880 	uxtb.w	r8, r0
 800cd94:	4640      	mov	r0, r8
 800cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9a:	ea08 0800 	and.w	r8, r8, r0
 800cd9e:	fa5f f888 	uxtb.w	r8, r8
 800cda2:	e7b6      	b.n	800cd12 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800cda4:	6873      	ldr	r3, [r6, #4]
 800cda6:	3501      	adds	r5, #1
 800cda8:	42ab      	cmp	r3, r5
 800cdaa:	f104 0418 	add.w	r4, r4, #24
 800cdae:	d891      	bhi.n	800ccd4 <uxr_serialize_AGENT_ActivityInfo+0x30>
 800cdb0:	e7af      	b.n	800cd12 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800cdb2:	bf00      	nop

0800cdb4 <uxr_serialize_ActivityInfoVariant>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	7809      	ldrb	r1, [r1, #0]
 800cdba:	4606      	mov	r6, r0
 800cdbc:	f7fc fb28 	bl	8009410 <ucdr_serialize_uint8_t>
 800cdc0:	b130      	cbz	r0, 800cdd0 <uxr_serialize_ActivityInfoVariant+0x1c>
 800cdc2:	782b      	ldrb	r3, [r5, #0]
 800cdc4:	2b06      	cmp	r3, #6
 800cdc6:	d019      	beq.n	800cdfc <uxr_serialize_ActivityInfoVariant+0x48>
 800cdc8:	2b0d      	cmp	r3, #13
 800cdca:	d010      	beq.n	800cdee <uxr_serialize_ActivityInfoVariant+0x3a>
 800cdcc:	2b05      	cmp	r3, #5
 800cdce:	d000      	beq.n	800cdd2 <uxr_serialize_ActivityInfoVariant+0x1e>
 800cdd0:	bd70      	pop	{r4, r5, r6, pc}
 800cdd2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	f7fd f856 	bl	8009e88 <ucdr_serialize_int16_t>
 800cddc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800cde0:	4604      	mov	r4, r0
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7fc ff80 	bl	8009ce8 <ucdr_serialize_uint64_t>
 800cde8:	4020      	ands	r0, r4
 800cdea:	b2c0      	uxtb	r0, r0
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	f105 0108 	add.w	r1, r5, #8
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdf8:	f7ff bf54 	b.w	800cca4 <uxr_serialize_AGENT_ActivityInfo>
 800cdfc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ce00:	4630      	mov	r0, r6
 800ce02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce06:	f7fd b83f 	b.w	8009e88 <ucdr_serialize_int16_t>
 800ce0a:	bf00      	nop

0800ce0c <uxr_deserialize_BaseObjectReply>:
 800ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce10:	2202      	movs	r2, #2
 800ce12:	4606      	mov	r6, r0
 800ce14:	460f      	mov	r7, r1
 800ce16:	f002 fbc9 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800ce1a:	2202      	movs	r2, #2
 800ce1c:	1cb9      	adds	r1, r7, #2
 800ce1e:	4605      	mov	r5, r0
 800ce20:	4630      	mov	r0, r6
 800ce22:	f002 fbc3 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800ce26:	1d39      	adds	r1, r7, #4
 800ce28:	4680      	mov	r8, r0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fc fb06 	bl	800943c <ucdr_deserialize_uint8_t>
 800ce30:	1d79      	adds	r1, r7, #5
 800ce32:	4604      	mov	r4, r0
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7fc fb01 	bl	800943c <ucdr_deserialize_uint8_t>
 800ce3a:	ea05 0508 	and.w	r5, r5, r8
 800ce3e:	402c      	ands	r4, r5
 800ce40:	4020      	ands	r0, r4
 800ce42:	b2c0      	uxtb	r0, r0
 800ce44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce48 <uxr_serialize_ReadSpecification>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	7809      	ldrb	r1, [r1, #0]
 800ce50:	4607      	mov	r7, r0
 800ce52:	f7fc fadd 	bl	8009410 <ucdr_serialize_uint8_t>
 800ce56:	7871      	ldrb	r1, [r6, #1]
 800ce58:	4604      	mov	r4, r0
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f7fc fad8 	bl	8009410 <ucdr_serialize_uint8_t>
 800ce60:	78b1      	ldrb	r1, [r6, #2]
 800ce62:	4004      	ands	r4, r0
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7fc faa3 	bl	80093b0 <ucdr_serialize_bool>
 800ce6a:	78b3      	ldrb	r3, [r6, #2]
 800ce6c:	b2e4      	uxtb	r4, r4
 800ce6e:	4004      	ands	r4, r0
 800ce70:	b94b      	cbnz	r3, 800ce86 <uxr_serialize_ReadSpecification+0x3e>
 800ce72:	7a31      	ldrb	r1, [r6, #8]
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7fc fa9b 	bl	80093b0 <ucdr_serialize_bool>
 800ce7a:	7a33      	ldrb	r3, [r6, #8]
 800ce7c:	4004      	ands	r4, r0
 800ce7e:	b943      	cbnz	r3, 800ce92 <uxr_serialize_ReadSpecification+0x4a>
 800ce80:	4620      	mov	r0, r4
 800ce82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce86:	6871      	ldr	r1, [r6, #4]
 800ce88:	4638      	mov	r0, r7
 800ce8a:	f002 fc9f 	bl	800f7cc <ucdr_serialize_string>
 800ce8e:	4004      	ands	r4, r0
 800ce90:	e7ef      	b.n	800ce72 <uxr_serialize_ReadSpecification+0x2a>
 800ce92:	8971      	ldrh	r1, [r6, #10]
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7fc fae7 	bl	8009468 <ucdr_serialize_uint16_t>
 800ce9a:	89b1      	ldrh	r1, [r6, #12]
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f7fc fae2 	bl	8009468 <ucdr_serialize_uint16_t>
 800cea4:	89f1      	ldrh	r1, [r6, #14]
 800cea6:	4005      	ands	r5, r0
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f7fc fadd 	bl	8009468 <ucdr_serialize_uint16_t>
 800ceae:	8a31      	ldrh	r1, [r6, #16]
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f7fc fad8 	bl	8009468 <ucdr_serialize_uint16_t>
 800ceb8:	b2ed      	uxtb	r5, r5
 800ceba:	4025      	ands	r5, r4
 800cebc:	ea08 0505 	and.w	r5, r8, r5
 800cec0:	ea00 0405 	and.w	r4, r0, r5
 800cec4:	4620      	mov	r0, r4
 800cec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceca:	bf00      	nop

0800cecc <uxr_serialize_CREATE_CLIENT_Payload>:
 800cecc:	f7ff bb26 	b.w	800c51c <uxr_serialize_CLIENT_Representation>

0800ced0 <uxr_serialize_CREATE_Payload>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	2202      	movs	r2, #2
 800ced4:	4606      	mov	r6, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	f002 fb04 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cedc:	1ca9      	adds	r1, r5, #2
 800cede:	4604      	mov	r4, r0
 800cee0:	2202      	movs	r2, #2
 800cee2:	4630      	mov	r0, r6
 800cee4:	f002 fafe 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cee8:	7929      	ldrb	r1, [r5, #4]
 800ceea:	4607      	mov	r7, r0
 800ceec:	4630      	mov	r0, r6
 800ceee:	f7fc fa8f 	bl	8009410 <ucdr_serialize_uint8_t>
 800cef2:	b328      	cbz	r0, 800cf40 <uxr_serialize_CREATE_Payload+0x70>
 800cef4:	792b      	ldrb	r3, [r5, #4]
 800cef6:	403c      	ands	r4, r7
 800cef8:	3b01      	subs	r3, #1
 800cefa:	b2e4      	uxtb	r4, r4
 800cefc:	2b0d      	cmp	r3, #13
 800cefe:	d81d      	bhi.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cf00:	e8df f003 	tbb	[pc, r3]
 800cf04:	32320753 	.word	0x32320753
 800cf08:	07070707 	.word	0x07070707
 800cf0c:	2121211c 	.word	0x2121211c
 800cf10:	684c      	.short	0x684c
 800cf12:	7a29      	ldrb	r1, [r5, #8]
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7fc fa7b 	bl	8009410 <ucdr_serialize_uint8_t>
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	b130      	cbz	r0, 800cf2c <uxr_serialize_CREATE_Payload+0x5c>
 800cf1e:	7a2b      	ldrb	r3, [r5, #8]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d035      	beq.n	800cf90 <uxr_serialize_CREATE_Payload+0xc0>
 800cf24:	2b03      	cmp	r3, #3
 800cf26:	d02b      	beq.n	800cf80 <uxr_serialize_CREATE_Payload+0xb0>
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d031      	beq.n	800cf90 <uxr_serialize_CREATE_Payload+0xc0>
 800cf2c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800cf30:	4630      	mov	r0, r6
 800cf32:	2202      	movs	r2, #2
 800cf34:	f002 fad6 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800cf38:	4038      	ands	r0, r7
 800cf3a:	4004      	ands	r4, r0
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf40:	2400      	movs	r4, #0
 800cf42:	4620      	mov	r0, r4
 800cf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf46:	7a29      	ldrb	r1, [r5, #8]
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7fc fa61 	bl	8009410 <ucdr_serialize_uint8_t>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d0f6      	beq.n	800cf40 <uxr_serialize_CREATE_Payload+0x70>
 800cf52:	7a2b      	ldrb	r3, [r5, #8]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d001      	beq.n	800cf5c <uxr_serialize_CREATE_Payload+0x8c>
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d1ef      	bne.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cf5c:	68e9      	ldr	r1, [r5, #12]
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f002 fc34 	bl	800f7cc <ucdr_serialize_string>
 800cf64:	4004      	ands	r4, r0
 800cf66:	e7e9      	b.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cf68:	7a29      	ldrb	r1, [r5, #8]
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7fc fa50 	bl	8009410 <ucdr_serialize_uint8_t>
 800cf70:	4607      	mov	r7, r0
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0da      	beq.n	800cf2c <uxr_serialize_CREATE_Payload+0x5c>
 800cf76:	7a2b      	ldrb	r3, [r5, #8]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d009      	beq.n	800cf90 <uxr_serialize_CREATE_Payload+0xc0>
 800cf7c:	2b03      	cmp	r3, #3
 800cf7e:	d1d5      	bne.n	800cf2c <uxr_serialize_CREATE_Payload+0x5c>
 800cf80:	68ea      	ldr	r2, [r5, #12]
 800cf82:	f105 0110 	add.w	r1, r5, #16
 800cf86:	4630      	mov	r0, r6
 800cf88:	f7fd fce0 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	e7cd      	b.n	800cf2c <uxr_serialize_CREATE_Payload+0x5c>
 800cf90:	68e9      	ldr	r1, [r5, #12]
 800cf92:	4630      	mov	r0, r6
 800cf94:	f002 fc1a 	bl	800f7cc <ucdr_serialize_string>
 800cf98:	4607      	mov	r7, r0
 800cf9a:	e7c7      	b.n	800cf2c <uxr_serialize_CREATE_Payload+0x5c>
 800cf9c:	f105 0108 	add.w	r1, r5, #8
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7ff fb81 	bl	800c6a8 <uxr_serialize_AGENT_Representation>
 800cfa6:	4004      	ands	r4, r0
 800cfa8:	e7c8      	b.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cfaa:	7a29      	ldrb	r1, [r5, #8]
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7fc fa2f 	bl	8009410 <ucdr_serialize_uint8_t>
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	b130      	cbz	r0, 800cfc4 <uxr_serialize_CREATE_Payload+0xf4>
 800cfb6:	7a2b      	ldrb	r3, [r5, #8]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d012      	beq.n	800cfe2 <uxr_serialize_CREATE_Payload+0x112>
 800cfbc:	2b03      	cmp	r3, #3
 800cfbe:	d016      	beq.n	800cfee <uxr_serialize_CREATE_Payload+0x11e>
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d00e      	beq.n	800cfe2 <uxr_serialize_CREATE_Payload+0x112>
 800cfc4:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800cfc8:	4630      	mov	r0, r6
 800cfca:	f7fc ff5d 	bl	8009e88 <ucdr_serialize_int16_t>
 800cfce:	4038      	ands	r0, r7
 800cfd0:	4004      	ands	r4, r0
 800cfd2:	e7b3      	b.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cfd4:	f105 0108 	add.w	r1, r5, #8
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7ff fa9f 	bl	800c51c <uxr_serialize_CLIENT_Representation>
 800cfde:	4004      	ands	r4, r0
 800cfe0:	e7ac      	b.n	800cf3c <uxr_serialize_CREATE_Payload+0x6c>
 800cfe2:	68e9      	ldr	r1, [r5, #12]
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f002 fbf1 	bl	800f7cc <ucdr_serialize_string>
 800cfea:	4607      	mov	r7, r0
 800cfec:	e7ea      	b.n	800cfc4 <uxr_serialize_CREATE_Payload+0xf4>
 800cfee:	68ea      	ldr	r2, [r5, #12]
 800cff0:	f105 0110 	add.w	r1, r5, #16
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7fd fca9 	bl	800a94c <ucdr_serialize_sequence_uint8_t>
 800cffa:	4607      	mov	r7, r0
 800cffc:	e7e2      	b.n	800cfc4 <uxr_serialize_CREATE_Payload+0xf4>
 800cffe:	bf00      	nop

0800d000 <uxr_deserialize_GET_INFO_Payload>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	2202      	movs	r2, #2
 800d004:	4605      	mov	r5, r0
 800d006:	460e      	mov	r6, r1
 800d008:	f002 fad0 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d00c:	1cb1      	adds	r1, r6, #2
 800d00e:	2202      	movs	r2, #2
 800d010:	4604      	mov	r4, r0
 800d012:	4628      	mov	r0, r5
 800d014:	f002 faca 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d018:	1d31      	adds	r1, r6, #4
 800d01a:	4004      	ands	r4, r0
 800d01c:	4628      	mov	r0, r5
 800d01e:	f7fc fd3d 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800d022:	b2e4      	uxtb	r4, r4
 800d024:	4020      	ands	r0, r4
 800d026:	bd70      	pop	{r4, r5, r6, pc}

0800d028 <uxr_serialize_DELETE_Payload>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	2202      	movs	r2, #2
 800d02c:	4605      	mov	r5, r0
 800d02e:	460e      	mov	r6, r1
 800d030:	f002 fa58 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d034:	1cb1      	adds	r1, r6, #2
 800d036:	4604      	mov	r4, r0
 800d038:	2202      	movs	r2, #2
 800d03a:	4628      	mov	r0, r5
 800d03c:	f002 fa52 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d040:	4020      	ands	r0, r4
 800d042:	b2c0      	uxtb	r0, r0
 800d044:	bd70      	pop	{r4, r5, r6, pc}
 800d046:	bf00      	nop

0800d048 <uxr_deserialize_STATUS_AGENT_Payload>:
 800d048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	4606      	mov	r6, r0
 800d04e:	460f      	mov	r7, r1
 800d050:	f7fc f9f4 	bl	800943c <ucdr_deserialize_uint8_t>
 800d054:	1c79      	adds	r1, r7, #1
 800d056:	4605      	mov	r5, r0
 800d058:	4630      	mov	r0, r6
 800d05a:	f7fc f9ef 	bl	800943c <ucdr_deserialize_uint8_t>
 800d05e:	1d39      	adds	r1, r7, #4
 800d060:	4681      	mov	r9, r0
 800d062:	2204      	movs	r2, #4
 800d064:	4630      	mov	r0, r6
 800d066:	f002 faa1 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d06a:	f107 0108 	add.w	r1, r7, #8
 800d06e:	4604      	mov	r4, r0
 800d070:	2202      	movs	r2, #2
 800d072:	4630      	mov	r0, r6
 800d074:	f002 fa9a 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d078:	f107 010a 	add.w	r1, r7, #10
 800d07c:	4680      	mov	r8, r0
 800d07e:	2202      	movs	r2, #2
 800d080:	4630      	mov	r0, r6
 800d082:	f002 fa93 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d086:	ea05 0509 	and.w	r5, r5, r9
 800d08a:	b2ed      	uxtb	r5, r5
 800d08c:	402c      	ands	r4, r5
 800d08e:	f107 010c 	add.w	r1, r7, #12
 800d092:	4605      	mov	r5, r0
 800d094:	4630      	mov	r0, r6
 800d096:	f7fc f9a1 	bl	80093dc <ucdr_deserialize_bool>
 800d09a:	ea08 0404 	and.w	r4, r8, r4
 800d09e:	4025      	ands	r5, r4
 800d0a0:	4028      	ands	r0, r5
 800d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	bf00      	nop

0800d0a8 <uxr_deserialize_STATUS_Payload>:
 800d0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	f002 fa7b 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	1cb9      	adds	r1, r7, #2
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f002 fa75 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d0c2:	1d39      	adds	r1, r7, #4
 800d0c4:	4680      	mov	r8, r0
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f7fc f9b8 	bl	800943c <ucdr_deserialize_uint8_t>
 800d0cc:	1d79      	adds	r1, r7, #5
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7fc f9b3 	bl	800943c <ucdr_deserialize_uint8_t>
 800d0d6:	ea05 0508 	and.w	r5, r5, r8
 800d0da:	402c      	ands	r4, r5
 800d0dc:	4020      	ands	r0, r4
 800d0de:	b2c0      	uxtb	r0, r0
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0e4 <uxr_serialize_INFO_Payload>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	f002 f9f9 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	4680      	mov	r8, r0
 800d0f6:	1ca1      	adds	r1, r4, #2
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f002 f9f3 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d0fe:	7921      	ldrb	r1, [r4, #4]
 800d100:	4607      	mov	r7, r0
 800d102:	4628      	mov	r0, r5
 800d104:	f7fc f984 	bl	8009410 <ucdr_serialize_uint8_t>
 800d108:	7961      	ldrb	r1, [r4, #5]
 800d10a:	4606      	mov	r6, r0
 800d10c:	4628      	mov	r0, r5
 800d10e:	f7fc f97f 	bl	8009410 <ucdr_serialize_uint8_t>
 800d112:	ea08 0807 	and.w	r8, r8, r7
 800d116:	ea06 0608 	and.w	r6, r6, r8
 800d11a:	4006      	ands	r6, r0
 800d11c:	7a21      	ldrb	r1, [r4, #8]
 800d11e:	4628      	mov	r0, r5
 800d120:	f7fc f946 	bl	80093b0 <ucdr_serialize_bool>
 800d124:	7a23      	ldrb	r3, [r4, #8]
 800d126:	b2f7      	uxtb	r7, r6
 800d128:	4606      	mov	r6, r0
 800d12a:	b96b      	cbnz	r3, 800d148 <uxr_serialize_INFO_Payload+0x64>
 800d12c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800d130:	4628      	mov	r0, r5
 800d132:	f7fc f93d 	bl	80093b0 <ucdr_serialize_bool>
 800d136:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800d13a:	4030      	ands	r0, r6
 800d13c:	b2c6      	uxtb	r6, r0
 800d13e:	b983      	cbnz	r3, 800d162 <uxr_serialize_INFO_Payload+0x7e>
 800d140:	ea06 0007 	and.w	r0, r6, r7
 800d144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d148:	7b21      	ldrb	r1, [r4, #12]
 800d14a:	4628      	mov	r0, r5
 800d14c:	f7fc f960 	bl	8009410 <ucdr_serialize_uint8_t>
 800d150:	b188      	cbz	r0, 800d176 <uxr_serialize_INFO_Payload+0x92>
 800d152:	f104 010c 	add.w	r1, r4, #12
 800d156:	4628      	mov	r0, r5
 800d158:	f7ff faf2 	bl	800c740 <uxr_serialize_ObjectVariant.part.0>
 800d15c:	4030      	ands	r0, r6
 800d15e:	b2c6      	uxtb	r6, r0
 800d160:	e7e4      	b.n	800d12c <uxr_serialize_INFO_Payload+0x48>
 800d162:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800d166:	4628      	mov	r0, r5
 800d168:	f7ff fe24 	bl	800cdb4 <uxr_serialize_ActivityInfoVariant>
 800d16c:	4006      	ands	r6, r0
 800d16e:	ea06 0007 	and.w	r0, r6, r7
 800d172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d176:	4606      	mov	r6, r0
 800d178:	e7d8      	b.n	800d12c <uxr_serialize_INFO_Payload+0x48>
 800d17a:	bf00      	nop

0800d17c <uxr_serialize_READ_DATA_Payload>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	2202      	movs	r2, #2
 800d180:	4605      	mov	r5, r0
 800d182:	460e      	mov	r6, r1
 800d184:	f002 f9ae 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d188:	1cb1      	adds	r1, r6, #2
 800d18a:	2202      	movs	r2, #2
 800d18c:	4604      	mov	r4, r0
 800d18e:	4628      	mov	r0, r5
 800d190:	f002 f9a8 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d194:	1d31      	adds	r1, r6, #4
 800d196:	4004      	ands	r4, r0
 800d198:	4628      	mov	r0, r5
 800d19a:	f7ff fe55 	bl	800ce48 <uxr_serialize_ReadSpecification>
 800d19e:	b2e4      	uxtb	r4, r4
 800d1a0:	4020      	ands	r0, r4
 800d1a2:	bd70      	pop	{r4, r5, r6, pc}

0800d1a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800d1a4:	b570      	push	{r4, r5, r6, lr}
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	460e      	mov	r6, r1
 800d1ac:	f002 f99a 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d1b0:	1cb1      	adds	r1, r6, #2
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f002 f994 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d1bc:	4020      	ands	r0, r4
 800d1be:	b2c0      	uxtb	r0, r0
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
 800d1c2:	bf00      	nop

0800d1c4 <uxr_serialize_ACKNACK_Payload>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	460f      	mov	r7, r1
 800d1c8:	460e      	mov	r6, r1
 800d1ca:	f837 1b02 	ldrh.w	r1, [r7], #2
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	f7fc f94a 	bl	8009468 <ucdr_serialize_uint16_t>
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	2202      	movs	r2, #2
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f002 f982 	bl	800f4e4 <ucdr_serialize_array_uint8_t>
 800d1e0:	7931      	ldrb	r1, [r6, #4]
 800d1e2:	4004      	ands	r4, r0
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f7fc f913 	bl	8009410 <ucdr_serialize_uint8_t>
 800d1ea:	b2e4      	uxtb	r4, r4
 800d1ec:	4020      	ands	r0, r4
 800d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1f0 <uxr_deserialize_ACKNACK_Payload>:
 800d1f0:	b570      	push	{r4, r5, r6, lr}
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	460e      	mov	r6, r1
 800d1f6:	f7fc fa37 	bl	8009668 <ucdr_deserialize_uint16_t>
 800d1fa:	1cb1      	adds	r1, r6, #2
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	4604      	mov	r4, r0
 800d200:	4628      	mov	r0, r5
 800d202:	f002 f9d3 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d206:	1d31      	adds	r1, r6, #4
 800d208:	4004      	ands	r4, r0
 800d20a:	4628      	mov	r0, r5
 800d20c:	f7fc f916 	bl	800943c <ucdr_deserialize_uint8_t>
 800d210:	b2e4      	uxtb	r4, r4
 800d212:	4020      	ands	r0, r4
 800d214:	bd70      	pop	{r4, r5, r6, pc}
 800d216:	bf00      	nop

0800d218 <uxr_serialize_HEARTBEAT_Payload>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	460d      	mov	r5, r1
 800d21c:	8809      	ldrh	r1, [r1, #0]
 800d21e:	4606      	mov	r6, r0
 800d220:	f7fc f922 	bl	8009468 <ucdr_serialize_uint16_t>
 800d224:	8869      	ldrh	r1, [r5, #2]
 800d226:	4604      	mov	r4, r0
 800d228:	4630      	mov	r0, r6
 800d22a:	f7fc f91d 	bl	8009468 <ucdr_serialize_uint16_t>
 800d22e:	7929      	ldrb	r1, [r5, #4]
 800d230:	4004      	ands	r4, r0
 800d232:	4630      	mov	r0, r6
 800d234:	f7fc f8ec 	bl	8009410 <ucdr_serialize_uint8_t>
 800d238:	b2e4      	uxtb	r4, r4
 800d23a:	4020      	ands	r0, r4
 800d23c:	bd70      	pop	{r4, r5, r6, pc}
 800d23e:	bf00      	nop

0800d240 <uxr_deserialize_HEARTBEAT_Payload>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	4605      	mov	r5, r0
 800d244:	460e      	mov	r6, r1
 800d246:	f7fc fa0f 	bl	8009668 <ucdr_deserialize_uint16_t>
 800d24a:	1cb1      	adds	r1, r6, #2
 800d24c:	4604      	mov	r4, r0
 800d24e:	4628      	mov	r0, r5
 800d250:	f7fc fa0a 	bl	8009668 <ucdr_deserialize_uint16_t>
 800d254:	1d31      	adds	r1, r6, #4
 800d256:	4004      	ands	r4, r0
 800d258:	4628      	mov	r0, r5
 800d25a:	f7fc f8ef 	bl	800943c <ucdr_deserialize_uint8_t>
 800d25e:	b2e4      	uxtb	r4, r4
 800d260:	4020      	ands	r0, r4
 800d262:	bd70      	pop	{r4, r5, r6, pc}

0800d264 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	4605      	mov	r5, r0
 800d26a:	460e      	mov	r6, r1
 800d26c:	f7fc ff98 	bl	800a1a0 <ucdr_deserialize_int32_t>
 800d270:	1d31      	adds	r1, r6, #4
 800d272:	4607      	mov	r7, r0
 800d274:	4628      	mov	r0, r5
 800d276:	f7fc fc11 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800d27a:	f106 0108 	add.w	r1, r6, #8
 800d27e:	4680      	mov	r8, r0
 800d280:	4628      	mov	r0, r5
 800d282:	f7fc ff8d 	bl	800a1a0 <ucdr_deserialize_int32_t>
 800d286:	f106 010c 	add.w	r1, r6, #12
 800d28a:	4604      	mov	r4, r0
 800d28c:	4628      	mov	r0, r5
 800d28e:	f7fc fc05 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800d292:	ea07 0708 	and.w	r7, r7, r8
 800d296:	403c      	ands	r4, r7
 800d298:	f106 0110 	add.w	r1, r6, #16
 800d29c:	4004      	ands	r4, r0
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f7fc ff7e 	bl	800a1a0 <ucdr_deserialize_int32_t>
 800d2a4:	f106 0114 	add.w	r1, r6, #20
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	461d      	mov	r5, r3
 800d2ae:	f7fc fbf5 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800d2b2:	b2e4      	uxtb	r4, r4
 800d2b4:	402c      	ands	r4, r5
 800d2b6:	4020      	ands	r0, r4
 800d2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2bc <uxr_deserialize_SampleIdentity>:
 800d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c0:	220c      	movs	r2, #12
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	f002 f971 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	f105 010c 	add.w	r1, r5, #12
 800d2d0:	4607      	mov	r7, r0
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f002 f96a 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 800d2d8:	f105 010f 	add.w	r1, r5, #15
 800d2dc:	4680      	mov	r8, r0
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f7fc f8ac 	bl	800943c <ucdr_deserialize_uint8_t>
 800d2e4:	f105 0110 	add.w	r1, r5, #16
 800d2e8:	4606      	mov	r6, r0
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f7fc ff58 	bl	800a1a0 <ucdr_deserialize_int32_t>
 800d2f0:	f105 0114 	add.w	r1, r5, #20
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	ea07 0708 	and.w	r7, r7, r8
 800d2fc:	461c      	mov	r4, r3
 800d2fe:	f7fc fbcd 	bl	8009a9c <ucdr_deserialize_uint32_t>
 800d302:	403e      	ands	r6, r7
 800d304:	4034      	ands	r4, r6
 800d306:	4020      	ands	r0, r4
 800d308:	b2c0      	uxtb	r0, r0
 800d30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30e:	bf00      	nop

0800d310 <rcl_convert_rmw_ret_to_rcl_ret>:
 800d310:	280b      	cmp	r0, #11
 800d312:	dc0d      	bgt.n	800d330 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800d314:	2800      	cmp	r0, #0
 800d316:	db09      	blt.n	800d32c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d318:	280b      	cmp	r0, #11
 800d31a:	d807      	bhi.n	800d32c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800d31c:	e8df f000 	tbb	[pc, r0]
 800d320:	07060607 	.word	0x07060607
 800d324:	06060606 	.word	0x06060606
 800d328:	07070606 	.word	0x07070606
 800d32c:	2001      	movs	r0, #1
 800d32e:	4770      	bx	lr
 800d330:	28cb      	cmp	r0, #203	; 0xcb
 800d332:	bf18      	it	ne
 800d334:	2001      	movne	r0, #1
 800d336:	4770      	bx	lr

0800d338 <rcl_get_zero_initialized_context>:
 800d338:	4a03      	ldr	r2, [pc, #12]	; (800d348 <rcl_get_zero_initialized_context+0x10>)
 800d33a:	4603      	mov	r3, r0
 800d33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d340:	e883 0003 	stmia.w	r3, {r0, r1}
 800d344:	4618      	mov	r0, r3
 800d346:	4770      	bx	lr
 800d348:	08012d00 	.word	0x08012d00

0800d34c <rcl_context_is_valid>:
 800d34c:	b118      	cbz	r0, 800d356 <rcl_context_is_valid+0xa>
 800d34e:	6840      	ldr	r0, [r0, #4]
 800d350:	3800      	subs	r0, #0
 800d352:	bf18      	it	ne
 800d354:	2001      	movne	r0, #1
 800d356:	4770      	bx	lr

0800d358 <__cleanup_context>:
 800d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d35c:	4606      	mov	r6, r0
 800d35e:	6800      	ldr	r0, [r0, #0]
 800d360:	2300      	movs	r3, #0
 800d362:	6073      	str	r3, [r6, #4]
 800d364:	2800      	cmp	r0, #0
 800d366:	d04d      	beq.n	800d404 <__cleanup_context+0xac>
 800d368:	6947      	ldr	r7, [r0, #20]
 800d36a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d36e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800d372:	b137      	cbz	r7, 800d382 <__cleanup_context+0x2a>
 800d374:	3014      	adds	r0, #20
 800d376:	f000 fb1d 	bl	800d9b4 <rcl_init_options_fini>
 800d37a:	4607      	mov	r7, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d148      	bne.n	800d412 <__cleanup_context+0xba>
 800d380:	6830      	ldr	r0, [r6, #0]
 800d382:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d384:	b143      	cbz	r3, 800d398 <__cleanup_context+0x40>
 800d386:	3028      	adds	r0, #40	; 0x28
 800d388:	f001 fdc8 	bl	800ef1c <rmw_context_fini>
 800d38c:	b118      	cbz	r0, 800d396 <__cleanup_context+0x3e>
 800d38e:	2f00      	cmp	r7, #0
 800d390:	d042      	beq.n	800d418 <__cleanup_context+0xc0>
 800d392:	f7fa fe89 	bl	80080a8 <rcutils_reset_error>
 800d396:	6830      	ldr	r0, [r6, #0]
 800d398:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800d39c:	f1bc 0f00 	cmp.w	ip, #0
 800d3a0:	d01c      	beq.n	800d3dc <__cleanup_context+0x84>
 800d3a2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d3a6:	2a01      	cmp	r2, #1
 800d3a8:	f173 0100 	sbcs.w	r1, r3, #0
 800d3ac:	db12      	blt.n	800d3d4 <__cleanup_context+0x7c>
 800d3ae:	2400      	movs	r4, #0
 800d3b0:	2500      	movs	r5, #0
 800d3b2:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	b1c0      	cbz	r0, 800d3ec <__cleanup_context+0x94>
 800d3ba:	47c0      	blx	r8
 800d3bc:	6831      	ldr	r1, [r6, #0]
 800d3be:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800d3c2:	3401      	adds	r4, #1
 800d3c4:	f145 0500 	adc.w	r5, r5, #0
 800d3c8:	4294      	cmp	r4, r2
 800d3ca:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800d3ce:	eb75 0103 	sbcs.w	r1, r5, r3
 800d3d2:	dbee      	blt.n	800d3b2 <__cleanup_context+0x5a>
 800d3d4:	4660      	mov	r0, ip
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	47c0      	blx	r8
 800d3da:	6830      	ldr	r0, [r6, #0]
 800d3dc:	4649      	mov	r1, r9
 800d3de:	47c0      	blx	r8
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e9c6 3300 	strd	r3, r3, [r6]
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	f145 0500 	adc.w	r5, r5, #0
 800d3f2:	4294      	cmp	r4, r2
 800d3f4:	eb75 0103 	sbcs.w	r1, r5, r3
 800d3f8:	dbdb      	blt.n	800d3b2 <__cleanup_context+0x5a>
 800d3fa:	4660      	mov	r0, ip
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	47c0      	blx	r8
 800d400:	6830      	ldr	r0, [r6, #0]
 800d402:	e7eb      	b.n	800d3dc <__cleanup_context+0x84>
 800d404:	4607      	mov	r7, r0
 800d406:	2300      	movs	r3, #0
 800d408:	e9c6 3300 	strd	r3, r3, [r6]
 800d40c:	4638      	mov	r0, r7
 800d40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d412:	f7fa fe49 	bl	80080a8 <rcutils_reset_error>
 800d416:	e7b3      	b.n	800d380 <__cleanup_context+0x28>
 800d418:	f7ff ff7a 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800d41c:	4607      	mov	r7, r0
 800d41e:	e7b8      	b.n	800d392 <__cleanup_context+0x3a>

0800d420 <rcl_expand_topic_name>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	b08b      	sub	sp, #44	; 0x2c
 800d426:	9306      	str	r3, [sp, #24]
 800d428:	2800      	cmp	r0, #0
 800d42a:	f000 80d2 	beq.w	800d5d2 <rcl_expand_topic_name+0x1b2>
 800d42e:	460e      	mov	r6, r1
 800d430:	2900      	cmp	r1, #0
 800d432:	f000 80ce 	beq.w	800d5d2 <rcl_expand_topic_name+0x1b2>
 800d436:	4617      	mov	r7, r2
 800d438:	2a00      	cmp	r2, #0
 800d43a:	f000 80ca 	beq.w	800d5d2 <rcl_expand_topic_name+0x1b2>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 80c7 	beq.w	800d5d2 <rcl_expand_topic_name+0x1b2>
 800d444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 80c3 	beq.w	800d5d2 <rcl_expand_topic_name+0x1b2>
 800d44c:	a909      	add	r1, sp, #36	; 0x24
 800d44e:	2200      	movs	r2, #0
 800d450:	4680      	mov	r8, r0
 800d452:	f000 ff67 	bl	800e324 <rcl_validate_topic_name>
 800d456:	4604      	mov	r4, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	f040 80b6 	bne.w	800d5ca <rcl_expand_topic_name+0x1aa>
 800d45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	f040 80bf 	bne.w	800d5e4 <rcl_expand_topic_name+0x1c4>
 800d466:	4602      	mov	r2, r0
 800d468:	a909      	add	r1, sp, #36	; 0x24
 800d46a:	4630      	mov	r0, r6
 800d46c:	f001 fa78 	bl	800e960 <rmw_validate_node_name>
 800d470:	2800      	cmp	r0, #0
 800d472:	f040 80b3 	bne.w	800d5dc <rcl_expand_topic_name+0x1bc>
 800d476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d478:	2a00      	cmp	r2, #0
 800d47a:	f040 80b8 	bne.w	800d5ee <rcl_expand_topic_name+0x1ce>
 800d47e:	a909      	add	r1, sp, #36	; 0x24
 800d480:	4638      	mov	r0, r7
 800d482:	f001 fa4f 	bl	800e924 <rmw_validate_namespace>
 800d486:	2800      	cmp	r0, #0
 800d488:	f040 80a8 	bne.w	800d5dc <rcl_expand_topic_name+0x1bc>
 800d48c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d48e:	2c00      	cmp	r4, #0
 800d490:	f040 80f6 	bne.w	800d680 <rcl_expand_topic_name+0x260>
 800d494:	217b      	movs	r1, #123	; 0x7b
 800d496:	4640      	mov	r0, r8
 800d498:	f004 faf6 	bl	8011a88 <strchr>
 800d49c:	f898 3000 	ldrb.w	r3, [r8]
 800d4a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	f000 80c4 	beq.w	800d630 <rcl_expand_topic_name+0x210>
 800d4a8:	2b7e      	cmp	r3, #126	; 0x7e
 800d4aa:	d16f      	bne.n	800d58c <rcl_expand_topic_name+0x16c>
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f7f2 feb9 	bl	8000224 <strlen>
 800d4b2:	4b87      	ldr	r3, [pc, #540]	; (800d6d0 <rcl_expand_topic_name+0x2b0>)
 800d4b4:	4987      	ldr	r1, [pc, #540]	; (800d6d4 <rcl_expand_topic_name+0x2b4>)
 800d4b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d4b8:	9604      	str	r6, [sp, #16]
 800d4ba:	2801      	cmp	r0, #1
 800d4bc:	bf0c      	ite	eq
 800d4be:	4618      	moveq	r0, r3
 800d4c0:	4608      	movne	r0, r1
 800d4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4c6:	e9cd 2300 	strd	r2, r3, [sp]
 800d4ca:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d4ce:	f108 0101 	add.w	r1, r8, #1
 800d4d2:	9105      	str	r1, [sp, #20]
 800d4d4:	ab14      	add	r3, sp, #80	; 0x50
 800d4d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4d8:	f001 f852 	bl	800e580 <rcutils_format_string_limit>
 800d4dc:	4682      	mov	sl, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	f000 80d0 	beq.w	800d684 <rcl_expand_topic_name+0x264>
 800d4e4:	2d00      	cmp	r5, #0
 800d4e6:	f000 80aa 	beq.w	800d63e <rcl_expand_topic_name+0x21e>
 800d4ea:	217b      	movs	r1, #123	; 0x7b
 800d4ec:	f004 facc 	bl	8011a88 <strchr>
 800d4f0:	46d1      	mov	r9, sl
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	9407      	str	r4, [sp, #28]
 800d4f6:	46d3      	mov	fp, sl
 800d4f8:	464c      	mov	r4, r9
 800d4fa:	2d00      	cmp	r5, #0
 800d4fc:	f000 80c7 	beq.w	800d68e <rcl_expand_topic_name+0x26e>
 800d500:	217d      	movs	r1, #125	; 0x7d
 800d502:	4620      	mov	r0, r4
 800d504:	f004 fac0 	bl	8011a88 <strchr>
 800d508:	eba0 0905 	sub.w	r9, r0, r5
 800d50c:	f109 0a01 	add.w	sl, r9, #1
 800d510:	4871      	ldr	r0, [pc, #452]	; (800d6d8 <rcl_expand_topic_name+0x2b8>)
 800d512:	4652      	mov	r2, sl
 800d514:	4629      	mov	r1, r5
 800d516:	f004 fac4 	bl	8011aa2 <strncmp>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f000 808d 	beq.w	800d63a <rcl_expand_topic_name+0x21a>
 800d520:	486e      	ldr	r0, [pc, #440]	; (800d6dc <rcl_expand_topic_name+0x2bc>)
 800d522:	4652      	mov	r2, sl
 800d524:	4629      	mov	r1, r5
 800d526:	f004 fabc 	bl	8011aa2 <strncmp>
 800d52a:	b130      	cbz	r0, 800d53a <rcl_expand_topic_name+0x11a>
 800d52c:	486c      	ldr	r0, [pc, #432]	; (800d6e0 <rcl_expand_topic_name+0x2c0>)
 800d52e:	4652      	mov	r2, sl
 800d530:	4629      	mov	r1, r5
 800d532:	f004 fab6 	bl	8011aa2 <strncmp>
 800d536:	2800      	cmp	r0, #0
 800d538:	d15b      	bne.n	800d5f2 <rcl_expand_topic_name+0x1d2>
 800d53a:	46b9      	mov	r9, r7
 800d53c:	ab16      	add	r3, sp, #88	; 0x58
 800d53e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d542:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d546:	ab14      	add	r3, sp, #80	; 0x50
 800d548:	4628      	mov	r0, r5
 800d54a:	cb0c      	ldmia	r3, {r2, r3}
 800d54c:	4651      	mov	r1, sl
 800d54e:	f001 f963 	bl	800e818 <rcutils_strndup>
 800d552:	4605      	mov	r5, r0
 800d554:	2800      	cmp	r0, #0
 800d556:	f000 80a4 	beq.w	800d6a2 <rcl_expand_topic_name+0x282>
 800d55a:	464a      	mov	r2, r9
 800d55c:	4620      	mov	r0, r4
 800d55e:	ab14      	add	r3, sp, #80	; 0x50
 800d560:	4629      	mov	r1, r5
 800d562:	f001 f85f 	bl	800e624 <rcutils_repl_str>
 800d566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d568:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d56a:	4604      	mov	r4, r0
 800d56c:	4628      	mov	r0, r5
 800d56e:	4798      	blx	r3
 800d570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d572:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d574:	4658      	mov	r0, fp
 800d576:	4798      	blx	r3
 800d578:	2c00      	cmp	r4, #0
 800d57a:	f000 8083 	beq.w	800d684 <rcl_expand_topic_name+0x264>
 800d57e:	217b      	movs	r1, #123	; 0x7b
 800d580:	4620      	mov	r0, r4
 800d582:	f004 fa81 	bl	8011a88 <strchr>
 800d586:	46a3      	mov	fp, r4
 800d588:	4605      	mov	r5, r0
 800d58a:	e7b6      	b.n	800d4fa <rcl_expand_topic_name+0xda>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d151      	bne.n	800d634 <rcl_expand_topic_name+0x214>
 800d590:	4638      	mov	r0, r7
 800d592:	f7f2 fe47 	bl	8000224 <strlen>
 800d596:	4b53      	ldr	r3, [pc, #332]	; (800d6e4 <rcl_expand_topic_name+0x2c4>)
 800d598:	4a53      	ldr	r2, [pc, #332]	; (800d6e8 <rcl_expand_topic_name+0x2c8>)
 800d59a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d59e:	2801      	cmp	r0, #1
 800d5a0:	bf0c      	ite	eq
 800d5a2:	4618      	moveq	r0, r3
 800d5a4:	4610      	movne	r0, r2
 800d5a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5ac:	e9cd 3200 	strd	r3, r2, [sp]
 800d5b0:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d5b4:	ab14      	add	r3, sp, #80	; 0x50
 800d5b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d5b8:	f000 ffe2 	bl	800e580 <rcutils_format_string_limit>
 800d5bc:	4682      	mov	sl, r0
 800d5be:	4653      	mov	r3, sl
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d05f      	beq.n	800d684 <rcl_expand_topic_name+0x264>
 800d5c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5c6:	f8c3 a000 	str.w	sl, [r3]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	b00b      	add	sp, #44	; 0x2c
 800d5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d2:	240b      	movs	r4, #11
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	b00b      	add	sp, #44	; 0x2c
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	f7ff fe98 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	e7f2      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d5e4:	2467      	movs	r4, #103	; 0x67
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	b00b      	add	sp, #44	; 0x2c
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ee:	24c9      	movs	r4, #201	; 0xc9
 800d5f0:	e7eb      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d5f2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800d5f6:	9806      	ldr	r0, [sp, #24]
 800d5f8:	1c69      	adds	r1, r5, #1
 800d5fa:	f7fa fe6b 	bl	80082d4 <rcutils_string_map_getn>
 800d5fe:	4681      	mov	r9, r0
 800d600:	2800      	cmp	r0, #0
 800d602:	d19b      	bne.n	800d53c <rcl_expand_topic_name+0x11c>
 800d604:	aa16      	add	r2, sp, #88	; 0x58
 800d606:	ca07      	ldmia	r2, {r0, r1, r2}
 800d608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d60a:	f8c3 9000 	str.w	r9, [r3]
 800d60e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d612:	ab14      	add	r3, sp, #80	; 0x50
 800d614:	cb0c      	ldmia	r3, {r2, r3}
 800d616:	4651      	mov	r1, sl
 800d618:	4628      	mov	r0, r5
 800d61a:	f001 f8fd 	bl	800e818 <rcutils_strndup>
 800d61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d620:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d622:	4798      	blx	r3
 800d624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d626:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d628:	4658      	mov	r0, fp
 800d62a:	4798      	blx	r3
 800d62c:	2469      	movs	r4, #105	; 0x69
 800d62e:	e7cc      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d630:	2800      	cmp	r0, #0
 800d632:	d03e      	beq.n	800d6b2 <rcl_expand_topic_name+0x292>
 800d634:	46c1      	mov	r9, r8
 800d636:	46a2      	mov	sl, r4
 800d638:	e75c      	b.n	800d4f4 <rcl_expand_topic_name+0xd4>
 800d63a:	46b1      	mov	r9, r6
 800d63c:	e77e      	b.n	800d53c <rcl_expand_topic_name+0x11c>
 800d63e:	f89a 3000 	ldrb.w	r3, [sl]
 800d642:	2b2f      	cmp	r3, #47	; 0x2f
 800d644:	d0be      	beq.n	800d5c4 <rcl_expand_topic_name+0x1a4>
 800d646:	4638      	mov	r0, r7
 800d648:	f7f2 fdec 	bl	8000224 <strlen>
 800d64c:	4b25      	ldr	r3, [pc, #148]	; (800d6e4 <rcl_expand_topic_name+0x2c4>)
 800d64e:	4926      	ldr	r1, [pc, #152]	; (800d6e8 <rcl_expand_topic_name+0x2c8>)
 800d650:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d652:	f8cd a010 	str.w	sl, [sp, #16]
 800d656:	2801      	cmp	r0, #1
 800d658:	bf0c      	ite	eq
 800d65a:	4618      	moveq	r0, r3
 800d65c:	4608      	movne	r0, r1
 800d65e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d662:	e9cd 2300 	strd	r2, r3, [sp]
 800d666:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800d66a:	ab14      	add	r3, sp, #80	; 0x50
 800d66c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d66e:	f000 ff87 	bl	800e580 <rcutils_format_string_limit>
 800d672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d674:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d676:	4603      	mov	r3, r0
 800d678:	4650      	mov	r0, sl
 800d67a:	469a      	mov	sl, r3
 800d67c:	4790      	blx	r2
 800d67e:	e79e      	b.n	800d5be <rcl_expand_topic_name+0x19e>
 800d680:	24ca      	movs	r4, #202	; 0xca
 800d682:	e7a2      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d684:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d686:	2300      	movs	r3, #0
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	240a      	movs	r4, #10
 800d68c:	e79d      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d68e:	465b      	mov	r3, fp
 800d690:	9c07      	ldr	r4, [sp, #28]
 800d692:	46da      	mov	sl, fp
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1d2      	bne.n	800d63e <rcl_expand_topic_name+0x21e>
 800d698:	f898 3000 	ldrb.w	r3, [r8]
 800d69c:	2b2f      	cmp	r3, #47	; 0x2f
 800d69e:	d091      	beq.n	800d5c4 <rcl_expand_topic_name+0x1a4>
 800d6a0:	e776      	b.n	800d590 <rcl_expand_topic_name+0x170>
 800d6a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6a6:	601d      	str	r5, [r3, #0]
 800d6a8:	4658      	mov	r0, fp
 800d6aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6ac:	4798      	blx	r3
 800d6ae:	240a      	movs	r4, #10
 800d6b0:	e78b      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d6b2:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 800d6b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d6ba:	ab14      	add	r3, sp, #80	; 0x50
 800d6bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6be:	4640      	mov	r0, r8
 800d6c0:	f001 f888 	bl	800e7d4 <rcutils_strdup>
 800d6c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	bf08      	it	eq
 800d6ca:	240a      	moveq	r4, #10
 800d6cc:	6018      	str	r0, [r3, #0]
 800d6ce:	e77c      	b.n	800d5ca <rcl_expand_topic_name+0x1aa>
 800d6d0:	08012c88 	.word	0x08012c88
 800d6d4:	08012d08 	.word	0x08012d08
 800d6d8:	08012d18 	.word	0x08012d18
 800d6dc:	08012d20 	.word	0x08012d20
 800d6e0:	08012d28 	.word	0x08012d28
 800d6e4:	08012c98 	.word	0x08012c98
 800d6e8:	08012d10 	.word	0x08012d10

0800d6ec <rcl_get_default_topic_name_substitutions>:
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	bf0c      	ite	eq
 800d6f0:	200b      	moveq	r0, #11
 800d6f2:	2000      	movne	r0, #0
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <rcl_init>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	1e07      	subs	r7, r0, #0
 800d6fe:	b09f      	sub	sp, #124	; 0x7c
 800d700:	4688      	mov	r8, r1
 800d702:	4692      	mov	sl, r2
 800d704:	4699      	mov	r9, r3
 800d706:	f340 8097 	ble.w	800d838 <rcl_init+0x140>
 800d70a:	2900      	cmp	r1, #0
 800d70c:	f000 8097 	beq.w	800d83e <rcl_init+0x146>
 800d710:	1f0d      	subs	r5, r1, #4
 800d712:	2400      	movs	r4, #0
 800d714:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800d718:	3401      	adds	r4, #1
 800d71a:	2e00      	cmp	r6, #0
 800d71c:	f000 808f 	beq.w	800d83e <rcl_init+0x146>
 800d720:	42a7      	cmp	r7, r4
 800d722:	d1f7      	bne.n	800d714 <rcl_init+0x1c>
 800d724:	f1ba 0f00 	cmp.w	sl, #0
 800d728:	f000 8089 	beq.w	800d83e <rcl_init+0x146>
 800d72c:	f8da 4000 	ldr.w	r4, [sl]
 800d730:	2c00      	cmp	r4, #0
 800d732:	f000 8084 	beq.w	800d83e <rcl_init+0x146>
 800d736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d738:	ad19      	add	r5, sp, #100	; 0x64
 800d73a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	602b      	str	r3, [r5, #0]
 800d740:	a819      	add	r0, sp, #100	; 0x64
 800d742:	f7fa fc8d 	bl	8008060 <rcutils_allocator_is_valid>
 800d746:	2800      	cmp	r0, #0
 800d748:	d079      	beq.n	800d83e <rcl_init+0x146>
 800d74a:	f1b9 0f00 	cmp.w	r9, #0
 800d74e:	d076      	beq.n	800d83e <rcl_init+0x146>
 800d750:	f8d9 3000 	ldr.w	r3, [r9]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d177      	bne.n	800d848 <rcl_init+0x150>
 800d758:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d75c:	2178      	movs	r1, #120	; 0x78
 800d75e:	2001      	movs	r0, #1
 800d760:	4798      	blx	r3
 800d762:	4604      	mov	r4, r0
 800d764:	f8c9 0000 	str.w	r0, [r9]
 800d768:	2800      	cmp	r0, #0
 800d76a:	f000 80ba 	beq.w	800d8e2 <rcl_init+0x1ea>
 800d76e:	a802      	add	r0, sp, #8
 800d770:	f001 f86e 	bl	800e850 <rmw_get_zero_initialized_context>
 800d774:	a902      	add	r1, sp, #8
 800d776:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d77a:	2250      	movs	r2, #80	; 0x50
 800d77c:	ac19      	add	r4, sp, #100	; 0x64
 800d77e:	f004 fa44 	bl	8011c0a <memcpy>
 800d782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d784:	f8d9 5000 	ldr.w	r5, [r9]
 800d788:	6826      	ldr	r6, [r4, #0]
 800d78a:	462c      	mov	r4, r5
 800d78c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d78e:	f105 0114 	add.w	r1, r5, #20
 800d792:	6026      	str	r6, [r4, #0]
 800d794:	4650      	mov	r0, sl
 800d796:	f000 f931 	bl	800d9fc <rcl_init_options_copy>
 800d79a:	4606      	mov	r6, r0
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d144      	bne.n	800d82a <rcl_init+0x132>
 800d7a0:	f8d9 a000 	ldr.w	sl, [r9]
 800d7a4:	463c      	mov	r4, r7
 800d7a6:	17fd      	asrs	r5, r7, #31
 800d7a8:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800d7ac:	f8ca 0020 	str.w	r0, [sl, #32]
 800d7b0:	2f00      	cmp	r7, #0
 800d7b2:	d050      	beq.n	800d856 <rcl_init+0x15e>
 800d7b4:	f1b8 0f00 	cmp.w	r8, #0
 800d7b8:	d04d      	beq.n	800d856 <rcl_init+0x15e>
 800d7ba:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800d7be:	4638      	mov	r0, r7
 800d7c0:	2104      	movs	r1, #4
 800d7c2:	4798      	blx	r3
 800d7c4:	f8ca 0020 	str.w	r0, [sl, #32]
 800d7c8:	f8d9 a000 	ldr.w	sl, [r9]
 800d7cc:	f8da 3020 	ldr.w	r3, [sl, #32]
 800d7d0:	46d3      	mov	fp, sl
 800d7d2:	b34b      	cbz	r3, 800d828 <rcl_init+0x130>
 800d7d4:	2f01      	cmp	r7, #1
 800d7d6:	f175 0300 	sbcs.w	r3, r5, #0
 800d7da:	db3c      	blt.n	800d856 <rcl_init+0x15e>
 800d7dc:	f1a8 0804 	sub.w	r8, r8, #4
 800d7e0:	2600      	movs	r6, #0
 800d7e2:	2700      	movs	r7, #0
 800d7e4:	e00c      	b.n	800d800 <rcl_init+0x108>
 800d7e6:	f8d8 1000 	ldr.w	r1, [r8]
 800d7ea:	f004 fa0e 	bl	8011c0a <memcpy>
 800d7ee:	3601      	adds	r6, #1
 800d7f0:	f147 0700 	adc.w	r7, r7, #0
 800d7f4:	42bd      	cmp	r5, r7
 800d7f6:	bf08      	it	eq
 800d7f8:	42b4      	cmpeq	r4, r6
 800d7fa:	d02a      	beq.n	800d852 <rcl_init+0x15a>
 800d7fc:	f8d9 b000 	ldr.w	fp, [r9]
 800d800:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800d804:	f7f2 fd0e 	bl	8000224 <strlen>
 800d808:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d80a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d80c:	f8db a020 	ldr.w	sl, [fp, #32]
 800d810:	9001      	str	r0, [sp, #4]
 800d812:	4798      	blx	r3
 800d814:	f8d9 1000 	ldr.w	r1, [r9]
 800d818:	9a01      	ldr	r2, [sp, #4]
 800d81a:	6a09      	ldr	r1, [r1, #32]
 800d81c:	00b3      	lsls	r3, r6, #2
 800d81e:	f84a 0003 	str.w	r0, [sl, r3]
 800d822:	58c8      	ldr	r0, [r1, r3]
 800d824:	2800      	cmp	r0, #0
 800d826:	d1de      	bne.n	800d7e6 <rcl_init+0xee>
 800d828:	260a      	movs	r6, #10
 800d82a:	4648      	mov	r0, r9
 800d82c:	f7ff fd94 	bl	800d358 <__cleanup_context>
 800d830:	4630      	mov	r0, r6
 800d832:	b01f      	add	sp, #124	; 0x7c
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	2900      	cmp	r1, #0
 800d83a:	f43f af73 	beq.w	800d724 <rcl_init+0x2c>
 800d83e:	260b      	movs	r6, #11
 800d840:	4630      	mov	r0, r6
 800d842:	b01f      	add	sp, #124	; 0x7c
 800d844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d848:	2664      	movs	r6, #100	; 0x64
 800d84a:	4630      	mov	r0, r6
 800d84c:	b01f      	add	sp, #124	; 0x7c
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	f8d9 a000 	ldr.w	sl, [r9]
 800d856:	4a2c      	ldr	r2, [pc, #176]	; (800d908 <rcl_init+0x210>)
 800d858:	6813      	ldr	r3, [r2, #0]
 800d85a:	3301      	adds	r3, #1
 800d85c:	d03b      	beq.n	800d8d6 <rcl_init+0x1de>
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	4619      	mov	r1, r3
 800d862:	2000      	movs	r0, #0
 800d864:	f8da 4014 	ldr.w	r4, [sl, #20]
 800d868:	f8c9 3004 	str.w	r3, [r9, #4]
 800d86c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d86e:	3301      	adds	r3, #1
 800d870:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800d874:	d039      	beq.n	800d8ea <rcl_init+0x1f2>
 800d876:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d87a:	b94b      	cbnz	r3, 800d890 <rcl_init+0x198>
 800d87c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d880:	f000 f962 	bl	800db48 <rcl_get_localhost_only>
 800d884:	4606      	mov	r6, r0
 800d886:	2800      	cmp	r0, #0
 800d888:	d1cf      	bne.n	800d82a <rcl_init+0x132>
 800d88a:	f8d9 3000 	ldr.w	r3, [r9]
 800d88e:	695c      	ldr	r4, [r3, #20]
 800d890:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d892:	aa18      	add	r2, sp, #96	; 0x60
 800d894:	a917      	add	r1, sp, #92	; 0x5c
 800d896:	f000 fd33 	bl	800e300 <rcl_validate_enclave_name>
 800d89a:	4606      	mov	r6, r0
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d1c4      	bne.n	800d82a <rcl_init+0x132>
 800d8a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8a2:	bb03      	cbnz	r3, 800d8e6 <rcl_init+0x1ee>
 800d8a4:	f8d9 1000 	ldr.w	r1, [r9]
 800d8a8:	694b      	ldr	r3, [r1, #20]
 800d8aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d8ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800d8b0:	f000 fbf2 	bl	800e098 <rcl_get_security_options_from_environment>
 800d8b4:	4606      	mov	r6, r0
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d1b7      	bne.n	800d82a <rcl_init+0x132>
 800d8ba:	f8d9 1000 	ldr.w	r1, [r9]
 800d8be:	6948      	ldr	r0, [r1, #20]
 800d8c0:	3128      	adds	r1, #40	; 0x28
 800d8c2:	3018      	adds	r0, #24
 800d8c4:	f001 f9f2 	bl	800ecac <rmw_init>
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0b8      	beq.n	800d840 <rcl_init+0x148>
 800d8ce:	f7ff fd1f 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	e7a9      	b.n	800d82a <rcl_init+0x132>
 800d8d6:	2401      	movs	r4, #1
 800d8d8:	4618      	mov	r0, r3
 800d8da:	4621      	mov	r1, r4
 800d8dc:	6014      	str	r4, [r2, #0]
 800d8de:	4623      	mov	r3, r4
 800d8e0:	e7c0      	b.n	800d864 <rcl_init+0x16c>
 800d8e2:	260a      	movs	r6, #10
 800d8e4:	e7ac      	b.n	800d840 <rcl_init+0x148>
 800d8e6:	2601      	movs	r6, #1
 800d8e8:	e79f      	b.n	800d82a <rcl_init+0x132>
 800d8ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d8ee:	f003 fb01 	bl	8010ef4 <rcl_get_default_domain_id>
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d198      	bne.n	800d82a <rcl_init+0x132>
 800d8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	f8d9 3000 	ldr.w	r3, [r9]
 800d900:	bf08      	it	eq
 800d902:	6260      	streq	r0, [r4, #36]	; 0x24
 800d904:	695c      	ldr	r4, [r3, #20]
 800d906:	e7b6      	b.n	800d876 <rcl_init+0x17e>
 800d908:	200091f0 	.word	0x200091f0

0800d90c <rcl_get_zero_initialized_init_options>:
 800d90c:	2000      	movs	r0, #0
 800d90e:	4770      	bx	lr

0800d910 <rcl_init_options_init>:
 800d910:	b084      	sub	sp, #16
 800d912:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d914:	b091      	sub	sp, #68	; 0x44
 800d916:	af17      	add	r7, sp, #92	; 0x5c
 800d918:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d044      	beq.n	800d9aa <rcl_init_options_init+0x9a>
 800d920:	6803      	ldr	r3, [r0, #0]
 800d922:	4606      	mov	r6, r0
 800d924:	b133      	cbz	r3, 800d934 <rcl_init_options_init+0x24>
 800d926:	2464      	movs	r4, #100	; 0x64
 800d928:	4620      	mov	r0, r4
 800d92a:	b011      	add	sp, #68	; 0x44
 800d92c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d930:	b004      	add	sp, #16
 800d932:	4770      	bx	lr
 800d934:	4638      	mov	r0, r7
 800d936:	f7fa fb93 	bl	8008060 <rcutils_allocator_is_valid>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d035      	beq.n	800d9aa <rcl_init_options_init+0x9a>
 800d93e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d940:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d942:	2050      	movs	r0, #80	; 0x50
 800d944:	4798      	blx	r3
 800d946:	4604      	mov	r4, r0
 800d948:	6030      	str	r0, [r6, #0]
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d02f      	beq.n	800d9ae <rcl_init_options_init+0x9e>
 800d94e:	46bc      	mov	ip, r7
 800d950:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d954:	4625      	mov	r5, r4
 800d956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d958:	f8dc 3000 	ldr.w	r3, [ip]
 800d95c:	602b      	str	r3, [r5, #0]
 800d95e:	a802      	add	r0, sp, #8
 800d960:	ad02      	add	r5, sp, #8
 800d962:	f000 ff7d 	bl	800e860 <rmw_get_zero_initialized_init_options>
 800d966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d968:	3418      	adds	r4, #24
 800d96a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d96c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d96e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d974:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d978:	6833      	ldr	r3, [r6, #0]
 800d97a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d97e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800d982:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d986:	f103 0018 	add.w	r0, r3, #24
 800d98a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d98e:	f001 f8b3 	bl	800eaf8 <rmw_init_options_init>
 800d992:	4604      	mov	r4, r0
 800d994:	2800      	cmp	r0, #0
 800d996:	d0c7      	beq.n	800d928 <rcl_init_options_init+0x18>
 800d998:	6830      	ldr	r0, [r6, #0]
 800d99a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d99c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d99e:	4798      	blx	r3
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f7ff fcb5 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	e7be      	b.n	800d928 <rcl_init_options_init+0x18>
 800d9aa:	240b      	movs	r4, #11
 800d9ac:	e7bc      	b.n	800d928 <rcl_init_options_init+0x18>
 800d9ae:	240a      	movs	r4, #10
 800d9b0:	e7ba      	b.n	800d928 <rcl_init_options_init+0x18>
 800d9b2:	bf00      	nop

0800d9b4 <rcl_init_options_fini>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	b086      	sub	sp, #24
 800d9b8:	b1c0      	cbz	r0, 800d9ec <rcl_init_options_fini+0x38>
 800d9ba:	6804      	ldr	r4, [r0, #0]
 800d9bc:	4606      	mov	r6, r0
 800d9be:	b1ac      	cbz	r4, 800d9ec <rcl_init_options_fini+0x38>
 800d9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c2:	ad01      	add	r5, sp, #4
 800d9c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	602b      	str	r3, [r5, #0]
 800d9ca:	a801      	add	r0, sp, #4
 800d9cc:	f7fa fb48 	bl	8008060 <rcutils_allocator_is_valid>
 800d9d0:	b160      	cbz	r0, 800d9ec <rcl_init_options_fini+0x38>
 800d9d2:	6830      	ldr	r0, [r6, #0]
 800d9d4:	3018      	adds	r0, #24
 800d9d6:	f001 f929 	bl	800ec2c <rmw_init_options_fini>
 800d9da:	4604      	mov	r4, r0
 800d9dc:	b950      	cbnz	r0, 800d9f4 <rcl_init_options_fini+0x40>
 800d9de:	6830      	ldr	r0, [r6, #0]
 800d9e0:	9b02      	ldr	r3, [sp, #8]
 800d9e2:	9905      	ldr	r1, [sp, #20]
 800d9e4:	4798      	blx	r3
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	b006      	add	sp, #24
 800d9ea:	bd70      	pop	{r4, r5, r6, pc}
 800d9ec:	240b      	movs	r4, #11
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	b006      	add	sp, #24
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	f7ff fc8c 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	e7f8      	b.n	800d9ee <rcl_init_options_fini+0x3a>

0800d9fc <rcl_init_options_copy>:
 800d9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da00:	b096      	sub	sp, #88	; 0x58
 800da02:	2800      	cmp	r0, #0
 800da04:	d063      	beq.n	800dace <rcl_init_options_copy+0xd2>
 800da06:	6806      	ldr	r6, [r0, #0]
 800da08:	4605      	mov	r5, r0
 800da0a:	2e00      	cmp	r6, #0
 800da0c:	d05f      	beq.n	800dace <rcl_init_options_copy+0xd2>
 800da0e:	460c      	mov	r4, r1
 800da10:	2900      	cmp	r1, #0
 800da12:	d05c      	beq.n	800dace <rcl_init_options_copy+0xd2>
 800da14:	680b      	ldr	r3, [r1, #0]
 800da16:	b123      	cbz	r3, 800da22 <rcl_init_options_copy+0x26>
 800da18:	2664      	movs	r6, #100	; 0x64
 800da1a:	4630      	mov	r0, r6
 800da1c:	b016      	add	sp, #88	; 0x58
 800da1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800da24:	af11      	add	r7, sp, #68	; 0x44
 800da26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800da28:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800da2c:	6833      	ldr	r3, [r6, #0]
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	4640      	mov	r0, r8
 800da32:	f7fa fb15 	bl	8008060 <rcutils_allocator_is_valid>
 800da36:	2800      	cmp	r0, #0
 800da38:	d049      	beq.n	800dace <rcl_init_options_copy+0xd2>
 800da3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da3c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800da3e:	2050      	movs	r0, #80	; 0x50
 800da40:	4798      	blx	r3
 800da42:	4606      	mov	r6, r0
 800da44:	6020      	str	r0, [r4, #0]
 800da46:	2800      	cmp	r0, #0
 800da48:	d077      	beq.n	800db3a <rcl_init_options_copy+0x13e>
 800da4a:	46c4      	mov	ip, r8
 800da4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da50:	4637      	mov	r7, r6
 800da52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800da54:	f8dc 3000 	ldr.w	r3, [ip]
 800da58:	603b      	str	r3, [r7, #0]
 800da5a:	a802      	add	r0, sp, #8
 800da5c:	af02      	add	r7, sp, #8
 800da5e:	f000 feff 	bl	800e860 <rmw_get_zero_initialized_init_options>
 800da62:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da64:	3618      	adds	r6, #24
 800da66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da70:	e897 0003 	ldmia.w	r7, {r0, r1}
 800da74:	ab16      	add	r3, sp, #88	; 0x58
 800da76:	e886 0003 	stmia.w	r6, {r0, r1}
 800da7a:	e913 0003 	ldmdb	r3, {r0, r1}
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	e88d 0003 	stmia.w	sp, {r0, r1}
 800da84:	f103 0018 	add.w	r0, r3, #24
 800da88:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800da8c:	f001 f834 	bl	800eaf8 <rmw_init_options_init>
 800da90:	4606      	mov	r6, r0
 800da92:	bb08      	cbnz	r0, 800dad8 <rcl_init_options_copy+0xdc>
 800da94:	682f      	ldr	r7, [r5, #0]
 800da96:	f8d4 c000 	ldr.w	ip, [r4]
 800da9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800da9c:	4666      	mov	r6, ip
 800da9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	6033      	str	r3, [r6, #0]
 800daa4:	f10c 0018 	add.w	r0, ip, #24
 800daa8:	f001 f8c0 	bl	800ec2c <rmw_init_options_fini>
 800daac:	4607      	mov	r7, r0
 800daae:	b1f0      	cbz	r0, 800daee <rcl_init_options_copy+0xf2>
 800dab0:	f7fa fae4 	bl	800807c <rcutils_get_error_string>
 800dab4:	f7fa faf8 	bl	80080a8 <rcutils_reset_error>
 800dab8:	4620      	mov	r0, r4
 800daba:	f7ff ff7b 	bl	800d9b4 <rcl_init_options_fini>
 800dabe:	4606      	mov	r6, r0
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d1aa      	bne.n	800da1a <rcl_init_options_copy+0x1e>
 800dac4:	4638      	mov	r0, r7
 800dac6:	f7ff fc23 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800daca:	4606      	mov	r6, r0
 800dacc:	e7a5      	b.n	800da1a <rcl_init_options_copy+0x1e>
 800dace:	260b      	movs	r6, #11
 800dad0:	4630      	mov	r0, r6
 800dad2:	b016      	add	sp, #88	; 0x58
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dada:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	4798      	blx	r3
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7ff fc15 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800dae6:	4606      	mov	r6, r0
 800dae8:	2800      	cmp	r0, #0
 800daea:	d0d3      	beq.n	800da94 <rcl_init_options_copy+0x98>
 800daec:	e795      	b.n	800da1a <rcl_init_options_copy+0x1e>
 800daee:	a802      	add	r0, sp, #8
 800daf0:	ae02      	add	r6, sp, #8
 800daf2:	6827      	ldr	r7, [r4, #0]
 800daf4:	f000 feb4 	bl	800e860 <rmw_get_zero_initialized_init_options>
 800daf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dafa:	3718      	adds	r7, #24
 800dafc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dafe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800db00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800db02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800db04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800db06:	e896 0003 	ldmia.w	r6, {r0, r1}
 800db0a:	682a      	ldr	r2, [r5, #0]
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	e887 0003 	stmia.w	r7, {r0, r1}
 800db12:	f102 0018 	add.w	r0, r2, #24
 800db16:	f103 0118 	add.w	r1, r3, #24
 800db1a:	f001 f845 	bl	800eba8 <rmw_init_options_copy>
 800db1e:	4606      	mov	r6, r0
 800db20:	2800      	cmp	r0, #0
 800db22:	f43f af7a 	beq.w	800da1a <rcl_init_options_copy+0x1e>
 800db26:	f7fa faa9 	bl	800807c <rcutils_get_error_string>
 800db2a:	f7fa fabd 	bl	80080a8 <rcutils_reset_error>
 800db2e:	4620      	mov	r0, r4
 800db30:	f7ff ff40 	bl	800d9b4 <rcl_init_options_fini>
 800db34:	b118      	cbz	r0, 800db3e <rcl_init_options_copy+0x142>
 800db36:	4606      	mov	r6, r0
 800db38:	e76f      	b.n	800da1a <rcl_init_options_copy+0x1e>
 800db3a:	260a      	movs	r6, #10
 800db3c:	e76d      	b.n	800da1a <rcl_init_options_copy+0x1e>
 800db3e:	4630      	mov	r0, r6
 800db40:	f7ff fbe6 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800db44:	4606      	mov	r6, r0
 800db46:	e768      	b.n	800da1a <rcl_init_options_copy+0x1e>

0800db48 <rcl_get_localhost_only>:
 800db48:	b510      	push	{r4, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	2300      	movs	r3, #0
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	b1b8      	cbz	r0, 800db82 <rcl_get_localhost_only+0x3a>
 800db52:	4604      	mov	r4, r0
 800db54:	a901      	add	r1, sp, #4
 800db56:	480c      	ldr	r0, [pc, #48]	; (800db88 <rcl_get_localhost_only+0x40>)
 800db58:	f000 fd4c 	bl	800e5f4 <rcutils_get_env>
 800db5c:	b110      	cbz	r0, 800db64 <rcl_get_localhost_only+0x1c>
 800db5e:	2001      	movs	r0, #1
 800db60:	b002      	add	sp, #8
 800db62:	bd10      	pop	{r4, pc}
 800db64:	9b01      	ldr	r3, [sp, #4]
 800db66:	b113      	cbz	r3, 800db6e <rcl_get_localhost_only+0x26>
 800db68:	781a      	ldrb	r2, [r3, #0]
 800db6a:	2a31      	cmp	r2, #49	; 0x31
 800db6c:	d004      	beq.n	800db78 <rcl_get_localhost_only+0x30>
 800db6e:	2302      	movs	r3, #2
 800db70:	2000      	movs	r0, #0
 800db72:	7023      	strb	r3, [r4, #0]
 800db74:	b002      	add	sp, #8
 800db76:	bd10      	pop	{r4, pc}
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1f7      	bne.n	800db6e <rcl_get_localhost_only+0x26>
 800db7e:	2301      	movs	r3, #1
 800db80:	e7f6      	b.n	800db70 <rcl_get_localhost_only+0x28>
 800db82:	200b      	movs	r0, #11
 800db84:	b002      	add	sp, #8
 800db86:	bd10      	pop	{r4, pc}
 800db88:	08012d34 	.word	0x08012d34

0800db8c <rcl_get_zero_initialized_node>:
 800db8c:	4a03      	ldr	r2, [pc, #12]	; (800db9c <rcl_get_zero_initialized_node+0x10>)
 800db8e:	4603      	mov	r3, r0
 800db90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db94:	e883 0003 	stmia.w	r3, {r0, r1}
 800db98:	4618      	mov	r0, r3
 800db9a:	4770      	bx	lr
 800db9c:	08012d54 	.word	0x08012d54

0800dba0 <rcl_node_init>:
 800dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba4:	b09b      	sub	sp, #108	; 0x6c
 800dba6:	4604      	mov	r4, r0
 800dba8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800dbac:	f04f 0c00 	mov.w	ip, #0
 800dbb0:	a815      	add	r0, sp, #84	; 0x54
 800dbb2:	460e      	mov	r6, r1
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	461f      	mov	r7, r3
 800dbb8:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800dbbc:	f003 fa56 	bl	801106c <rcl_guard_condition_get_default_options>
 800dbc0:	f1b8 0f00 	cmp.w	r8, #0
 800dbc4:	f000 80fd 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbc8:	f108 0b04 	add.w	fp, r8, #4
 800dbcc:	4658      	mov	r0, fp
 800dbce:	f7fa fa47 	bl	8008060 <rcutils_allocator_is_valid>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	f000 80f5 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbd8:	2e00      	cmp	r6, #0
 800dbda:	f000 80f2 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbde:	2d00      	cmp	r5, #0
 800dbe0:	f000 80ef 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbe4:	2c00      	cmp	r4, #0
 800dbe6:	f000 80ec 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dbee:	f1b9 0f00 	cmp.w	r9, #0
 800dbf2:	f040 8112 	bne.w	800de1a <rcl_node_init+0x27a>
 800dbf6:	2f00      	cmp	r7, #0
 800dbf8:	f000 80e3 	beq.w	800ddc2 <rcl_node_init+0x222>
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	f7ff fba5 	bl	800d34c <rcl_context_is_valid>
 800dc02:	4682      	mov	sl, r0
 800dc04:	2800      	cmp	r0, #0
 800dc06:	f000 80e2 	beq.w	800ddce <rcl_node_init+0x22e>
 800dc0a:	464a      	mov	r2, r9
 800dc0c:	a914      	add	r1, sp, #80	; 0x50
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800dc14:	f000 fea4 	bl	800e960 <rmw_validate_node_name>
 800dc18:	4681      	mov	r9, r0
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f040 80d3 	bne.w	800ddc6 <rcl_node_init+0x226>
 800dc20:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dc22:	2800      	cmp	r0, #0
 800dc24:	f040 8105 	bne.w	800de32 <rcl_node_init+0x292>
 800dc28:	4628      	mov	r0, r5
 800dc2a:	f7f2 fafb 	bl	8000224 <strlen>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	f040 80d0 	bne.w	800ddd4 <rcl_node_init+0x234>
 800dc34:	4d8e      	ldr	r5, [pc, #568]	; (800de70 <rcl_node_init+0x2d0>)
 800dc36:	a914      	add	r1, sp, #80	; 0x50
 800dc38:	2200      	movs	r2, #0
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f000 fe72 	bl	800e924 <rmw_validate_namespace>
 800dc40:	4681      	mov	r9, r0
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f040 80bf 	bne.w	800ddc6 <rcl_node_init+0x226>
 800dc48:	4682      	mov	sl, r0
 800dc4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f040 80f5 	bne.w	800de3c <rcl_node_init+0x29c>
 800dc52:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800dc56:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dc5a:	9307      	str	r3, [sp, #28]
 800dc5c:	2030      	movs	r0, #48	; 0x30
 800dc5e:	4790      	blx	r2
 800dc60:	4681      	mov	r9, r0
 800dc62:	6060      	str	r0, [r4, #4]
 800dc64:	2800      	cmp	r0, #0
 800dc66:	f000 80de 	beq.w	800de26 <rcl_node_init+0x286>
 800dc6a:	9b07      	ldr	r3, [sp, #28]
 800dc6c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800dc70:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800dc74:	a80a      	add	r0, sp, #40	; 0x28
 800dc76:	f000 f92b 	bl	800ded0 <rcl_node_get_default_options>
 800dc7a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800dc7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dc82:	46cc      	mov	ip, r9
 800dc84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc88:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800dc8c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800dc90:	6861      	ldr	r1, [r4, #4]
 800dc92:	6027      	str	r7, [r4, #0]
 800dc94:	4640      	mov	r0, r8
 800dc96:	f000 f937 	bl	800df08 <rcl_node_options_copy>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d167      	bne.n	800dd6e <rcl_node_init+0x1ce>
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7f2 fac0 	bl	8000224 <strlen>
 800dca4:	4428      	add	r0, r5
 800dca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcaa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800dcae:	2b2f      	cmp	r3, #47	; 0x2f
 800dcb0:	bf08      	it	eq
 800dcb2:	4970      	ldreq	r1, [pc, #448]	; (800de74 <rcl_node_init+0x2d4>)
 800dcb4:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dcb8:	bf18      	it	ne
 800dcba:	496f      	ldrne	r1, [pc, #444]	; (800de78 <rcl_node_init+0x2d8>)
 800dcbc:	9604      	str	r6, [sp, #16]
 800dcbe:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800dcc2:	e9cd 3200 	strd	r3, r2, [sp]
 800dcc6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800dcca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dcce:	f000 fc57 	bl	800e580 <rcutils_format_string_limit>
 800dcd2:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800dcd6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dcda:	f8d9 3000 	ldr.w	r3, [r9]
 800dcde:	9313      	str	r3, [sp, #76]	; 0x4c
 800dce0:	1c59      	adds	r1, r3, #1
 800dce2:	f000 80b7 	beq.w	800de54 <rcl_node_init+0x2b4>
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	f8c9 301c 	str.w	r3, [r9, #28]
 800dcec:	6952      	ldr	r2, [r2, #20]
 800dcee:	6821      	ldr	r1, [r4, #0]
 800dcf0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800dcf4:	6808      	ldr	r0, [r1, #0]
 800dcf6:	f1a2 0201 	sub.w	r2, r2, #1
 800dcfa:	fab2 f282 	clz	r2, r2
 800dcfe:	0952      	lsrs	r2, r2, #5
 800dd00:	9200      	str	r2, [sp, #0]
 800dd02:	4631      	mov	r1, r6
 800dd04:	3028      	adds	r0, #40	; 0x28
 800dd06:	462a      	mov	r2, r5
 800dd08:	f001 fa26 	bl	800f158 <rmw_create_node>
 800dd0c:	6863      	ldr	r3, [r4, #4]
 800dd0e:	f8c9 0020 	str.w	r0, [r9, #32]
 800dd12:	6a18      	ldr	r0, [r3, #32]
 800dd14:	b368      	cbz	r0, 800dd72 <rcl_node_init+0x1d2>
 800dd16:	f001 fab3 	bl	800f280 <rmw_node_get_graph_guard_condition>
 800dd1a:	4681      	mov	r9, r0
 800dd1c:	b338      	cbz	r0, 800dd6e <rcl_node_init+0x1ce>
 800dd1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd22:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dd26:	6866      	ldr	r6, [r4, #4]
 800dd28:	2008      	movs	r0, #8
 800dd2a:	4798      	blx	r3
 800dd2c:	6863      	ldr	r3, [r4, #4]
 800dd2e:	6270      	str	r0, [r6, #36]	; 0x24
 800dd30:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800dd32:	b1f6      	cbz	r6, 800dd72 <rcl_node_init+0x1d2>
 800dd34:	a808      	add	r0, sp, #32
 800dd36:	f003 f911 	bl	8010f5c <rcl_get_zero_initialized_guard_condition>
 800dd3a:	a808      	add	r0, sp, #32
 800dd3c:	c803      	ldmia	r0, {r0, r1}
 800dd3e:	e886 0003 	stmia.w	r6, {r0, r1}
 800dd42:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800dd46:	ae15      	add	r6, sp, #84	; 0x54
 800dd48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dd4a:	f8db 3000 	ldr.w	r3, [fp]
 800dd4e:	6033      	str	r3, [r6, #0]
 800dd50:	ab1a      	add	r3, sp, #104	; 0x68
 800dd52:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800dd56:	6866      	ldr	r6, [r4, #4]
 800dd58:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800dd5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dd5e:	4649      	mov	r1, r9
 800dd60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd62:	4630      	mov	r0, r6
 800dd64:	463a      	mov	r2, r7
 800dd66:	f003 f903 	bl	8010f70 <rcl_guard_condition_init_from_rmw>
 800dd6a:	4681      	mov	r9, r0
 800dd6c:	b328      	cbz	r0, 800ddba <rcl_node_init+0x21a>
 800dd6e:	6863      	ldr	r3, [r4, #4]
 800dd70:	b1f3      	cbz	r3, 800ddb0 <rcl_node_init+0x210>
 800dd72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dd74:	b128      	cbz	r0, 800dd82 <rcl_node_init+0x1e2>
 800dd76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd7a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dd7e:	4798      	blx	r3
 800dd80:	6863      	ldr	r3, [r4, #4]
 800dd82:	6a18      	ldr	r0, [r3, #32]
 800dd84:	b110      	cbz	r0, 800dd8c <rcl_node_init+0x1ec>
 800dd86:	f001 f9ff 	bl	800f188 <rmw_destroy_node>
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd8e:	b148      	cbz	r0, 800dda4 <rcl_node_init+0x204>
 800dd90:	f003 f946 	bl	8011020 <rcl_guard_condition_fini>
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd9a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800dd9c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dda0:	4798      	blx	r3
 800dda2:	6863      	ldr	r3, [r4, #4]
 800dda4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800dda8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ddac:	4618      	mov	r0, r3
 800ddae:	4790      	blx	r2
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e9c4 3300 	strd	r3, r3, [r4]
 800ddb6:	f04f 0901 	mov.w	r9, #1
 800ddba:	f1ba 0f00 	cmp.w	sl, #0
 800ddbe:	d125      	bne.n	800de0c <rcl_node_init+0x26c>
 800ddc0:	e001      	b.n	800ddc6 <rcl_node_init+0x226>
 800ddc2:	f04f 090b 	mov.w	r9, #11
 800ddc6:	4648      	mov	r0, r9
 800ddc8:	b01b      	add	sp, #108	; 0x6c
 800ddca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddce:	f04f 0965 	mov.w	r9, #101	; 0x65
 800ddd2:	e7f8      	b.n	800ddc6 <rcl_node_init+0x226>
 800ddd4:	782b      	ldrb	r3, [r5, #0]
 800ddd6:	2b2f      	cmp	r3, #47	; 0x2f
 800ddd8:	f43f af2d 	beq.w	800dc36 <rcl_node_init+0x96>
 800dddc:	4927      	ldr	r1, [pc, #156]	; (800de7c <rcl_node_init+0x2dc>)
 800ddde:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dde2:	9300      	str	r3, [sp, #0]
 800dde4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dde8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ddec:	9503      	str	r5, [sp, #12]
 800ddee:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ddf2:	f000 fbc5 	bl	800e580 <rcutils_format_string_limit>
 800ddf6:	4605      	mov	r5, r0
 800ddf8:	b348      	cbz	r0, 800de4e <rcl_node_init+0x2ae>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	a914      	add	r1, sp, #80	; 0x50
 800ddfe:	9214      	str	r2, [sp, #80]	; 0x50
 800de00:	f000 fd90 	bl	800e924 <rmw_validate_namespace>
 800de04:	4681      	mov	r9, r0
 800de06:	2800      	cmp	r0, #0
 800de08:	f43f af1f 	beq.w	800dc4a <rcl_node_init+0xaa>
 800de0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de10:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800de14:	4628      	mov	r0, r5
 800de16:	4798      	blx	r3
 800de18:	e7d5      	b.n	800ddc6 <rcl_node_init+0x226>
 800de1a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800de1e:	4648      	mov	r0, r9
 800de20:	b01b      	add	sp, #108	; 0x6c
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	f04f 090a 	mov.w	r9, #10
 800de2a:	f1ba 0f00 	cmp.w	sl, #0
 800de2e:	d1ed      	bne.n	800de0c <rcl_node_init+0x26c>
 800de30:	e7c9      	b.n	800ddc6 <rcl_node_init+0x226>
 800de32:	f000 fde7 	bl	800ea04 <rmw_node_name_validation_result_string>
 800de36:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800de3a:	e7c4      	b.n	800ddc6 <rcl_node_init+0x226>
 800de3c:	4618      	mov	r0, r3
 800de3e:	f000 fd83 	bl	800e948 <rmw_namespace_validation_result_string>
 800de42:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800de46:	f1ba 0f00 	cmp.w	sl, #0
 800de4a:	d1df      	bne.n	800de0c <rcl_node_init+0x26c>
 800de4c:	e7bb      	b.n	800ddc6 <rcl_node_init+0x226>
 800de4e:	f04f 090a 	mov.w	r9, #10
 800de52:	e7b8      	b.n	800ddc6 <rcl_node_init+0x226>
 800de54:	a813      	add	r0, sp, #76	; 0x4c
 800de56:	f003 f84d 	bl	8010ef4 <rcl_get_default_domain_id>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d187      	bne.n	800dd6e <rcl_node_init+0x1ce>
 800de5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de60:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	bf04      	itt	eq
 800de68:	9013      	streq	r0, [sp, #76]	; 0x4c
 800de6a:	4603      	moveq	r3, r0
 800de6c:	e73b      	b.n	800dce6 <rcl_node_init+0x146>
 800de6e:	bf00      	nop
 800de70:	08012d4c 	.word	0x08012d4c
 800de74:	08012c98 	.word	0x08012c98
 800de78:	08012d10 	.word	0x08012d10
 800de7c:	08012d50 	.word	0x08012d50

0800de80 <rcl_node_is_valid>:
 800de80:	b130      	cbz	r0, 800de90 <rcl_node_is_valid+0x10>
 800de82:	6843      	ldr	r3, [r0, #4]
 800de84:	b123      	cbz	r3, 800de90 <rcl_node_is_valid+0x10>
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	b113      	cbz	r3, 800de90 <rcl_node_is_valid+0x10>
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	f7ff ba5e 	b.w	800d34c <rcl_context_is_valid>
 800de90:	2000      	movs	r0, #0
 800de92:	4770      	bx	lr

0800de94 <rcl_node_get_name>:
 800de94:	b120      	cbz	r0, 800dea0 <rcl_node_get_name+0xc>
 800de96:	6840      	ldr	r0, [r0, #4]
 800de98:	b110      	cbz	r0, 800dea0 <rcl_node_get_name+0xc>
 800de9a:	6a00      	ldr	r0, [r0, #32]
 800de9c:	b100      	cbz	r0, 800dea0 <rcl_node_get_name+0xc>
 800de9e:	6880      	ldr	r0, [r0, #8]
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop

0800dea4 <rcl_node_get_namespace>:
 800dea4:	b120      	cbz	r0, 800deb0 <rcl_node_get_namespace+0xc>
 800dea6:	6840      	ldr	r0, [r0, #4]
 800dea8:	b110      	cbz	r0, 800deb0 <rcl_node_get_namespace+0xc>
 800deaa:	6a00      	ldr	r0, [r0, #32]
 800deac:	b100      	cbz	r0, 800deb0 <rcl_node_get_namespace+0xc>
 800deae:	68c0      	ldr	r0, [r0, #12]
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop

0800deb4 <rcl_node_get_options>:
 800deb4:	b128      	cbz	r0, 800dec2 <rcl_node_get_options+0xe>
 800deb6:	6840      	ldr	r0, [r0, #4]
 800deb8:	b118      	cbz	r0, 800dec2 <rcl_node_get_options+0xe>
 800deba:	6a03      	ldr	r3, [r0, #32]
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf08      	it	eq
 800dec0:	2000      	moveq	r0, #0
 800dec2:	4770      	bx	lr

0800dec4 <rcl_node_get_rmw_handle>:
 800dec4:	b110      	cbz	r0, 800decc <rcl_node_get_rmw_handle+0x8>
 800dec6:	6840      	ldr	r0, [r0, #4]
 800dec8:	b100      	cbz	r0, 800decc <rcl_node_get_rmw_handle+0x8>
 800deca:	6a00      	ldr	r0, [r0, #32]
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop

0800ded0 <rcl_node_get_default_options>:
 800ded0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded2:	b087      	sub	sp, #28
 800ded4:	4607      	mov	r7, r0
 800ded6:	466d      	mov	r5, sp
 800ded8:	4668      	mov	r0, sp
 800deda:	f7fa f8b3 	bl	8008044 <rcutils_get_default_allocator>
 800dede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dee0:	4c08      	ldr	r4, [pc, #32]	; (800df04 <rcl_node_get_default_options+0x34>)
 800dee2:	f8d5 c000 	ldr.w	ip, [r5]
 800dee6:	1d26      	adds	r6, r4, #4
 800dee8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800deea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800deec:	463d      	mov	r5, r7
 800deee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800def0:	f8c6 c000 	str.w	ip, [r6]
 800def4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800def8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800defc:	4638      	mov	r0, r7
 800defe:	b007      	add	sp, #28
 800df00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df02:	bf00      	nop
 800df04:	200000a0 	.word	0x200000a0

0800df08 <rcl_node_options_copy>:
 800df08:	b1c8      	cbz	r0, 800df3e <rcl_node_options_copy+0x36>
 800df0a:	b4f0      	push	{r4, r5, r6, r7}
 800df0c:	460f      	mov	r7, r1
 800df0e:	b199      	cbz	r1, 800df38 <rcl_node_options_copy+0x30>
 800df10:	4288      	cmp	r0, r1
 800df12:	4606      	mov	r6, r0
 800df14:	d010      	beq.n	800df38 <rcl_node_options_copy+0x30>
 800df16:	4605      	mov	r5, r0
 800df18:	460c      	mov	r4, r1
 800df1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800df1e:	f844 3b04 	str.w	r3, [r4], #4
 800df22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df26:	7e32      	ldrb	r2, [r6, #24]
 800df28:	6829      	ldr	r1, [r5, #0]
 800df2a:	7e73      	ldrb	r3, [r6, #25]
 800df2c:	6021      	str	r1, [r4, #0]
 800df2e:	2000      	movs	r0, #0
 800df30:	763a      	strb	r2, [r7, #24]
 800df32:	767b      	strb	r3, [r7, #25]
 800df34:	bcf0      	pop	{r4, r5, r6, r7}
 800df36:	4770      	bx	lr
 800df38:	200b      	movs	r0, #11
 800df3a:	bcf0      	pop	{r4, r5, r6, r7}
 800df3c:	4770      	bx	lr
 800df3e:	200b      	movs	r0, #11
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop

0800df44 <exact_match_lookup>:
 800df44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df46:	f102 0708 	add.w	r7, r2, #8
 800df4a:	460b      	mov	r3, r1
 800df4c:	4614      	mov	r4, r2
 800df4e:	4606      	mov	r6, r0
 800df50:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800df54:	b085      	sub	sp, #20
 800df56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800df5a:	4618      	mov	r0, r3
 800df5c:	4918      	ldr	r1, [pc, #96]	; (800dfc0 <exact_match_lookup+0x7c>)
 800df5e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800df62:	f000 faff 	bl	800e564 <rcutils_join_path>
 800df66:	7833      	ldrb	r3, [r6, #0]
 800df68:	2b2f      	cmp	r3, #47	; 0x2f
 800df6a:	4605      	mov	r5, r0
 800df6c:	d021      	beq.n	800dfb2 <exact_match_lookup+0x6e>
 800df6e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800df72:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df76:	1c70      	adds	r0, r6, #1
 800df78:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800df7c:	f000 faf8 	bl	800e570 <rcutils_to_native_path>
 800df80:	4606      	mov	r6, r0
 800df82:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800df86:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800df8a:	4631      	mov	r1, r6
 800df8c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800df90:	4628      	mov	r0, r5
 800df92:	f000 fae7 	bl	800e564 <rcutils_join_path>
 800df96:	6862      	ldr	r2, [r4, #4]
 800df98:	6921      	ldr	r1, [r4, #16]
 800df9a:	4603      	mov	r3, r0
 800df9c:	4630      	mov	r0, r6
 800df9e:	461e      	mov	r6, r3
 800dfa0:	4790      	blx	r2
 800dfa2:	4628      	mov	r0, r5
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	6921      	ldr	r1, [r4, #16]
 800dfa8:	4798      	blx	r3
 800dfaa:	4635      	mov	r5, r6
 800dfac:	4628      	mov	r0, r5
 800dfae:	b005      	add	sp, #20
 800dfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb2:	7873      	ldrb	r3, [r6, #1]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1da      	bne.n	800df6e <exact_match_lookup+0x2a>
 800dfb8:	4628      	mov	r0, r5
 800dfba:	b005      	add	sp, #20
 800dfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08012d98 	.word	0x08012d98

0800dfc4 <rcl_get_secure_root>:
 800dfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfc8:	b085      	sub	sp, #20
 800dfca:	b168      	cbz	r0, 800dfe8 <rcl_get_secure_root+0x24>
 800dfcc:	4607      	mov	r7, r0
 800dfce:	4608      	mov	r0, r1
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	f7fa f845 	bl	8008060 <rcutils_allocator_is_valid>
 800dfd6:	b138      	cbz	r0, 800dfe8 <rcl_get_secure_root+0x24>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	482d      	ldr	r0, [pc, #180]	; (800e090 <rcl_get_secure_root+0xcc>)
 800dfdc:	9303      	str	r3, [sp, #12]
 800dfde:	a903      	add	r1, sp, #12
 800dfe0:	f000 fb08 	bl	800e5f4 <rcutils_get_env>
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	b120      	cbz	r0, 800dff2 <rcl_get_secure_root+0x2e>
 800dfe8:	2500      	movs	r5, #0
 800dfea:	4628      	mov	r0, r5
 800dfec:	b005      	add	sp, #20
 800dfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	781a      	ldrb	r2, [r3, #0]
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	d0f6      	beq.n	800dfe8 <rcl_get_secure_root+0x24>
 800dffa:	f104 090c 	add.w	r9, r4, #12
 800dffe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e002:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e006:	4618      	mov	r0, r3
 800e008:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e00c:	f000 fbe2 	bl	800e7d4 <rcutils_strdup>
 800e010:	4680      	mov	r8, r0
 800e012:	2800      	cmp	r0, #0
 800e014:	d0e8      	beq.n	800dfe8 <rcl_get_secure_root+0x24>
 800e016:	481f      	ldr	r0, [pc, #124]	; (800e094 <rcl_get_secure_root+0xd0>)
 800e018:	9503      	str	r5, [sp, #12]
 800e01a:	a903      	add	r1, sp, #12
 800e01c:	f000 faea 	bl	800e5f4 <rcutils_get_env>
 800e020:	b160      	cbz	r0, 800e03c <rcl_get_secure_root+0x78>
 800e022:	2600      	movs	r6, #0
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	6921      	ldr	r1, [r4, #16]
 800e028:	4630      	mov	r0, r6
 800e02a:	4798      	blx	r3
 800e02c:	4640      	mov	r0, r8
 800e02e:	6863      	ldr	r3, [r4, #4]
 800e030:	6921      	ldr	r1, [r4, #16]
 800e032:	4798      	blx	r3
 800e034:	4628      	mov	r0, r5
 800e036:	b005      	add	sp, #20
 800e038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03c:	9b03      	ldr	r3, [sp, #12]
 800e03e:	781e      	ldrb	r6, [r3, #0]
 800e040:	b1f6      	cbz	r6, 800e080 <rcl_get_secure_root+0xbc>
 800e042:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e046:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e04a:	4618      	mov	r0, r3
 800e04c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e050:	f000 fbc0 	bl	800e7d4 <rcutils_strdup>
 800e054:	4606      	mov	r6, r0
 800e056:	2800      	cmp	r0, #0
 800e058:	d0e3      	beq.n	800e022 <rcl_get_secure_root+0x5e>
 800e05a:	4622      	mov	r2, r4
 800e05c:	4641      	mov	r1, r8
 800e05e:	f7ff ff71 	bl	800df44 <exact_match_lookup>
 800e062:	4605      	mov	r5, r0
 800e064:	2d00      	cmp	r5, #0
 800e066:	d0dd      	beq.n	800e024 <rcl_get_secure_root+0x60>
 800e068:	4628      	mov	r0, r5
 800e06a:	f000 fa79 	bl	800e560 <rcutils_is_directory>
 800e06e:	4607      	mov	r7, r0
 800e070:	2800      	cmp	r0, #0
 800e072:	d1d7      	bne.n	800e024 <rcl_get_secure_root+0x60>
 800e074:	4628      	mov	r0, r5
 800e076:	6863      	ldr	r3, [r4, #4]
 800e078:	6921      	ldr	r1, [r4, #16]
 800e07a:	4798      	blx	r3
 800e07c:	463d      	mov	r5, r7
 800e07e:	e7d1      	b.n	800e024 <rcl_get_secure_root+0x60>
 800e080:	4638      	mov	r0, r7
 800e082:	4622      	mov	r2, r4
 800e084:	4641      	mov	r1, r8
 800e086:	f7ff ff5d 	bl	800df44 <exact_match_lookup>
 800e08a:	4605      	mov	r5, r0
 800e08c:	e7ea      	b.n	800e064 <rcl_get_secure_root+0xa0>
 800e08e:	bf00      	nop
 800e090:	08012da4 	.word	0x08012da4
 800e094:	08012dbc 	.word	0x08012dbc

0800e098 <rcl_get_security_options_from_environment>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	4607      	mov	r7, r0
 800e0a0:	4688      	mov	r8, r1
 800e0a2:	2400      	movs	r4, #0
 800e0a4:	481d      	ldr	r0, [pc, #116]	; (800e11c <rcl_get_security_options_from_environment+0x84>)
 800e0a6:	9401      	str	r4, [sp, #4]
 800e0a8:	a901      	add	r1, sp, #4
 800e0aa:	4616      	mov	r6, r2
 800e0ac:	f000 faa2 	bl	800e5f4 <rcutils_get_env>
 800e0b0:	b120      	cbz	r0, 800e0bc <rcl_get_security_options_from_environment+0x24>
 800e0b2:	2501      	movs	r5, #1
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	b002      	add	sp, #8
 800e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0bc:	4918      	ldr	r1, [pc, #96]	; (800e120 <rcl_get_security_options_from_environment+0x88>)
 800e0be:	4604      	mov	r4, r0
 800e0c0:	9801      	ldr	r0, [sp, #4]
 800e0c2:	f7f2 f8a5 	bl	8000210 <strcmp>
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	b9c8      	cbnz	r0, 800e0fe <rcl_get_security_options_from_environment+0x66>
 800e0ca:	9001      	str	r0, [sp, #4]
 800e0cc:	b1ee      	cbz	r6, 800e10a <rcl_get_security_options_from_environment+0x72>
 800e0ce:	4815      	ldr	r0, [pc, #84]	; (800e124 <rcl_get_security_options_from_environment+0x8c>)
 800e0d0:	a901      	add	r1, sp, #4
 800e0d2:	f000 fa8f 	bl	800e5f4 <rcutils_get_env>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d1eb      	bne.n	800e0b2 <rcl_get_security_options_from_environment+0x1a>
 800e0da:	4913      	ldr	r1, [pc, #76]	; (800e128 <rcl_get_security_options_from_environment+0x90>)
 800e0dc:	9801      	ldr	r0, [sp, #4]
 800e0de:	f7f2 f897 	bl	8000210 <strcmp>
 800e0e2:	fab0 f080 	clz	r0, r0
 800e0e6:	0940      	lsrs	r0, r0, #5
 800e0e8:	7030      	strb	r0, [r6, #0]
 800e0ea:	4641      	mov	r1, r8
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f7ff ff69 	bl	800dfc4 <rcl_get_secure_root>
 800e0f2:	b160      	cbz	r0, 800e10e <rcl_get_security_options_from_environment+0x76>
 800e0f4:	6070      	str	r0, [r6, #4]
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	b002      	add	sp, #8
 800e0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fe:	4625      	mov	r5, r4
 800e100:	4628      	mov	r0, r5
 800e102:	7034      	strb	r4, [r6, #0]
 800e104:	b002      	add	sp, #8
 800e106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e10a:	250b      	movs	r5, #11
 800e10c:	e7d2      	b.n	800e0b4 <rcl_get_security_options_from_environment+0x1c>
 800e10e:	7835      	ldrb	r5, [r6, #0]
 800e110:	f1a5 0501 	sub.w	r5, r5, #1
 800e114:	fab5 f585 	clz	r5, r5
 800e118:	096d      	lsrs	r5, r5, #5
 800e11a:	e7cb      	b.n	800e0b4 <rcl_get_security_options_from_environment+0x1c>
 800e11c:	08012d5c 	.word	0x08012d5c
 800e120:	08012d70 	.word	0x08012d70
 800e124:	08012d78 	.word	0x08012d78
 800e128:	08012d90 	.word	0x08012d90

0800e12c <rcl_get_system_time>:
 800e12c:	4608      	mov	r0, r1
 800e12e:	f7fa b903 	b.w	8008338 <rcutils_system_time_now>
 800e132:	bf00      	nop

0800e134 <rcl_get_steady_time>:
 800e134:	4608      	mov	r0, r1
 800e136:	f7fa b927 	b.w	8008388 <rcutils_steady_time_now>
 800e13a:	bf00      	nop

0800e13c <rcl_get_ros_time>:
 800e13c:	7a03      	ldrb	r3, [r0, #8]
 800e13e:	b510      	push	{r4, lr}
 800e140:	460c      	mov	r4, r1
 800e142:	b133      	cbz	r3, 800e152 <rcl_get_ros_time+0x16>
 800e144:	2105      	movs	r1, #5
 800e146:	f000 f9d7 	bl	800e4f8 <__atomic_load_8>
 800e14a:	e9c4 0100 	strd	r0, r1, [r4]
 800e14e:	2000      	movs	r0, #0
 800e150:	bd10      	pop	{r4, pc}
 800e152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e156:	4608      	mov	r0, r1
 800e158:	f7fa b8ee 	b.w	8008338 <rcutils_system_time_now>

0800e15c <rcl_clock_init>:
 800e15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e160:	4606      	mov	r6, r0
 800e162:	4610      	mov	r0, r2
 800e164:	4614      	mov	r4, r2
 800e166:	460d      	mov	r5, r1
 800e168:	f7f9 ff7a 	bl	8008060 <rcutils_allocator_is_valid>
 800e16c:	b128      	cbz	r0, 800e17a <rcl_clock_init+0x1e>
 800e16e:	2e03      	cmp	r6, #3
 800e170:	d803      	bhi.n	800e17a <rcl_clock_init+0x1e>
 800e172:	e8df f006 	tbb	[pc, r6]
 800e176:	2c1b      	.short	0x2c1b
 800e178:	0554      	.short	0x0554
 800e17a:	200b      	movs	r0, #11
 800e17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e180:	2d00      	cmp	r5, #0
 800e182:	d0fa      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e184:	2c00      	cmp	r4, #0
 800e186:	d0f8      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e188:	2600      	movs	r6, #0
 800e18a:	702e      	strb	r6, [r5, #0]
 800e18c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e18e:	f105 0714 	add.w	r7, r5, #20
 800e192:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e196:	612e      	str	r6, [r5, #16]
 800e198:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	603b      	str	r3, [r7, #0]
 800e19e:	2303      	movs	r3, #3
 800e1a0:	4a2b      	ldr	r2, [pc, #172]	; (800e250 <rcl_clock_init+0xf4>)
 800e1a2:	702b      	strb	r3, [r5, #0]
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	60ea      	str	r2, [r5, #12]
 800e1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ac:	2d00      	cmp	r5, #0
 800e1ae:	d0e4      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e1b0:	2600      	movs	r6, #0
 800e1b2:	702e      	strb	r6, [r5, #0]
 800e1b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1b6:	f105 0714 	add.w	r7, r5, #20
 800e1ba:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e1be:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e1c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ce:	2d00      	cmp	r5, #0
 800e1d0:	d0d3      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	d0d1      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e1d6:	2600      	movs	r6, #0
 800e1d8:	702e      	strb	r6, [r5, #0]
 800e1da:	46a4      	mov	ip, r4
 800e1dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1e0:	f105 0714 	add.w	r7, r5, #20
 800e1e4:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e1e8:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800e1ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e1ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	6921      	ldr	r1, [r4, #16]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	2010      	movs	r0, #16
 800e1fa:	4798      	blx	r3
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	6128      	str	r0, [r5, #16]
 800e200:	b318      	cbz	r0, 800e24a <rcl_clock_init+0xee>
 800e202:	f04f 0800 	mov.w	r8, #0
 800e206:	f04f 0900 	mov.w	r9, #0
 800e20a:	7206      	strb	r6, [r0, #8]
 800e20c:	e9c3 8900 	strd	r8, r9, [r3]
 800e210:	2301      	movs	r3, #1
 800e212:	4a10      	ldr	r2, [pc, #64]	; (800e254 <rcl_clock_init+0xf8>)
 800e214:	702b      	strb	r3, [r5, #0]
 800e216:	4630      	mov	r0, r6
 800e218:	60ea      	str	r2, [r5, #12]
 800e21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e21e:	2d00      	cmp	r5, #0
 800e220:	d0ab      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e222:	2c00      	cmp	r4, #0
 800e224:	d0a9      	beq.n	800e17a <rcl_clock_init+0x1e>
 800e226:	2600      	movs	r6, #0
 800e228:	702e      	strb	r6, [r5, #0]
 800e22a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e22c:	f105 0714 	add.w	r7, r5, #20
 800e230:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800e234:	612e      	str	r6, [r5, #16]
 800e236:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	2302      	movs	r3, #2
 800e23e:	4a06      	ldr	r2, [pc, #24]	; (800e258 <rcl_clock_init+0xfc>)
 800e240:	702b      	strb	r3, [r5, #0]
 800e242:	4630      	mov	r0, r6
 800e244:	60ea      	str	r2, [r5, #12]
 800e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24a:	200a      	movs	r0, #10
 800e24c:	e796      	b.n	800e17c <rcl_clock_init+0x20>
 800e24e:	bf00      	nop
 800e250:	0800e135 	.word	0x0800e135
 800e254:	0800e13d 	.word	0x0800e13d
 800e258:	0800e12d 	.word	0x0800e12d

0800e25c <rcl_validate_enclave_name_with_size>:
 800e25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e25e:	b0c3      	sub	sp, #268	; 0x10c
 800e260:	b1d0      	cbz	r0, 800e298 <rcl_validate_enclave_name_with_size+0x3c>
 800e262:	4615      	mov	r5, r2
 800e264:	b1c2      	cbz	r2, 800e298 <rcl_validate_enclave_name_with_size+0x3c>
 800e266:	461f      	mov	r7, r3
 800e268:	466a      	mov	r2, sp
 800e26a:	ab01      	add	r3, sp, #4
 800e26c:	460e      	mov	r6, r1
 800e26e:	f000 fb0b 	bl	800e888 <rmw_validate_namespace_with_size>
 800e272:	4604      	mov	r4, r0
 800e274:	b9e0      	cbnz	r0, 800e2b0 <rcl_validate_enclave_name_with_size+0x54>
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	b923      	cbnz	r3, 800e284 <rcl_validate_enclave_name_with_size+0x28>
 800e27a:	2300      	movs	r3, #0
 800e27c:	602b      	str	r3, [r5, #0]
 800e27e:	4620      	mov	r0, r4
 800e280:	b043      	add	sp, #268	; 0x10c
 800e282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e284:	2b07      	cmp	r3, #7
 800e286:	d00b      	beq.n	800e2a0 <rcl_validate_enclave_name_with_size+0x44>
 800e288:	1e5a      	subs	r2, r3, #1
 800e28a:	2a05      	cmp	r2, #5
 800e28c:	d82e      	bhi.n	800e2ec <rcl_validate_enclave_name_with_size+0x90>
 800e28e:	e8df f002 	tbb	[pc, r2]
 800e292:	211e      	.short	0x211e
 800e294:	152a2724 	.word	0x152a2724
 800e298:	240b      	movs	r4, #11
 800e29a:	4620      	mov	r0, r4
 800e29c:	b043      	add	sp, #268	; 0x10c
 800e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a0:	2eff      	cmp	r6, #255	; 0xff
 800e2a2:	d9ea      	bls.n	800e27a <rcl_validate_enclave_name_with_size+0x1e>
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	2f00      	cmp	r7, #0
 800e2a8:	d0e9      	beq.n	800e27e <rcl_validate_enclave_name_with_size+0x22>
 800e2aa:	23fe      	movs	r3, #254	; 0xfe
 800e2ac:	603b      	str	r3, [r7, #0]
 800e2ae:	e7e6      	b.n	800e27e <rcl_validate_enclave_name_with_size+0x22>
 800e2b0:	f7ff f82e 	bl	800d310 <rcl_convert_rmw_ret_to_rcl_ret>
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	b043      	add	sp, #268	; 0x10c
 800e2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2bc:	2306      	movs	r3, #6
 800e2be:	602b      	str	r3, [r5, #0]
 800e2c0:	2f00      	cmp	r7, #0
 800e2c2:	d0dc      	beq.n	800e27e <rcl_validate_enclave_name_with_size+0x22>
 800e2c4:	9b01      	ldr	r3, [sp, #4]
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	b043      	add	sp, #268	; 0x10c
 800e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	602b      	str	r3, [r5, #0]
 800e2d2:	e7f5      	b.n	800e2c0 <rcl_validate_enclave_name_with_size+0x64>
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	e7f2      	b.n	800e2c0 <rcl_validate_enclave_name_with_size+0x64>
 800e2da:	2303      	movs	r3, #3
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	e7ef      	b.n	800e2c0 <rcl_validate_enclave_name_with_size+0x64>
 800e2e0:	2304      	movs	r3, #4
 800e2e2:	602b      	str	r3, [r5, #0]
 800e2e4:	e7ec      	b.n	800e2c0 <rcl_validate_enclave_name_with_size+0x64>
 800e2e6:	2305      	movs	r3, #5
 800e2e8:	602b      	str	r3, [r5, #0]
 800e2ea:	e7e9      	b.n	800e2c0 <rcl_validate_enclave_name_with_size+0x64>
 800e2ec:	4a03      	ldr	r2, [pc, #12]	; (800e2fc <rcl_validate_enclave_name_with_size+0xa0>)
 800e2ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e2f2:	a802      	add	r0, sp, #8
 800e2f4:	f000 fa42 	bl	800e77c <rcutils_snprintf>
 800e2f8:	2401      	movs	r4, #1
 800e2fa:	e7c0      	b.n	800e27e <rcl_validate_enclave_name_with_size+0x22>
 800e2fc:	08012ddc 	.word	0x08012ddc

0800e300 <rcl_validate_enclave_name>:
 800e300:	b168      	cbz	r0, 800e31e <rcl_validate_enclave_name+0x1e>
 800e302:	b570      	push	{r4, r5, r6, lr}
 800e304:	460d      	mov	r5, r1
 800e306:	4616      	mov	r6, r2
 800e308:	4604      	mov	r4, r0
 800e30a:	f7f1 ff8b 	bl	8000224 <strlen>
 800e30e:	4633      	mov	r3, r6
 800e310:	4601      	mov	r1, r0
 800e312:	462a      	mov	r2, r5
 800e314:	4620      	mov	r0, r4
 800e316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e31a:	f7ff bf9f 	b.w	800e25c <rcl_validate_enclave_name_with_size>
 800e31e:	200b      	movs	r0, #11
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <rcl_validate_topic_name>:
 800e324:	2800      	cmp	r0, #0
 800e326:	f000 808b 	beq.w	800e440 <rcl_validate_topic_name+0x11c>
 800e32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32e:	460e      	mov	r6, r1
 800e330:	2900      	cmp	r1, #0
 800e332:	f000 808c 	beq.w	800e44e <rcl_validate_topic_name+0x12a>
 800e336:	4617      	mov	r7, r2
 800e338:	4605      	mov	r5, r0
 800e33a:	f7f1 ff73 	bl	8000224 <strlen>
 800e33e:	b1b0      	cbz	r0, 800e36e <rcl_validate_topic_name+0x4a>
 800e340:	f895 9000 	ldrb.w	r9, [r5]
 800e344:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800e4f4 <rcl_validate_topic_name+0x1d0>
 800e348:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800e34c:	f013 0304 	ands.w	r3, r3, #4
 800e350:	d178      	bne.n	800e444 <rcl_validate_topic_name+0x120>
 800e352:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800e356:	f815 2008 	ldrb.w	r2, [r5, r8]
 800e35a:	2a2f      	cmp	r2, #47	; 0x2f
 800e35c:	d10e      	bne.n	800e37c <rcl_validate_topic_name+0x58>
 800e35e:	2202      	movs	r2, #2
 800e360:	6032      	str	r2, [r6, #0]
 800e362:	b36f      	cbz	r7, 800e3c0 <rcl_validate_topic_name+0x9c>
 800e364:	f8c7 8000 	str.w	r8, [r7]
 800e368:	4618      	mov	r0, r3
 800e36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36e:	2301      	movs	r3, #1
 800e370:	6033      	str	r3, [r6, #0]
 800e372:	b32f      	cbz	r7, 800e3c0 <rcl_validate_topic_name+0x9c>
 800e374:	2000      	movs	r0, #0
 800e376:	6038      	str	r0, [r7, #0]
 800e378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37c:	461c      	mov	r4, r3
 800e37e:	4619      	mov	r1, r3
 800e380:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800e384:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800e388:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e38c:	f1be 0f09 	cmp.w	lr, #9
 800e390:	d946      	bls.n	800e420 <rcl_validate_topic_name+0xfc>
 800e392:	f022 0e20 	bic.w	lr, r2, #32
 800e396:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800e39a:	f1be 0f19 	cmp.w	lr, #25
 800e39e:	d93f      	bls.n	800e420 <rcl_validate_topic_name+0xfc>
 800e3a0:	2a5f      	cmp	r2, #95	; 0x5f
 800e3a2:	d014      	beq.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e3a4:	2a2f      	cmp	r2, #47	; 0x2f
 800e3a6:	d05b      	beq.n	800e460 <rcl_validate_topic_name+0x13c>
 800e3a8:	2a7e      	cmp	r2, #126	; 0x7e
 800e3aa:	d052      	beq.n	800e452 <rcl_validate_topic_name+0x12e>
 800e3ac:	2a7b      	cmp	r2, #123	; 0x7b
 800e3ae:	d00a      	beq.n	800e3c6 <rcl_validate_topic_name+0xa2>
 800e3b0:	2a7d      	cmp	r2, #125	; 0x7d
 800e3b2:	d16f      	bne.n	800e494 <rcl_validate_topic_name+0x170>
 800e3b4:	2c00      	cmp	r4, #0
 800e3b6:	d15e      	bne.n	800e476 <rcl_validate_topic_name+0x152>
 800e3b8:	2305      	movs	r3, #5
 800e3ba:	6033      	str	r3, [r6, #0]
 800e3bc:	b107      	cbz	r7, 800e3c0 <rcl_validate_topic_name+0x9c>
 800e3be:	6039      	str	r1, [r7, #0]
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c6:	2c00      	cmp	r4, #0
 800e3c8:	d14c      	bne.n	800e464 <rcl_validate_topic_name+0x140>
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	2401      	movs	r4, #1
 800e3ce:	3101      	adds	r1, #1
 800e3d0:	4288      	cmp	r0, r1
 800e3d2:	d1d7      	bne.n	800e384 <rcl_validate_topic_name+0x60>
 800e3d4:	2c00      	cmp	r4, #0
 800e3d6:	d156      	bne.n	800e486 <rcl_validate_topic_name+0x162>
 800e3d8:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800e3dc:	4620      	mov	r0, r4
 800e3de:	d061      	beq.n	800e4a4 <rcl_validate_topic_name+0x180>
 800e3e0:	f108 0e01 	add.w	lr, r8, #1
 800e3e4:	e007      	b.n	800e3f6 <rcl_validate_topic_name+0xd2>
 800e3e6:	2801      	cmp	r0, #1
 800e3e8:	d047      	beq.n	800e47a <rcl_validate_topic_name+0x156>
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4291      	cmp	r1, r2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f105 0501 	add.w	r5, r5, #1
 800e3f4:	d944      	bls.n	800e480 <rcl_validate_topic_name+0x15c>
 800e3f6:	4580      	cmp	r8, r0
 800e3f8:	f100 0301 	add.w	r3, r0, #1
 800e3fc:	d037      	beq.n	800e46e <rcl_validate_topic_name+0x14a>
 800e3fe:	782a      	ldrb	r2, [r5, #0]
 800e400:	2a2f      	cmp	r2, #47	; 0x2f
 800e402:	d1f0      	bne.n	800e3e6 <rcl_validate_topic_name+0xc2>
 800e404:	786b      	ldrb	r3, [r5, #1]
 800e406:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800e40a:	1c43      	adds	r3, r0, #1
 800e40c:	0760      	lsls	r0, r4, #29
 800e40e:	461a      	mov	r2, r3
 800e410:	d5ec      	bpl.n	800e3ec <rcl_validate_topic_name+0xc8>
 800e412:	2304      	movs	r3, #4
 800e414:	6033      	str	r3, [r6, #0]
 800e416:	2f00      	cmp	r7, #0
 800e418:	d0d2      	beq.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e41a:	603a      	str	r2, [r7, #0]
 800e41c:	2000      	movs	r0, #0
 800e41e:	e7ab      	b.n	800e378 <rcl_validate_topic_name+0x54>
 800e420:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800e424:	0752      	lsls	r2, r2, #29
 800e426:	d5d2      	bpl.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e428:	2c00      	cmp	r4, #0
 800e42a:	d0d0      	beq.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e42c:	2900      	cmp	r1, #0
 800e42e:	d0ce      	beq.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e430:	1e4a      	subs	r2, r1, #1
 800e432:	429a      	cmp	r2, r3
 800e434:	d1cb      	bne.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e436:	2309      	movs	r3, #9
 800e438:	6033      	str	r3, [r6, #0]
 800e43a:	2f00      	cmp	r7, #0
 800e43c:	d1bf      	bne.n	800e3be <rcl_validate_topic_name+0x9a>
 800e43e:	e7bf      	b.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e440:	200b      	movs	r0, #11
 800e442:	4770      	bx	lr
 800e444:	2304      	movs	r3, #4
 800e446:	6033      	str	r3, [r6, #0]
 800e448:	2f00      	cmp	r7, #0
 800e44a:	d193      	bne.n	800e374 <rcl_validate_topic_name+0x50>
 800e44c:	e7b8      	b.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e44e:	200b      	movs	r0, #11
 800e450:	e792      	b.n	800e378 <rcl_validate_topic_name+0x54>
 800e452:	2900      	cmp	r1, #0
 800e454:	d0bb      	beq.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e456:	2306      	movs	r3, #6
 800e458:	6033      	str	r3, [r6, #0]
 800e45a:	2f00      	cmp	r7, #0
 800e45c:	d1af      	bne.n	800e3be <rcl_validate_topic_name+0x9a>
 800e45e:	e7af      	b.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e460:	2c00      	cmp	r4, #0
 800e462:	d0b4      	beq.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e464:	2308      	movs	r3, #8
 800e466:	6033      	str	r3, [r6, #0]
 800e468:	2f00      	cmp	r7, #0
 800e46a:	d1a8      	bne.n	800e3be <rcl_validate_topic_name+0x9a>
 800e46c:	e7a8      	b.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e46e:	4672      	mov	r2, lr
 800e470:	f108 0301 	add.w	r3, r8, #1
 800e474:	e7ba      	b.n	800e3ec <rcl_validate_topic_name+0xc8>
 800e476:	2400      	movs	r4, #0
 800e478:	e7a9      	b.n	800e3ce <rcl_validate_topic_name+0xaa>
 800e47a:	2202      	movs	r2, #2
 800e47c:	4613      	mov	r3, r2
 800e47e:	e7b5      	b.n	800e3ec <rcl_validate_topic_name+0xc8>
 800e480:	2000      	movs	r0, #0
 800e482:	6030      	str	r0, [r6, #0]
 800e484:	e778      	b.n	800e378 <rcl_validate_topic_name+0x54>
 800e486:	2205      	movs	r2, #5
 800e488:	6032      	str	r2, [r6, #0]
 800e48a:	2f00      	cmp	r7, #0
 800e48c:	d098      	beq.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e48e:	603b      	str	r3, [r7, #0]
 800e490:	2000      	movs	r0, #0
 800e492:	e771      	b.n	800e378 <rcl_validate_topic_name+0x54>
 800e494:	2c00      	cmp	r4, #0
 800e496:	bf14      	ite	ne
 800e498:	2308      	movne	r3, #8
 800e49a:	2303      	moveq	r3, #3
 800e49c:	6033      	str	r3, [r6, #0]
 800e49e:	2f00      	cmp	r7, #0
 800e4a0:	d18d      	bne.n	800e3be <rcl_validate_topic_name+0x9a>
 800e4a2:	e78d      	b.n	800e3c0 <rcl_validate_topic_name+0x9c>
 800e4a4:	f108 0401 	add.w	r4, r8, #1
 800e4a8:	e007      	b.n	800e4ba <rcl_validate_topic_name+0x196>
 800e4aa:	2801      	cmp	r0, #1
 800e4ac:	d019      	beq.n	800e4e2 <rcl_validate_topic_name+0x1be>
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	4291      	cmp	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f105 0501 	add.w	r5, r5, #1
 800e4b8:	d9e2      	bls.n	800e480 <rcl_validate_topic_name+0x15c>
 800e4ba:	4580      	cmp	r8, r0
 800e4bc:	f100 0301 	add.w	r3, r0, #1
 800e4c0:	d00b      	beq.n	800e4da <rcl_validate_topic_name+0x1b6>
 800e4c2:	782a      	ldrb	r2, [r5, #0]
 800e4c4:	2a2f      	cmp	r2, #47	; 0x2f
 800e4c6:	d1f0      	bne.n	800e4aa <rcl_validate_topic_name+0x186>
 800e4c8:	786b      	ldrb	r3, [r5, #1]
 800e4ca:	f81c e003 	ldrb.w	lr, [ip, r3]
 800e4ce:	1c43      	adds	r3, r0, #1
 800e4d0:	f01e 0f04 	tst.w	lr, #4
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	d0eb      	beq.n	800e4b0 <rcl_validate_topic_name+0x18c>
 800e4d8:	e79b      	b.n	800e412 <rcl_validate_topic_name+0xee>
 800e4da:	4622      	mov	r2, r4
 800e4dc:	f108 0301 	add.w	r3, r8, #1
 800e4e0:	e7e6      	b.n	800e4b0 <rcl_validate_topic_name+0x18c>
 800e4e2:	2307      	movs	r3, #7
 800e4e4:	6033      	str	r3, [r6, #0]
 800e4e6:	2f00      	cmp	r7, #0
 800e4e8:	f43f af6a 	beq.w	800e3c0 <rcl_validate_topic_name+0x9c>
 800e4ec:	6038      	str	r0, [r7, #0]
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	e742      	b.n	800e378 <rcl_validate_topic_name+0x54>
 800e4f2:	bf00      	nop
 800e4f4:	08013430 	.word	0x08013430

0800e4f8 <__atomic_load_8>:
 800e4f8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800e4fc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800e500:	4b14      	ldr	r3, [pc, #80]	; (800e554 <__atomic_load_8+0x5c>)
 800e502:	4a15      	ldr	r2, [pc, #84]	; (800e558 <__atomic_load_8+0x60>)
 800e504:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800e508:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800e50c:	fb03 f301 	mul.w	r3, r3, r1
 800e510:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800e514:	fba2 1203 	umull	r1, r2, r2, r3
 800e518:	0912      	lsrs	r2, r2, #4
 800e51a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e51e:	b430      	push	{r4, r5}
 800e520:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800e524:	4c0d      	ldr	r4, [pc, #52]	; (800e55c <__atomic_load_8+0x64>)
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	18e1      	adds	r1, r4, r3
 800e52a:	f04f 0501 	mov.w	r5, #1
 800e52e:	e8d1 2f4f 	ldrexb	r2, [r1]
 800e532:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800e536:	f1bc 0f00 	cmp.w	ip, #0
 800e53a:	d1f8      	bne.n	800e52e <__atomic_load_8+0x36>
 800e53c:	f3bf 8f5b 	dmb	ish
 800e540:	b2d2      	uxtb	r2, r2
 800e542:	2a00      	cmp	r2, #0
 800e544:	d1f3      	bne.n	800e52e <__atomic_load_8+0x36>
 800e546:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e54a:	f3bf 8f5b 	dmb	ish
 800e54e:	54e2      	strb	r2, [r4, r3]
 800e550:	bc30      	pop	{r4, r5}
 800e552:	4770      	bx	lr
 800e554:	27d4eb2d 	.word	0x27d4eb2d
 800e558:	b21642c9 	.word	0xb21642c9
 800e55c:	200091f4 	.word	0x200091f4

0800e560 <rcutils_is_directory>:
 800e560:	2000      	movs	r0, #0
 800e562:	4770      	bx	lr

0800e564 <rcutils_join_path>:
 800e564:	b082      	sub	sp, #8
 800e566:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e56a:	2000      	movs	r0, #0
 800e56c:	b002      	add	sp, #8
 800e56e:	4770      	bx	lr

0800e570 <rcutils_to_native_path>:
 800e570:	b084      	sub	sp, #16
 800e572:	a801      	add	r0, sp, #4
 800e574:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e578:	b004      	add	sp, #16
 800e57a:	2000      	movs	r0, #0
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop

0800e580 <rcutils_format_string_limit>:
 800e580:	b40f      	push	{r0, r1, r2, r3}
 800e582:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e584:	b083      	sub	sp, #12
 800e586:	ac08      	add	r4, sp, #32
 800e588:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800e58a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e58e:	b34e      	cbz	r6, 800e5e4 <rcutils_format_string_limit+0x64>
 800e590:	a808      	add	r0, sp, #32
 800e592:	f7f9 fd65 	bl	8008060 <rcutils_allocator_is_valid>
 800e596:	b328      	cbz	r0, 800e5e4 <rcutils_format_string_limit+0x64>
 800e598:	2100      	movs	r1, #0
 800e59a:	ab0f      	add	r3, sp, #60	; 0x3c
 800e59c:	4608      	mov	r0, r1
 800e59e:	4632      	mov	r2, r6
 800e5a0:	e9cd 3300 	strd	r3, r3, [sp]
 800e5a4:	f000 f904 	bl	800e7b0 <rcutils_vsnprintf>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	d01a      	beq.n	800e5e4 <rcutils_format_string_limit+0x64>
 800e5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5b2:	1c47      	adds	r7, r0, #1
 800e5b4:	429f      	cmp	r7, r3
 800e5b6:	bf84      	itt	hi
 800e5b8:	461f      	movhi	r7, r3
 800e5ba:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800e5be:	4638      	mov	r0, r7
 800e5c0:	9b08      	ldr	r3, [sp, #32]
 800e5c2:	4798      	blx	r3
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	b168      	cbz	r0, 800e5e4 <rcutils_format_string_limit+0x64>
 800e5c8:	9b01      	ldr	r3, [sp, #4]
 800e5ca:	4632      	mov	r2, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	f000 f8ef 	bl	800e7b0 <rcutils_vsnprintf>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	db02      	blt.n	800e5dc <rcutils_format_string_limit+0x5c>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	5563      	strb	r3, [r4, r5]
 800e5da:	e004      	b.n	800e5e6 <rcutils_format_string_limit+0x66>
 800e5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	4798      	blx	r3
 800e5e4:	2400      	movs	r4, #0
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	b003      	add	sp, #12
 800e5ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e5ee:	b004      	add	sp, #16
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop

0800e5f4 <rcutils_get_env>:
 800e5f4:	b168      	cbz	r0, 800e612 <rcutils_get_env+0x1e>
 800e5f6:	b510      	push	{r4, lr}
 800e5f8:	460c      	mov	r4, r1
 800e5fa:	b129      	cbz	r1, 800e608 <rcutils_get_env+0x14>
 800e5fc:	f002 fe7a 	bl	80112f4 <getenv>
 800e600:	b120      	cbz	r0, 800e60c <rcutils_get_env+0x18>
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	2000      	movs	r0, #0
 800e606:	bd10      	pop	{r4, pc}
 800e608:	4803      	ldr	r0, [pc, #12]	; (800e618 <rcutils_get_env+0x24>)
 800e60a:	bd10      	pop	{r4, pc}
 800e60c:	4b03      	ldr	r3, [pc, #12]	; (800e61c <rcutils_get_env+0x28>)
 800e60e:	6023      	str	r3, [r4, #0]
 800e610:	bd10      	pop	{r4, pc}
 800e612:	4803      	ldr	r0, [pc, #12]	; (800e620 <rcutils_get_env+0x2c>)
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	08012e58 	.word	0x08012e58
 800e61c:	08012f7c 	.word	0x08012f7c
 800e620:	08012e3c 	.word	0x08012e3c

0800e624 <rcutils_repl_str>:
 800e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e628:	ed2d 8b02 	vpush	{d8}
 800e62c:	b087      	sub	sp, #28
 800e62e:	4680      	mov	r8, r0
 800e630:	4608      	mov	r0, r1
 800e632:	f8cd 8000 	str.w	r8, [sp]
 800e636:	ee08 2a10 	vmov	s16, r2
 800e63a:	468a      	mov	sl, r1
 800e63c:	4699      	mov	r9, r3
 800e63e:	f7f1 fdf1 	bl	8000224 <strlen>
 800e642:	2600      	movs	r6, #0
 800e644:	4647      	mov	r7, r8
 800e646:	9001      	str	r0, [sp, #4]
 800e648:	46b3      	mov	fp, r6
 800e64a:	2510      	movs	r5, #16
 800e64c:	46b0      	mov	r8, r6
 800e64e:	e01d      	b.n	800e68c <rcutils_repl_str+0x68>
 800e650:	f10b 0b01 	add.w	fp, fp, #1
 800e654:	455e      	cmp	r6, fp
 800e656:	d211      	bcs.n	800e67c <rcutils_repl_str+0x58>
 800e658:	442e      	add	r6, r5
 800e65a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e65e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e662:	00b1      	lsls	r1, r6, #2
 800e664:	4798      	blx	r3
 800e666:	2800      	cmp	r0, #0
 800e668:	f000 8084 	beq.w	800e774 <rcutils_repl_str+0x150>
 800e66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e670:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800e674:	bf28      	it	cs
 800e676:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800e67a:	4680      	mov	r8, r0
 800e67c:	9a00      	ldr	r2, [sp, #0]
 800e67e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800e682:	1aa2      	subs	r2, r4, r2
 800e684:	f843 2c04 	str.w	r2, [r3, #-4]
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	18e7      	adds	r7, r4, r3
 800e68c:	4651      	mov	r1, sl
 800e68e:	4638      	mov	r0, r7
 800e690:	f003 fa19 	bl	8011ac6 <strstr>
 800e694:	4604      	mov	r4, r0
 800e696:	4640      	mov	r0, r8
 800e698:	2c00      	cmp	r4, #0
 800e69a:	d1d9      	bne.n	800e650 <rcutils_repl_str+0x2c>
 800e69c:	46b8      	mov	r8, r7
 800e69e:	4607      	mov	r7, r0
 800e6a0:	4640      	mov	r0, r8
 800e6a2:	f7f1 fdbf 	bl	8000224 <strlen>
 800e6a6:	9b00      	ldr	r3, [sp, #0]
 800e6a8:	eba8 0303 	sub.w	r3, r8, r3
 800e6ac:	181d      	adds	r5, r3, r0
 800e6ae:	9504      	str	r5, [sp, #16]
 800e6b0:	f1bb 0f00 	cmp.w	fp, #0
 800e6b4:	d03d      	beq.n	800e732 <rcutils_repl_str+0x10e>
 800e6b6:	ee18 0a10 	vmov	r0, s16
 800e6ba:	f7f1 fdb3 	bl	8000224 <strlen>
 800e6be:	9b01      	ldr	r3, [sp, #4]
 800e6c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e6c4:	1ac3      	subs	r3, r0, r3
 800e6c6:	fb0b 5303 	mla	r3, fp, r3, r5
 800e6ca:	9305      	str	r3, [sp, #20]
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	1c58      	adds	r0, r3, #1
 800e6d0:	f8d9 3000 	ldr.w	r3, [r9]
 800e6d4:	4798      	blx	r3
 800e6d6:	9003      	str	r0, [sp, #12]
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d04c      	beq.n	800e776 <rcutils_repl_str+0x152>
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	9900      	ldr	r1, [sp, #0]
 800e6e0:	f003 fa93 	bl	8011c0a <memcpy>
 800e6e4:	9b03      	ldr	r3, [sp, #12]
 800e6e6:	683d      	ldr	r5, [r7, #0]
 800e6e8:	ee18 8a10 	vmov	r8, s16
 800e6ec:	441d      	add	r5, r3
 800e6ee:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e6f2:	9302      	str	r3, [sp, #8]
 800e6f4:	46ba      	mov	sl, r7
 800e6f6:	4632      	mov	r2, r6
 800e6f8:	4641      	mov	r1, r8
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f003 fa85 	bl	8011c0a <memcpy>
 800e700:	9b01      	ldr	r3, [sp, #4]
 800e702:	f85a 2b04 	ldr.w	r2, [sl], #4
 800e706:	441a      	add	r2, r3
 800e708:	9b00      	ldr	r3, [sp, #0]
 800e70a:	1899      	adds	r1, r3, r2
 800e70c:	9b02      	ldr	r3, [sp, #8]
 800e70e:	4435      	add	r5, r6
 800e710:	429c      	cmp	r4, r3
 800e712:	4628      	mov	r0, r5
 800e714:	d025      	beq.n	800e762 <rcutils_repl_str+0x13e>
 800e716:	f8da 3000 	ldr.w	r3, [sl]
 800e71a:	3401      	adds	r4, #1
 800e71c:	1a9a      	subs	r2, r3, r2
 800e71e:	4415      	add	r5, r2
 800e720:	f003 fa73 	bl	8011c0a <memcpy>
 800e724:	455c      	cmp	r4, fp
 800e726:	d3e6      	bcc.n	800e6f6 <rcutils_repl_str+0xd2>
 800e728:	9a03      	ldr	r2, [sp, #12]
 800e72a:	9905      	ldr	r1, [sp, #20]
 800e72c:	2300      	movs	r3, #0
 800e72e:	5453      	strb	r3, [r2, r1]
 800e730:	e00b      	b.n	800e74a <rcutils_repl_str+0x126>
 800e732:	4628      	mov	r0, r5
 800e734:	f8d9 3000 	ldr.w	r3, [r9]
 800e738:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e73c:	3001      	adds	r0, #1
 800e73e:	4798      	blx	r3
 800e740:	9003      	str	r0, [sp, #12]
 800e742:	b110      	cbz	r0, 800e74a <rcutils_repl_str+0x126>
 800e744:	9900      	ldr	r1, [sp, #0]
 800e746:	f003 fa58 	bl	8011bfa <strcpy>
 800e74a:	4638      	mov	r0, r7
 800e74c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e750:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800e754:	4798      	blx	r3
 800e756:	9803      	ldr	r0, [sp, #12]
 800e758:	b007      	add	sp, #28
 800e75a:	ecbd 8b02 	vpop	{d8}
 800e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e762:	9b04      	ldr	r3, [sp, #16]
 800e764:	3401      	adds	r4, #1
 800e766:	1a9a      	subs	r2, r3, r2
 800e768:	4415      	add	r5, r2
 800e76a:	f003 fa4e 	bl	8011c0a <memcpy>
 800e76e:	455c      	cmp	r4, fp
 800e770:	d3c1      	bcc.n	800e6f6 <rcutils_repl_str+0xd2>
 800e772:	e7d9      	b.n	800e728 <rcutils_repl_str+0x104>
 800e774:	4647      	mov	r7, r8
 800e776:	2300      	movs	r3, #0
 800e778:	9303      	str	r3, [sp, #12]
 800e77a:	e7e6      	b.n	800e74a <rcutils_repl_str+0x126>

0800e77c <rcutils_snprintf>:
 800e77c:	b40c      	push	{r2, r3}
 800e77e:	b530      	push	{r4, r5, lr}
 800e780:	b083      	sub	sp, #12
 800e782:	ab06      	add	r3, sp, #24
 800e784:	f853 2b04 	ldr.w	r2, [r3], #4
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	b152      	cbz	r2, 800e7a2 <rcutils_snprintf+0x26>
 800e78c:	b138      	cbz	r0, 800e79e <rcutils_snprintf+0x22>
 800e78e:	b141      	cbz	r1, 800e7a2 <rcutils_snprintf+0x26>
 800e790:	f003 f94a 	bl	8011a28 <vsniprintf>
 800e794:	b003      	add	sp, #12
 800e796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e79a:	b002      	add	sp, #8
 800e79c:	4770      	bx	lr
 800e79e:	2900      	cmp	r1, #0
 800e7a0:	d0f6      	beq.n	800e790 <rcutils_snprintf+0x14>
 800e7a2:	f003 f9fd 	bl	8011ba0 <__errno>
 800e7a6:	2316      	movs	r3, #22
 800e7a8:	6003      	str	r3, [r0, #0]
 800e7aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7ae:	e7f1      	b.n	800e794 <rcutils_snprintf+0x18>

0800e7b0 <rcutils_vsnprintf>:
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	b13a      	cbz	r2, 800e7c4 <rcutils_vsnprintf+0x14>
 800e7b4:	b120      	cbz	r0, 800e7c0 <rcutils_vsnprintf+0x10>
 800e7b6:	b129      	cbz	r1, 800e7c4 <rcutils_vsnprintf+0x14>
 800e7b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7bc:	f003 b934 	b.w	8011a28 <vsniprintf>
 800e7c0:	2900      	cmp	r1, #0
 800e7c2:	d0f9      	beq.n	800e7b8 <rcutils_vsnprintf+0x8>
 800e7c4:	f003 f9ec 	bl	8011ba0 <__errno>
 800e7c8:	2316      	movs	r3, #22
 800e7ca:	6003      	str	r3, [r0, #0]
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7d0:	bd70      	pop	{r4, r5, r6, pc}
 800e7d2:	bf00      	nop

0800e7d4 <rcutils_strdup>:
 800e7d4:	b084      	sub	sp, #16
 800e7d6:	b570      	push	{r4, r5, r6, lr}
 800e7d8:	b082      	sub	sp, #8
 800e7da:	ac07      	add	r4, sp, #28
 800e7dc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800e7e0:	4605      	mov	r5, r0
 800e7e2:	b1b0      	cbz	r0, 800e812 <rcutils_strdup+0x3e>
 800e7e4:	f7f1 fd1e 	bl	8000224 <strlen>
 800e7e8:	1c42      	adds	r2, r0, #1
 800e7ea:	9b07      	ldr	r3, [sp, #28]
 800e7ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7ee:	9201      	str	r2, [sp, #4]
 800e7f0:	4606      	mov	r6, r0
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	4798      	blx	r3
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	b128      	cbz	r0, 800e806 <rcutils_strdup+0x32>
 800e7fa:	9a01      	ldr	r2, [sp, #4]
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	f003 fa04 	bl	8011c0a <memcpy>
 800e802:	2300      	movs	r3, #0
 800e804:	55a3      	strb	r3, [r4, r6]
 800e806:	4620      	mov	r0, r4
 800e808:	b002      	add	sp, #8
 800e80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e80e:	b004      	add	sp, #16
 800e810:	4770      	bx	lr
 800e812:	4604      	mov	r4, r0
 800e814:	e7f7      	b.n	800e806 <rcutils_strdup+0x32>
 800e816:	bf00      	nop

0800e818 <rcutils_strndup>:
 800e818:	b082      	sub	sp, #8
 800e81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81c:	460e      	mov	r6, r1
 800e81e:	a906      	add	r1, sp, #24
 800e820:	e881 000c 	stmia.w	r1, {r2, r3}
 800e824:	4605      	mov	r5, r0
 800e826:	b180      	cbz	r0, 800e84a <rcutils_strndup+0x32>
 800e828:	1c77      	adds	r7, r6, #1
 800e82a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e82c:	4638      	mov	r0, r7
 800e82e:	4790      	blx	r2
 800e830:	4604      	mov	r4, r0
 800e832:	b128      	cbz	r0, 800e840 <rcutils_strndup+0x28>
 800e834:	463a      	mov	r2, r7
 800e836:	4629      	mov	r1, r5
 800e838:	f003 f9e7 	bl	8011c0a <memcpy>
 800e83c:	2300      	movs	r3, #0
 800e83e:	55a3      	strb	r3, [r4, r6]
 800e840:	4620      	mov	r0, r4
 800e842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e846:	b002      	add	sp, #8
 800e848:	4770      	bx	lr
 800e84a:	4604      	mov	r4, r0
 800e84c:	e7f8      	b.n	800e840 <rcutils_strndup+0x28>
 800e84e:	bf00      	nop

0800e850 <rmw_get_zero_initialized_context>:
 800e850:	b510      	push	{r4, lr}
 800e852:	2250      	movs	r2, #80	; 0x50
 800e854:	4604      	mov	r4, r0
 800e856:	2100      	movs	r1, #0
 800e858:	f003 f90e 	bl	8011a78 <memset>
 800e85c:	4620      	mov	r0, r4
 800e85e:	bd10      	pop	{r4, pc}

0800e860 <rmw_get_zero_initialized_init_options>:
 800e860:	b510      	push	{r4, lr}
 800e862:	2238      	movs	r2, #56	; 0x38
 800e864:	4604      	mov	r4, r0
 800e866:	2100      	movs	r1, #0
 800e868:	f003 f906 	bl	8011a78 <memset>
 800e86c:	f104 0010 	add.w	r0, r4, #16
 800e870:	f000 f806 	bl	800e880 <rmw_get_default_security_options>
 800e874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e878:	60e3      	str	r3, [r4, #12]
 800e87a:	4620      	mov	r0, r4
 800e87c:	bd10      	pop	{r4, pc}
 800e87e:	bf00      	nop

0800e880 <rmw_get_default_security_options>:
 800e880:	2200      	movs	r2, #0
 800e882:	7002      	strb	r2, [r0, #0]
 800e884:	6042      	str	r2, [r0, #4]
 800e886:	4770      	bx	lr

0800e888 <rmw_validate_namespace_with_size>:
 800e888:	b340      	cbz	r0, 800e8dc <rmw_validate_namespace_with_size+0x54>
 800e88a:	b5d0      	push	{r4, r6, r7, lr}
 800e88c:	4614      	mov	r4, r2
 800e88e:	b0c2      	sub	sp, #264	; 0x108
 800e890:	b332      	cbz	r2, 800e8e0 <rmw_validate_namespace_with_size+0x58>
 800e892:	2901      	cmp	r1, #1
 800e894:	460f      	mov	r7, r1
 800e896:	461e      	mov	r6, r3
 800e898:	d102      	bne.n	800e8a0 <rmw_validate_namespace_with_size+0x18>
 800e89a:	7803      	ldrb	r3, [r0, #0]
 800e89c:	2b2f      	cmp	r3, #47	; 0x2f
 800e89e:	d019      	beq.n	800e8d4 <rmw_validate_namespace_with_size+0x4c>
 800e8a0:	aa01      	add	r2, sp, #4
 800e8a2:	4669      	mov	r1, sp
 800e8a4:	f7f9 fd9a 	bl	80083dc <rmw_validate_full_topic_name>
 800e8a8:	b990      	cbnz	r0, 800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e8aa:	9b00      	ldr	r3, [sp, #0]
 800e8ac:	b14b      	cbz	r3, 800e8c2 <rmw_validate_namespace_with_size+0x3a>
 800e8ae:	2b07      	cmp	r3, #7
 800e8b0:	d007      	beq.n	800e8c2 <rmw_validate_namespace_with_size+0x3a>
 800e8b2:	1e5a      	subs	r2, r3, #1
 800e8b4:	2a05      	cmp	r2, #5
 800e8b6:	d82b      	bhi.n	800e910 <rmw_validate_namespace_with_size+0x88>
 800e8b8:	e8df f002 	tbb	[pc, r2]
 800e8bc:	24211e1b 	.word	0x24211e1b
 800e8c0:	1427      	.short	0x1427
 800e8c2:	2ff5      	cmp	r7, #245	; 0xf5
 800e8c4:	d906      	bls.n	800e8d4 <rmw_validate_namespace_with_size+0x4c>
 800e8c6:	2307      	movs	r3, #7
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	b10e      	cbz	r6, 800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e8cc:	23f4      	movs	r3, #244	; 0xf4
 800e8ce:	6033      	str	r3, [r6, #0]
 800e8d0:	b042      	add	sp, #264	; 0x108
 800e8d2:	bdd0      	pop	{r4, r6, r7, pc}
 800e8d4:	2000      	movs	r0, #0
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	b042      	add	sp, #264	; 0x108
 800e8da:	bdd0      	pop	{r4, r6, r7, pc}
 800e8dc:	200b      	movs	r0, #11
 800e8de:	4770      	bx	lr
 800e8e0:	200b      	movs	r0, #11
 800e8e2:	e7f5      	b.n	800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e8e4:	2306      	movs	r3, #6
 800e8e6:	6023      	str	r3, [r4, #0]
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	d0f1      	beq.n	800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e8ec:	9b01      	ldr	r3, [sp, #4]
 800e8ee:	6033      	str	r3, [r6, #0]
 800e8f0:	e7ee      	b.n	800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	e7f7      	b.n	800e8e8 <rmw_validate_namespace_with_size+0x60>
 800e8f8:	2302      	movs	r3, #2
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	e7f4      	b.n	800e8e8 <rmw_validate_namespace_with_size+0x60>
 800e8fe:	2303      	movs	r3, #3
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	e7f1      	b.n	800e8e8 <rmw_validate_namespace_with_size+0x60>
 800e904:	2304      	movs	r3, #4
 800e906:	6023      	str	r3, [r4, #0]
 800e908:	e7ee      	b.n	800e8e8 <rmw_validate_namespace_with_size+0x60>
 800e90a:	2305      	movs	r3, #5
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	e7eb      	b.n	800e8e8 <rmw_validate_namespace_with_size+0x60>
 800e910:	4a03      	ldr	r2, [pc, #12]	; (800e920 <rmw_validate_namespace_with_size+0x98>)
 800e912:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e916:	a802      	add	r0, sp, #8
 800e918:	f7ff ff30 	bl	800e77c <rcutils_snprintf>
 800e91c:	2001      	movs	r0, #1
 800e91e:	e7d7      	b.n	800e8d0 <rmw_validate_namespace_with_size+0x48>
 800e920:	08012e74 	.word	0x08012e74

0800e924 <rmw_validate_namespace>:
 800e924:	b168      	cbz	r0, 800e942 <rmw_validate_namespace+0x1e>
 800e926:	b570      	push	{r4, r5, r6, lr}
 800e928:	460d      	mov	r5, r1
 800e92a:	4616      	mov	r6, r2
 800e92c:	4604      	mov	r4, r0
 800e92e:	f7f1 fc79 	bl	8000224 <strlen>
 800e932:	4633      	mov	r3, r6
 800e934:	4601      	mov	r1, r0
 800e936:	462a      	mov	r2, r5
 800e938:	4620      	mov	r0, r4
 800e93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e93e:	f7ff bfa3 	b.w	800e888 <rmw_validate_namespace_with_size>
 800e942:	200b      	movs	r0, #11
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop

0800e948 <rmw_namespace_validation_result_string>:
 800e948:	2807      	cmp	r0, #7
 800e94a:	bf9a      	itte	ls
 800e94c:	4b02      	ldrls	r3, [pc, #8]	; (800e958 <rmw_namespace_validation_result_string+0x10>)
 800e94e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e952:	4802      	ldrhi	r0, [pc, #8]	; (800e95c <rmw_namespace_validation_result_string+0x14>)
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	0801306c 	.word	0x0801306c
 800e95c:	08012ec4 	.word	0x08012ec4

0800e960 <rmw_validate_node_name>:
 800e960:	2800      	cmp	r0, #0
 800e962:	d03b      	beq.n	800e9dc <rmw_validate_node_name+0x7c>
 800e964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e968:	460f      	mov	r7, r1
 800e96a:	2900      	cmp	r1, #0
 800e96c:	d038      	beq.n	800e9e0 <rmw_validate_node_name+0x80>
 800e96e:	4615      	mov	r5, r2
 800e970:	4604      	mov	r4, r0
 800e972:	f7f1 fc57 	bl	8000224 <strlen>
 800e976:	b1e0      	cbz	r0, 800e9b2 <rmw_validate_node_name+0x52>
 800e978:	1e63      	subs	r3, r4, #1
 800e97a:	eb03 0e00 	add.w	lr, r3, r0
 800e97e:	f1c4 0c01 	rsb	ip, r4, #1
 800e982:	eb0c 0803 	add.w	r8, ip, r3
 800e986:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800e98a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800e98e:	f026 0220 	bic.w	r2, r6, #32
 800e992:	2909      	cmp	r1, #9
 800e994:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 800e998:	d913      	bls.n	800e9c2 <rmw_validate_node_name+0x62>
 800e99a:	2a19      	cmp	r2, #25
 800e99c:	d911      	bls.n	800e9c2 <rmw_validate_node_name+0x62>
 800e99e:	2e5f      	cmp	r6, #95	; 0x5f
 800e9a0:	d00f      	beq.n	800e9c2 <rmw_validate_node_name+0x62>
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	603b      	str	r3, [r7, #0]
 800e9a6:	b10d      	cbz	r5, 800e9ac <rmw_validate_node_name+0x4c>
 800e9a8:	f8c5 8000 	str.w	r8, [r5]
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	603b      	str	r3, [r7, #0]
 800e9b6:	2d00      	cmp	r5, #0
 800e9b8:	d0f8      	beq.n	800e9ac <rmw_validate_node_name+0x4c>
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	6028      	str	r0, [r5, #0]
 800e9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c2:	4573      	cmp	r3, lr
 800e9c4:	d1dd      	bne.n	800e982 <rmw_validate_node_name+0x22>
 800e9c6:	7822      	ldrb	r2, [r4, #0]
 800e9c8:	4b0d      	ldr	r3, [pc, #52]	; (800ea00 <rmw_validate_node_name+0xa0>)
 800e9ca:	5cd3      	ldrb	r3, [r2, r3]
 800e9cc:	f013 0304 	ands.w	r3, r3, #4
 800e9d0:	d110      	bne.n	800e9f4 <rmw_validate_node_name+0x94>
 800e9d2:	28ff      	cmp	r0, #255	; 0xff
 800e9d4:	d806      	bhi.n	800e9e4 <rmw_validate_node_name+0x84>
 800e9d6:	603b      	str	r3, [r7, #0]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	e7e8      	b.n	800e9ae <rmw_validate_node_name+0x4e>
 800e9dc:	200b      	movs	r0, #11
 800e9de:	4770      	bx	lr
 800e9e0:	200b      	movs	r0, #11
 800e9e2:	e7e4      	b.n	800e9ae <rmw_validate_node_name+0x4e>
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	603a      	str	r2, [r7, #0]
 800e9e8:	2d00      	cmp	r5, #0
 800e9ea:	d0df      	beq.n	800e9ac <rmw_validate_node_name+0x4c>
 800e9ec:	22fe      	movs	r2, #254	; 0xfe
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	602a      	str	r2, [r5, #0]
 800e9f2:	e7dc      	b.n	800e9ae <rmw_validate_node_name+0x4e>
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	603b      	str	r3, [r7, #0]
 800e9f8:	2d00      	cmp	r5, #0
 800e9fa:	d1de      	bne.n	800e9ba <rmw_validate_node_name+0x5a>
 800e9fc:	e7d6      	b.n	800e9ac <rmw_validate_node_name+0x4c>
 800e9fe:	bf00      	nop
 800ea00:	08013430 	.word	0x08013430

0800ea04 <rmw_node_name_validation_result_string>:
 800ea04:	2804      	cmp	r0, #4
 800ea06:	bf9a      	itte	ls
 800ea08:	4b02      	ldrls	r3, [pc, #8]	; (800ea14 <rmw_node_name_validation_result_string+0x10>)
 800ea0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ea0e:	4802      	ldrhi	r0, [pc, #8]	; (800ea18 <rmw_node_name_validation_result_string+0x14>)
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	08013178 	.word	0x08013178
 800ea18:	0801308c 	.word	0x0801308c

0800ea1c <get_memory>:
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	6840      	ldr	r0, [r0, #4]
 800ea20:	b158      	cbz	r0, 800ea3a <get_memory+0x1e>
 800ea22:	6882      	ldr	r2, [r0, #8]
 800ea24:	605a      	str	r2, [r3, #4]
 800ea26:	b10a      	cbz	r2, 800ea2c <get_memory+0x10>
 800ea28:	2100      	movs	r1, #0
 800ea2a:	6051      	str	r1, [r2, #4]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	6082      	str	r2, [r0, #8]
 800ea30:	b102      	cbz	r2, 800ea34 <get_memory+0x18>
 800ea32:	6050      	str	r0, [r2, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	6042      	str	r2, [r0, #4]
 800ea38:	6018      	str	r0, [r3, #0]
 800ea3a:	4770      	bx	lr

0800ea3c <put_memory>:
 800ea3c:	684b      	ldr	r3, [r1, #4]
 800ea3e:	b10b      	cbz	r3, 800ea44 <put_memory+0x8>
 800ea40:	688a      	ldr	r2, [r1, #8]
 800ea42:	609a      	str	r2, [r3, #8]
 800ea44:	688a      	ldr	r2, [r1, #8]
 800ea46:	b102      	cbz	r2, 800ea4a <put_memory+0xe>
 800ea48:	6053      	str	r3, [r2, #4]
 800ea4a:	6803      	ldr	r3, [r0, #0]
 800ea4c:	428b      	cmp	r3, r1
 800ea4e:	6843      	ldr	r3, [r0, #4]
 800ea50:	bf08      	it	eq
 800ea52:	6002      	streq	r2, [r0, #0]
 800ea54:	608b      	str	r3, [r1, #8]
 800ea56:	b103      	cbz	r3, 800ea5a <put_memory+0x1e>
 800ea58:	6059      	str	r1, [r3, #4]
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	604b      	str	r3, [r1, #4]
 800ea5e:	6041      	str	r1, [r0, #4]
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop

0800ea64 <rmw_destroy_client>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	b128      	cbz	r0, 800ea74 <rmw_destroy_client+0x10>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	6800      	ldr	r0, [r0, #0]
 800ea6c:	460d      	mov	r5, r1
 800ea6e:	f7fa f965 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800ea72:	b910      	cbnz	r0, 800ea7a <rmw_destroy_client+0x16>
 800ea74:	2401      	movs	r4, #1
 800ea76:	4620      	mov	r0, r4
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
 800ea7a:	6863      	ldr	r3, [r4, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0f9      	beq.n	800ea74 <rmw_destroy_client+0x10>
 800ea80:	2d00      	cmp	r5, #0
 800ea82:	d0f7      	beq.n	800ea74 <rmw_destroy_client+0x10>
 800ea84:	6828      	ldr	r0, [r5, #0]
 800ea86:	f7fa f959 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d0f2      	beq.n	800ea74 <rmw_destroy_client+0x10>
 800ea8e:	686e      	ldr	r6, [r5, #4]
 800ea90:	2e00      	cmp	r6, #0
 800ea92:	d0ef      	beq.n	800ea74 <rmw_destroy_client+0x10>
 800ea94:	6864      	ldr	r4, [r4, #4]
 800ea96:	6932      	ldr	r2, [r6, #16]
 800ea98:	6920      	ldr	r0, [r4, #16]
 800ea9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ea9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	f001 fc9c 	bl	80103e0 <uxr_buffer_cancel_data>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	6920      	ldr	r0, [r4, #16]
 800eaac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800eab0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800eab4:	f7fa f8c2 	bl	8008c3c <run_xrce_session>
 800eab8:	6920      	ldr	r0, [r4, #16]
 800eaba:	6932      	ldr	r2, [r6, #16]
 800eabc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800eac0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eac4:	6819      	ldr	r1, [r3, #0]
 800eac6:	f7fb ff99 	bl	800a9fc <uxr_buffer_delete_entity>
 800eaca:	4602      	mov	r2, r0
 800eacc:	6920      	ldr	r0, [r4, #16]
 800eace:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ead2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ead6:	f7fa f8b1 	bl	8008c3c <run_xrce_session>
 800eada:	2800      	cmp	r0, #0
 800eadc:	4628      	mov	r0, r5
 800eade:	bf14      	ite	ne
 800eae0:	2400      	movne	r4, #0
 800eae2:	2402      	moveq	r4, #2
 800eae4:	f7fa f83c 	bl	8008b60 <rmw_uxrce_fini_client_memory>
 800eae8:	e7c5      	b.n	800ea76 <rmw_destroy_client+0x12>
 800eaea:	bf00      	nop

0800eaec <rmw_get_implementation_identifier>:
 800eaec:	4b01      	ldr	r3, [pc, #4]	; (800eaf4 <rmw_get_implementation_identifier+0x8>)
 800eaee:	6818      	ldr	r0, [r3, #0]
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	080131a4 	.word	0x080131a4

0800eaf8 <rmw_init_options_init>:
 800eaf8:	b084      	sub	sp, #16
 800eafa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafe:	ad09      	add	r5, sp, #36	; 0x24
 800eb00:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800eb04:	b130      	cbz	r0, 800eb14 <rmw_init_options_init+0x1c>
 800eb06:	4604      	mov	r4, r0
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7f9 faa9 	bl	8008060 <rcutils_allocator_is_valid>
 800eb0e:	b108      	cbz	r0, 800eb14 <rmw_init_options_init+0x1c>
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	b123      	cbz	r3, 800eb1e <rmw_init_options_init+0x26>
 800eb14:	200b      	movs	r0, #11
 800eb16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb1a:	b004      	add	sp, #16
 800eb1c:	4770      	bx	lr
 800eb1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb20:	4f1c      	ldr	r7, [pc, #112]	; (800eb94 <rmw_init_options_init+0x9c>)
 800eb22:	682e      	ldr	r6, [r5, #0]
 800eb24:	683d      	ldr	r5, [r7, #0]
 800eb26:	60a5      	str	r5, [r4, #8]
 800eb28:	f04f 0800 	mov.w	r8, #0
 800eb2c:	f04f 0900 	mov.w	r9, #0
 800eb30:	f104 0520 	add.w	r5, r4, #32
 800eb34:	e9c4 8900 	strd	r8, r9, [r4]
 800eb38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb3a:	4b17      	ldr	r3, [pc, #92]	; (800eb98 <rmw_init_options_init+0xa0>)
 800eb3c:	4817      	ldr	r0, [pc, #92]	; (800eb9c <rmw_init_options_init+0xa4>)
 800eb3e:	602e      	str	r6, [r5, #0]
 800eb40:	4917      	ldr	r1, [pc, #92]	; (800eba0 <rmw_init_options_init+0xa8>)
 800eb42:	61e3      	str	r3, [r4, #28]
 800eb44:	2203      	movs	r2, #3
 800eb46:	f7f9 ff5b 	bl	8008a00 <rmw_uxrce_init_init_options_impl_memory>
 800eb4a:	4814      	ldr	r0, [pc, #80]	; (800eb9c <rmw_init_options_init+0xa4>)
 800eb4c:	f7ff ff66 	bl	800ea1c <get_memory>
 800eb50:	b1e8      	cbz	r0, 800eb8e <rmw_init_options_init+0x96>
 800eb52:	4a14      	ldr	r2, [pc, #80]	; (800eba4 <rmw_init_options_init+0xac>)
 800eb54:	68c3      	ldr	r3, [r0, #12]
 800eb56:	6851      	ldr	r1, [r2, #4]
 800eb58:	7810      	ldrb	r0, [r2, #0]
 800eb5a:	6363      	str	r3, [r4, #52]	; 0x34
 800eb5c:	7418      	strb	r0, [r3, #16]
 800eb5e:	6159      	str	r1, [r3, #20]
 800eb60:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800eb64:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800eb68:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800eb6c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800eb70:	f7fd fad2 	bl	800c118 <uxr_nanos>
 800eb74:	f002 fcc2 	bl	80114fc <srand>
 800eb78:	f002 fcee 	bl	8011558 <rand>
 800eb7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb7e:	6298      	str	r0, [r3, #40]	; 0x28
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d0f9      	beq.n	800eb78 <rmw_init_options_init+0x80>
 800eb84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb88:	2000      	movs	r0, #0
 800eb8a:	b004      	add	sp, #16
 800eb8c:	4770      	bx	lr
 800eb8e:	2001      	movs	r0, #1
 800eb90:	e7c1      	b.n	800eb16 <rmw_init_options_init+0x1e>
 800eb92:	bf00      	nop
 800eb94:	080131a4 	.word	0x080131a4
 800eb98:	08012d4c 	.word	0x08012d4c
 800eb9c:	2000c784 	.word	0x2000c784
 800eba0:	2000c3d8 	.word	0x2000c3d8
 800eba4:	20009468 	.word	0x20009468

0800eba8 <rmw_init_options_copy>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	b158      	cbz	r0, 800ebc4 <rmw_init_options_copy+0x1c>
 800ebac:	460e      	mov	r6, r1
 800ebae:	b149      	cbz	r1, 800ebc4 <rmw_init_options_copy+0x1c>
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	6880      	ldr	r0, [r0, #8]
 800ebb4:	b120      	cbz	r0, 800ebc0 <rmw_init_options_copy+0x18>
 800ebb6:	4b1b      	ldr	r3, [pc, #108]	; (800ec24 <rmw_init_options_copy+0x7c>)
 800ebb8:	6819      	ldr	r1, [r3, #0]
 800ebba:	f7f1 fb29 	bl	8000210 <strcmp>
 800ebbe:	bb60      	cbnz	r0, 800ec1a <rmw_init_options_copy+0x72>
 800ebc0:	68b3      	ldr	r3, [r6, #8]
 800ebc2:	b113      	cbz	r3, 800ebca <rmw_init_options_copy+0x22>
 800ebc4:	230b      	movs	r3, #11
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebca:	4623      	mov	r3, r4
 800ebcc:	4632      	mov	r2, r6
 800ebce:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800ebd2:	681d      	ldr	r5, [r3, #0]
 800ebd4:	6858      	ldr	r0, [r3, #4]
 800ebd6:	6899      	ldr	r1, [r3, #8]
 800ebd8:	68df      	ldr	r7, [r3, #12]
 800ebda:	60d7      	str	r7, [r2, #12]
 800ebdc:	3310      	adds	r3, #16
 800ebde:	4563      	cmp	r3, ip
 800ebe0:	6015      	str	r5, [r2, #0]
 800ebe2:	6050      	str	r0, [r2, #4]
 800ebe4:	6091      	str	r1, [r2, #8]
 800ebe6:	f102 0210 	add.w	r2, r2, #16
 800ebea:	d1f2      	bne.n	800ebd2 <rmw_init_options_copy+0x2a>
 800ebec:	6819      	ldr	r1, [r3, #0]
 800ebee:	685b      	ldr	r3, [r3, #4]
 800ebf0:	480d      	ldr	r0, [pc, #52]	; (800ec28 <rmw_init_options_copy+0x80>)
 800ebf2:	6053      	str	r3, [r2, #4]
 800ebf4:	6011      	str	r1, [r2, #0]
 800ebf6:	f7ff ff11 	bl	800ea1c <get_memory>
 800ebfa:	b188      	cbz	r0, 800ec20 <rmw_init_options_copy+0x78>
 800ebfc:	68c5      	ldr	r5, [r0, #12]
 800ebfe:	6375      	str	r5, [r6, #52]	; 0x34
 800ec00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ec02:	3610      	adds	r6, #16
 800ec04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec06:	f105 0410 	add.w	r4, r5, #16
 800ec0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ec10:	2300      	movs	r3, #0
 800ec12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ec16:	4618      	mov	r0, r3
 800ec18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1a:	230c      	movs	r3, #12
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec20:	2301      	movs	r3, #1
 800ec22:	e7d0      	b.n	800ebc6 <rmw_init_options_copy+0x1e>
 800ec24:	080131a4 	.word	0x080131a4
 800ec28:	2000c784 	.word	0x2000c784

0800ec2c <rmw_init_options_fini>:
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d036      	beq.n	800ec9e <rmw_init_options_fini+0x72>
 800ec30:	b530      	push	{r4, r5, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	b08f      	sub	sp, #60	; 0x3c
 800ec36:	3020      	adds	r0, #32
 800ec38:	f7f9 fa12 	bl	8008060 <rcutils_allocator_is_valid>
 800ec3c:	b328      	cbz	r0, 800ec8a <rmw_init_options_fini+0x5e>
 800ec3e:	68a0      	ldr	r0, [r4, #8]
 800ec40:	b120      	cbz	r0, 800ec4c <rmw_init_options_fini+0x20>
 800ec42:	4b18      	ldr	r3, [pc, #96]	; (800eca4 <rmw_init_options_fini+0x78>)
 800ec44:	6819      	ldr	r1, [r3, #0]
 800ec46:	f7f1 fae3 	bl	8000210 <strcmp>
 800ec4a:	bb30      	cbnz	r0, 800ec9a <rmw_init_options_fini+0x6e>
 800ec4c:	4b16      	ldr	r3, [pc, #88]	; (800eca8 <rmw_init_options_fini+0x7c>)
 800ec4e:	6819      	ldr	r1, [r3, #0]
 800ec50:	b1f9      	cbz	r1, 800ec92 <rmw_init_options_fini+0x66>
 800ec52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ec54:	e001      	b.n	800ec5a <rmw_init_options_fini+0x2e>
 800ec56:	6889      	ldr	r1, [r1, #8]
 800ec58:	b1d9      	cbz	r1, 800ec92 <rmw_init_options_fini+0x66>
 800ec5a:	68cb      	ldr	r3, [r1, #12]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d1fa      	bne.n	800ec56 <rmw_init_options_fini+0x2a>
 800ec60:	4811      	ldr	r0, [pc, #68]	; (800eca8 <rmw_init_options_fini+0x7c>)
 800ec62:	f7ff feeb 	bl	800ea3c <put_memory>
 800ec66:	466d      	mov	r5, sp
 800ec68:	4668      	mov	r0, sp
 800ec6a:	f7ff fdf9 	bl	800e860 <rmw_get_zero_initialized_init_options>
 800ec6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ec7e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ec82:	2300      	movs	r3, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	b00f      	add	sp, #60	; 0x3c
 800ec88:	bd30      	pop	{r4, r5, pc}
 800ec8a:	230b      	movs	r3, #11
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	b00f      	add	sp, #60	; 0x3c
 800ec90:	bd30      	pop	{r4, r5, pc}
 800ec92:	2301      	movs	r3, #1
 800ec94:	4618      	mov	r0, r3
 800ec96:	b00f      	add	sp, #60	; 0x3c
 800ec98:	bd30      	pop	{r4, r5, pc}
 800ec9a:	230c      	movs	r3, #12
 800ec9c:	e7f2      	b.n	800ec84 <rmw_init_options_fini+0x58>
 800ec9e:	230b      	movs	r3, #11
 800eca0:	4618      	mov	r0, r3
 800eca2:	4770      	bx	lr
 800eca4:	080131a4 	.word	0x080131a4
 800eca8:	2000c784 	.word	0x2000c784

0800ecac <rmw_init>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	f000 80d6 	beq.w	800ee64 <rmw_init+0x1b8>
 800ecb8:	460e      	mov	r6, r1
 800ecba:	2900      	cmp	r1, #0
 800ecbc:	f000 80d2 	beq.w	800ee64 <rmw_init+0x1b8>
 800ecc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 80cd 	beq.w	800ee64 <rmw_init+0x1b8>
 800ecca:	4b79      	ldr	r3, [pc, #484]	; (800eeb0 <rmw_init+0x204>)
 800eccc:	6880      	ldr	r0, [r0, #8]
 800ecce:	f8d3 9000 	ldr.w	r9, [r3]
 800ecd2:	b128      	cbz	r0, 800ece0 <rmw_init+0x34>
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	f7f1 fa9b 	bl	8000210 <strcmp>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f040 80cc 	bne.w	800ee78 <rmw_init+0x1cc>
 800ece0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ece4:	68eb      	ldr	r3, [r5, #12]
 800ece6:	61f3      	str	r3, [r6, #28]
 800ece8:	e9c6 0100 	strd	r0, r1, [r6]
 800ecec:	2201      	movs	r2, #1
 800ecee:	4971      	ldr	r1, [pc, #452]	; (800eeb4 <rmw_init+0x208>)
 800ecf0:	4871      	ldr	r0, [pc, #452]	; (800eeb8 <rmw_init+0x20c>)
 800ecf2:	f8c6 9008 	str.w	r9, [r6, #8]
 800ecf6:	f7f9 fe2b 	bl	8008950 <rmw_uxrce_init_session_memory>
 800ecfa:	4870      	ldr	r0, [pc, #448]	; (800eebc <rmw_init+0x210>)
 800ecfc:	4970      	ldr	r1, [pc, #448]	; (800eec0 <rmw_init+0x214>)
 800ecfe:	2204      	movs	r2, #4
 800ed00:	f7f9 fe60 	bl	80089c4 <rmw_uxrce_init_static_input_buffer_memory>
 800ed04:	486c      	ldr	r0, [pc, #432]	; (800eeb8 <rmw_init+0x20c>)
 800ed06:	f7ff fe89 	bl	800ea1c <get_memory>
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	f000 80af 	beq.w	800ee6e <rmw_init+0x1c2>
 800ed10:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800ed12:	68c4      	ldr	r4, [r0, #12]
 800ed14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed16:	7c39      	ldrb	r1, [r7, #16]
 800ed18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed1c:	9001      	str	r0, [sp, #4]
 800ed1e:	6a38      	ldr	r0, [r7, #32]
 800ed20:	9000      	str	r0, [sp, #0]
 800ed22:	f104 0a10 	add.w	sl, r4, #16
 800ed26:	4650      	mov	r0, sl
 800ed28:	f000 fde4 	bl	800f8f4 <uxr_set_custom_transport_callbacks>
 800ed2c:	f241 5294 	movw	r2, #5524	; 0x1594
 800ed30:	f241 5398 	movw	r3, #5528	; 0x1598
 800ed34:	f04f 0800 	mov.w	r8, #0
 800ed38:	f241 509c 	movw	r0, #5532	; 0x159c
 800ed3c:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800ed40:	f844 8002 	str.w	r8, [r4, r2]
 800ed44:	f844 8003 	str.w	r8, [r4, r3]
 800ed48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed4c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800ed50:	f844 8000 	str.w	r8, [r4, r0]
 800ed54:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800ed58:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800ed5c:	4859      	ldr	r0, [pc, #356]	; (800eec4 <rmw_init+0x218>)
 800ed5e:	f8c1 8000 	str.w	r8, [r1]
 800ed62:	2201      	movs	r2, #1
 800ed64:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 800ed68:	4957      	ldr	r1, [pc, #348]	; (800eec8 <rmw_init+0x21c>)
 800ed6a:	64b4      	str	r4, [r6, #72]	; 0x48
 800ed6c:	f7f9 fdd6 	bl	800891c <rmw_uxrce_init_node_memory>
 800ed70:	4956      	ldr	r1, [pc, #344]	; (800eecc <rmw_init+0x220>)
 800ed72:	4857      	ldr	r0, [pc, #348]	; (800eed0 <rmw_init+0x224>)
 800ed74:	2205      	movs	r2, #5
 800ed76:	f7f9 fdb7 	bl	80088e8 <rmw_uxrce_init_subscription_memory>
 800ed7a:	4956      	ldr	r1, [pc, #344]	; (800eed4 <rmw_init+0x228>)
 800ed7c:	4856      	ldr	r0, [pc, #344]	; (800eed8 <rmw_init+0x22c>)
 800ed7e:	220a      	movs	r2, #10
 800ed80:	f7f9 fd98 	bl	80088b4 <rmw_uxrce_init_publisher_memory>
 800ed84:	4955      	ldr	r1, [pc, #340]	; (800eedc <rmw_init+0x230>)
 800ed86:	4856      	ldr	r0, [pc, #344]	; (800eee0 <rmw_init+0x234>)
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f7f9 fd5f 	bl	800884c <rmw_uxrce_init_service_memory>
 800ed8e:	4955      	ldr	r1, [pc, #340]	; (800eee4 <rmw_init+0x238>)
 800ed90:	4855      	ldr	r0, [pc, #340]	; (800eee8 <rmw_init+0x23c>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	f7f9 fd74 	bl	8008880 <rmw_uxrce_init_client_memory>
 800ed98:	4954      	ldr	r1, [pc, #336]	; (800eeec <rmw_init+0x240>)
 800ed9a:	4855      	ldr	r0, [pc, #340]	; (800eef0 <rmw_init+0x244>)
 800ed9c:	220f      	movs	r2, #15
 800ed9e:	f7f9 fdf5 	bl	800898c <rmw_uxrce_init_topic_memory>
 800eda2:	4954      	ldr	r1, [pc, #336]	; (800eef4 <rmw_init+0x248>)
 800eda4:	4854      	ldr	r0, [pc, #336]	; (800eef8 <rmw_init+0x24c>)
 800eda6:	2203      	movs	r2, #3
 800eda8:	f7f9 fe2a 	bl	8008a00 <rmw_uxrce_init_init_options_impl_memory>
 800edac:	4953      	ldr	r1, [pc, #332]	; (800eefc <rmw_init+0x250>)
 800edae:	4854      	ldr	r0, [pc, #336]	; (800ef00 <rmw_init+0x254>)
 800edb0:	2204      	movs	r2, #4
 800edb2:	f7f9 fe3f 	bl	8008a34 <rmw_uxrce_init_wait_set_memory>
 800edb6:	4953      	ldr	r1, [pc, #332]	; (800ef04 <rmw_init+0x258>)
 800edb8:	4853      	ldr	r0, [pc, #332]	; (800ef08 <rmw_init+0x25c>)
 800edba:	2204      	movs	r2, #4
 800edbc:	f7f9 fe56 	bl	8008a6c <rmw_uxrce_init_guard_condition_memory>
 800edc0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800edc2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800edc4:	4642      	mov	r2, r8
 800edc6:	f000 fb03 	bl	800f3d0 <rmw_uxrce_transport_init>
 800edca:	4607      	mov	r7, r0
 800edcc:	2800      	cmp	r0, #0
 800edce:	d158      	bne.n	800ee82 <rmw_init+0x1d6>
 800edd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800edd2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800edd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edd8:	4628      	mov	r0, r5
 800edda:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800edde:	f7fc f821 	bl	800ae24 <uxr_init_session>
 800ede2:	494a      	ldr	r1, [pc, #296]	; (800ef0c <rmw_init+0x260>)
 800ede4:	4622      	mov	r2, r4
 800ede6:	4628      	mov	r0, r5
 800ede8:	f7fc f83e 	bl	800ae68 <uxr_set_topic_callback>
 800edec:	4948      	ldr	r1, [pc, #288]	; (800ef10 <rmw_init+0x264>)
 800edee:	463a      	mov	r2, r7
 800edf0:	4628      	mov	r0, r5
 800edf2:	f7fc f835 	bl	800ae60 <uxr_set_status_callback>
 800edf6:	4947      	ldr	r1, [pc, #284]	; (800ef14 <rmw_init+0x268>)
 800edf8:	463a      	mov	r2, r7
 800edfa:	4628      	mov	r0, r5
 800edfc:	f7fc f838 	bl	800ae70 <uxr_set_request_callback>
 800ee00:	4945      	ldr	r1, [pc, #276]	; (800ef18 <rmw_init+0x26c>)
 800ee02:	463a      	mov	r2, r7
 800ee04:	4628      	mov	r0, r5
 800ee06:	f7fc f837 	bl	800ae78 <uxr_set_reply_callback>
 800ee0a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800ee0e:	2304      	movs	r3, #4
 800ee10:	0092      	lsls	r2, r2, #2
 800ee12:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800ee16:	4628      	mov	r0, r5
 800ee18:	f7fc f86e 	bl	800aef8 <uxr_create_input_reliable_stream>
 800ee1c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800ee20:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800ee24:	0092      	lsls	r2, r2, #2
 800ee26:	2304      	movs	r3, #4
 800ee28:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	f7fc f839 	bl	800aea4 <uxr_create_output_reliable_stream>
 800ee32:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800ee36:	4628      	mov	r0, r5
 800ee38:	f7fc f858 	bl	800aeec <uxr_create_input_best_effort_stream>
 800ee3c:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800ee40:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800ee44:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800ee48:	4628      	mov	r0, r5
 800ee4a:	3114      	adds	r1, #20
 800ee4c:	f7fc f818 	bl	800ae80 <uxr_create_output_best_effort_stream>
 800ee50:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800ee54:	4628      	mov	r0, r5
 800ee56:	f7fc fc6f 	bl	800b738 <uxr_create_session>
 800ee5a:	b1f8      	cbz	r0, 800ee9c <rmw_init+0x1f0>
 800ee5c:	4638      	mov	r0, r7
 800ee5e:	b002      	add	sp, #8
 800ee60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee64:	270b      	movs	r7, #11
 800ee66:	4638      	mov	r0, r7
 800ee68:	b002      	add	sp, #8
 800ee6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6e:	2701      	movs	r7, #1
 800ee70:	4638      	mov	r0, r7
 800ee72:	b002      	add	sp, #8
 800ee74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee78:	270c      	movs	r7, #12
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	b002      	add	sp, #8
 800ee7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee82:	4650      	mov	r0, sl
 800ee84:	f000 fd76 	bl	800f974 <uxr_close_custom_transport>
 800ee88:	480b      	ldr	r0, [pc, #44]	; (800eeb8 <rmw_init+0x20c>)
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	f7ff fdd6 	bl	800ea3c <put_memory>
 800ee90:	4638      	mov	r0, r7
 800ee92:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 800ee96:	b002      	add	sp, #8
 800ee98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee9c:	4650      	mov	r0, sl
 800ee9e:	f000 fd69 	bl	800f974 <uxr_close_custom_transport>
 800eea2:	4805      	ldr	r0, [pc, #20]	; (800eeb8 <rmw_init+0x20c>)
 800eea4:	4621      	mov	r1, r4
 800eea6:	f7ff fdc9 	bl	800ea3c <put_memory>
 800eeaa:	64b7      	str	r7, [r6, #72]	; 0x48
 800eeac:	2701      	movs	r7, #1
 800eeae:	e7d5      	b.n	800ee5c <rmw_init+0x1b0>
 800eeb0:	080131a4 	.word	0x080131a4
 800eeb4:	2000c860 	.word	0x2000c860
 800eeb8:	2000c630 	.word	0x2000c630
 800eebc:	20009488 	.word	0x20009488
 800eec0:	2000a268 	.word	0x2000a268
 800eec4:	2000c45c 	.word	0x2000c45c
 800eec8:	2000c640 	.word	0x2000c640
 800eecc:	20009d90 	.word	0x20009d90
 800eed0:	2000c6f4 	.word	0x2000c6f4
 800eed4:	200094a8 	.word	0x200094a8
 800eed8:	20009498 	.word	0x20009498
 800eedc:	2000c798 	.word	0x2000c798
 800eee0:	2000c6e4 	.word	0x2000c6e4
 800eee4:	2000a1a0 	.word	0x2000a1a0
 800eee8:	20009d18 	.word	0x20009d18
 800eeec:	2000c46c 	.word	0x2000c46c
 800eef0:	2000c620 	.word	0x2000c620
 800eef4:	2000c3d8 	.word	0x2000c3d8
 800eef8:	2000c784 	.word	0x2000c784
 800eefc:	2000c368 	.word	0x2000c368
 800ef00:	2000de08 	.word	0x2000de08
 800ef04:	2000c704 	.word	0x2000c704
 800ef08:	2000c610 	.word	0x2000c610
 800ef0c:	080110a9 	.word	0x080110a9
 800ef10:	080110a1 	.word	0x080110a1
 800ef14:	0801113d 	.word	0x0801113d
 800ef18:	080111d5 	.word	0x080111d5

0800ef1c <rmw_context_fini>:
 800ef1c:	4b17      	ldr	r3, [pc, #92]	; (800ef7c <rmw_context_fini+0x60>)
 800ef1e:	b570      	push	{r4, r5, r6, lr}
 800ef20:	681c      	ldr	r4, [r3, #0]
 800ef22:	4605      	mov	r5, r0
 800ef24:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800ef26:	b33c      	cbz	r4, 800ef78 <rmw_context_fini+0x5c>
 800ef28:	2600      	movs	r6, #0
 800ef2a:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800ef2e:	691a      	ldr	r2, [r3, #16]
 800ef30:	4282      	cmp	r2, r0
 800ef32:	d018      	beq.n	800ef66 <rmw_context_fini+0x4a>
 800ef34:	2c00      	cmp	r4, #0
 800ef36:	d1f8      	bne.n	800ef2a <rmw_context_fini+0xe>
 800ef38:	b188      	cbz	r0, 800ef5e <rmw_context_fini+0x42>
 800ef3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ef3e:	789b      	ldrb	r3, [r3, #2]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	bf14      	ite	ne
 800ef44:	210a      	movne	r1, #10
 800ef46:	2100      	moveq	r1, #0
 800ef48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef4c:	f7fc fdb6 	bl	800babc <uxr_delete_session_retries>
 800ef50:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ef52:	f7f9 fda5 	bl	8008aa0 <rmw_uxrce_fini_session_memory>
 800ef56:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ef58:	3010      	adds	r0, #16
 800ef5a:	f000 fd0b 	bl	800f974 <uxr_close_custom_transport>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	4630      	mov	r0, r6
 800ef62:	64ab      	str	r3, [r5, #72]	; 0x48
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
 800ef66:	f103 0018 	add.w	r0, r3, #24
 800ef6a:	f000 f90d 	bl	800f188 <rmw_destroy_node>
 800ef6e:	4606      	mov	r6, r0
 800ef70:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ef72:	2c00      	cmp	r4, #0
 800ef74:	d1d9      	bne.n	800ef2a <rmw_context_fini+0xe>
 800ef76:	e7df      	b.n	800ef38 <rmw_context_fini+0x1c>
 800ef78:	4626      	mov	r6, r4
 800ef7a:	e7dd      	b.n	800ef38 <rmw_context_fini+0x1c>
 800ef7c:	2000c45c 	.word	0x2000c45c

0800ef80 <create_topic>:
 800ef80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef84:	4607      	mov	r7, r0
 800ef86:	b084      	sub	sp, #16
 800ef88:	4822      	ldr	r0, [pc, #136]	; (800f014 <create_topic+0x94>)
 800ef8a:	4689      	mov	r9, r1
 800ef8c:	4690      	mov	r8, r2
 800ef8e:	f7ff fd45 	bl	800ea1c <get_memory>
 800ef92:	4604      	mov	r4, r0
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d038      	beq.n	800f00a <create_topic+0x8a>
 800ef98:	693e      	ldr	r6, [r7, #16]
 800ef9a:	68c4      	ldr	r4, [r0, #12]
 800ef9c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800f01c <create_topic+0x9c>
 800efa0:	61a7      	str	r7, [r4, #24]
 800efa2:	f241 5596 	movw	r5, #5526	; 0x1596
 800efa6:	f8c4 8014 	str.w	r8, [r4, #20]
 800efaa:	5b70      	ldrh	r0, [r6, r5]
 800efac:	1c42      	adds	r2, r0, #1
 800efae:	5372      	strh	r2, [r6, r5]
 800efb0:	2102      	movs	r1, #2
 800efb2:	f7fb fe7b 	bl	800acac <uxr_object_id>
 800efb6:	4651      	mov	r1, sl
 800efb8:	6120      	str	r0, [r4, #16]
 800efba:	223c      	movs	r2, #60	; 0x3c
 800efbc:	4648      	mov	r0, r9
 800efbe:	f7f9 fea3 	bl	8008d08 <generate_topic_name>
 800efc2:	b1f0      	cbz	r0, 800f002 <create_topic+0x82>
 800efc4:	4d14      	ldr	r5, [pc, #80]	; (800f018 <create_topic+0x98>)
 800efc6:	4640      	mov	r0, r8
 800efc8:	4629      	mov	r1, r5
 800efca:	2264      	movs	r2, #100	; 0x64
 800efcc:	f7f9 fe6c 	bl	8008ca8 <generate_type_name>
 800efd0:	b1b8      	cbz	r0, 800f002 <create_topic+0x82>
 800efd2:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 800efd6:	2106      	movs	r1, #6
 800efd8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800efdc:	9501      	str	r5, [sp, #4]
 800efde:	f8cd a000 	str.w	sl, [sp]
 800efe2:	9102      	str	r1, [sp, #8]
 800efe4:	6811      	ldr	r1, [r2, #0]
 800efe6:	6922      	ldr	r2, [r4, #16]
 800efe8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800efec:	f7fb fd84 	bl	800aaf8 <uxr_buffer_create_topic_bin>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6938      	ldr	r0, [r7, #16]
 800eff4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800eff8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800effc:	f7f9 fe1e 	bl	8008c3c <run_xrce_session>
 800f000:	b918      	cbnz	r0, 800f00a <create_topic+0x8a>
 800f002:	4620      	mov	r0, r4
 800f004:	f7f9 fdc2 	bl	8008b8c <rmw_uxrce_fini_topic_memory>
 800f008:	2400      	movs	r4, #0
 800f00a:	4620      	mov	r0, r4
 800f00c:	b004      	add	sp, #16
 800f00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f012:	bf00      	nop
 800f014:	2000c620 	.word	0x2000c620
 800f018:	20009248 	.word	0x20009248
 800f01c:	2000920c 	.word	0x2000920c

0800f020 <destroy_topic>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	6985      	ldr	r5, [r0, #24]
 800f024:	b1d5      	cbz	r5, 800f05c <destroy_topic+0x3c>
 800f026:	4604      	mov	r4, r0
 800f028:	6928      	ldr	r0, [r5, #16]
 800f02a:	6922      	ldr	r2, [r4, #16]
 800f02c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f030:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f034:	6819      	ldr	r1, [r3, #0]
 800f036:	f7fb fce1 	bl	800a9fc <uxr_buffer_delete_entity>
 800f03a:	4602      	mov	r2, r0
 800f03c:	6928      	ldr	r0, [r5, #16]
 800f03e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f042:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f046:	f7f9 fdf9 	bl	8008c3c <run_xrce_session>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	4620      	mov	r0, r4
 800f04e:	bf14      	ite	ne
 800f050:	2400      	movne	r4, #0
 800f052:	2402      	moveq	r4, #2
 800f054:	f7f9 fd9a 	bl	8008b8c <rmw_uxrce_fini_topic_memory>
 800f058:	4620      	mov	r0, r4
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	2401      	movs	r4, #1
 800f05e:	4620      	mov	r0, r4
 800f060:	bd38      	pop	{r3, r4, r5, pc}
 800f062:	bf00      	nop

0800f064 <create_node>:
 800f064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f068:	b083      	sub	sp, #12
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d05f      	beq.n	800f12e <create_node+0xca>
 800f06e:	4606      	mov	r6, r0
 800f070:	4835      	ldr	r0, [pc, #212]	; (800f148 <create_node+0xe4>)
 800f072:	460f      	mov	r7, r1
 800f074:	4690      	mov	r8, r2
 800f076:	461d      	mov	r5, r3
 800f078:	f7ff fcd0 	bl	800ea1c <get_memory>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d056      	beq.n	800f12e <create_node+0xca>
 800f080:	68c4      	ldr	r4, [r0, #12]
 800f082:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800f084:	6123      	str	r3, [r4, #16]
 800f086:	f7ff fd31 	bl	800eaec <rmw_get_implementation_identifier>
 800f08a:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800f08e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f092:	f8c4 9020 	str.w	r9, [r4, #32]
 800f096:	4630      	mov	r0, r6
 800f098:	f7f1 f8c4 	bl	8000224 <strlen>
 800f09c:	1c42      	adds	r2, r0, #1
 800f09e:	2a3c      	cmp	r2, #60	; 0x3c
 800f0a0:	f104 0518 	add.w	r5, r4, #24
 800f0a4:	d840      	bhi.n	800f128 <create_node+0xc4>
 800f0a6:	4648      	mov	r0, r9
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800f0ae:	f002 fdac 	bl	8011c0a <memcpy>
 800f0b2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800f0b6:	4638      	mov	r0, r7
 800f0b8:	f7f1 f8b4 	bl	8000224 <strlen>
 800f0bc:	1c42      	adds	r2, r0, #1
 800f0be:	2a3c      	cmp	r2, #60	; 0x3c
 800f0c0:	d832      	bhi.n	800f128 <create_node+0xc4>
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	4648      	mov	r0, r9
 800f0c6:	f002 fda0 	bl	8011c0a <memcpy>
 800f0ca:	f241 5394 	movw	r3, #5524	; 0x1594
 800f0ce:	6922      	ldr	r2, [r4, #16]
 800f0d0:	5ad0      	ldrh	r0, [r2, r3]
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	eb00 0c01 	add.w	ip, r0, r1
 800f0d8:	f822 c003 	strh.w	ip, [r2, r3]
 800f0dc:	f7fb fde6 	bl	800acac <uxr_object_id>
 800f0e0:	6160      	str	r0, [r4, #20]
 800f0e2:	783b      	ldrb	r3, [r7, #0]
 800f0e4:	2b2f      	cmp	r3, #47	; 0x2f
 800f0e6:	d127      	bne.n	800f138 <create_node+0xd4>
 800f0e8:	787b      	ldrb	r3, [r7, #1]
 800f0ea:	bb2b      	cbnz	r3, 800f138 <create_node+0xd4>
 800f0ec:	4a17      	ldr	r2, [pc, #92]	; (800f14c <create_node+0xe8>)
 800f0ee:	4818      	ldr	r0, [pc, #96]	; (800f150 <create_node+0xec>)
 800f0f0:	4633      	mov	r3, r6
 800f0f2:	213c      	movs	r1, #60	; 0x3c
 800f0f4:	f002 fbf6 	bl	80118e4 <sniprintf>
 800f0f8:	6920      	ldr	r0, [r4, #16]
 800f0fa:	4b15      	ldr	r3, [pc, #84]	; (800f150 <create_node+0xec>)
 800f0fc:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	2306      	movs	r3, #6
 800f104:	9301      	str	r3, [sp, #4]
 800f106:	6811      	ldr	r1, [r2, #0]
 800f108:	6962      	ldr	r2, [r4, #20]
 800f10a:	fa1f f388 	uxth.w	r3, r8
 800f10e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f112:	f7fb fcbf 	bl	800aa94 <uxr_buffer_create_participant_bin>
 800f116:	4602      	mov	r2, r0
 800f118:	6920      	ldr	r0, [r4, #16]
 800f11a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f11e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f122:	f7f9 fd8b 	bl	8008c3c <run_xrce_session>
 800f126:	b918      	cbnz	r0, 800f130 <create_node+0xcc>
 800f128:	4628      	mov	r0, r5
 800f12a:	f7f9 fcbf 	bl	8008aac <rmw_uxrce_fini_node_memory>
 800f12e:	2500      	movs	r5, #0
 800f130:	4628      	mov	r0, r5
 800f132:	b003      	add	sp, #12
 800f134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f138:	4a06      	ldr	r2, [pc, #24]	; (800f154 <create_node+0xf0>)
 800f13a:	9600      	str	r6, [sp, #0]
 800f13c:	463b      	mov	r3, r7
 800f13e:	213c      	movs	r1, #60	; 0x3c
 800f140:	4803      	ldr	r0, [pc, #12]	; (800f150 <create_node+0xec>)
 800f142:	f002 fbcf 	bl	80118e4 <sniprintf>
 800f146:	e7d7      	b.n	800f0f8 <create_node+0x94>
 800f148:	2000c45c 	.word	0x2000c45c
 800f14c:	08012c8c 	.word	0x08012c8c
 800f150:	200092ac 	.word	0x200092ac
 800f154:	08012d10 	.word	0x08012d10

0800f158 <rmw_create_node>:
 800f158:	b199      	cbz	r1, 800f182 <rmw_create_node+0x2a>
 800f15a:	b430      	push	{r4, r5}
 800f15c:	4615      	mov	r5, r2
 800f15e:	461a      	mov	r2, r3
 800f160:	780b      	ldrb	r3, [r1, #0]
 800f162:	460c      	mov	r4, r1
 800f164:	b153      	cbz	r3, 800f17c <rmw_create_node+0x24>
 800f166:	b14d      	cbz	r5, 800f17c <rmw_create_node+0x24>
 800f168:	782b      	ldrb	r3, [r5, #0]
 800f16a:	b13b      	cbz	r3, 800f17c <rmw_create_node+0x24>
 800f16c:	b902      	cbnz	r2, 800f170 <rmw_create_node+0x18>
 800f16e:	69c2      	ldr	r2, [r0, #28]
 800f170:	4603      	mov	r3, r0
 800f172:	4629      	mov	r1, r5
 800f174:	4620      	mov	r0, r4
 800f176:	bc30      	pop	{r4, r5}
 800f178:	f7ff bf74 	b.w	800f064 <create_node>
 800f17c:	2000      	movs	r0, #0
 800f17e:	bc30      	pop	{r4, r5}
 800f180:	4770      	bx	lr
 800f182:	2000      	movs	r0, #0
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop

0800f188 <rmw_destroy_node>:
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	b328      	cbz	r0, 800f1d8 <rmw_destroy_node+0x50>
 800f18c:	4607      	mov	r7, r0
 800f18e:	6800      	ldr	r0, [r0, #0]
 800f190:	b120      	cbz	r0, 800f19c <rmw_destroy_node+0x14>
 800f192:	4b36      	ldr	r3, [pc, #216]	; (800f26c <rmw_destroy_node+0xe4>)
 800f194:	6819      	ldr	r1, [r3, #0]
 800f196:	f7f1 f83b 	bl	8000210 <strcmp>
 800f19a:	b9e8      	cbnz	r0, 800f1d8 <rmw_destroy_node+0x50>
 800f19c:	687d      	ldr	r5, [r7, #4]
 800f19e:	b1dd      	cbz	r5, 800f1d8 <rmw_destroy_node+0x50>
 800f1a0:	4b33      	ldr	r3, [pc, #204]	; (800f270 <rmw_destroy_node+0xe8>)
 800f1a2:	681c      	ldr	r4, [r3, #0]
 800f1a4:	2c00      	cmp	r4, #0
 800f1a6:	d05f      	beq.n	800f268 <rmw_destroy_node+0xe0>
 800f1a8:	2600      	movs	r6, #0
 800f1aa:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f1ae:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800f1b2:	429d      	cmp	r5, r3
 800f1b4:	d013      	beq.n	800f1de <rmw_destroy_node+0x56>
 800f1b6:	2c00      	cmp	r4, #0
 800f1b8:	d1f7      	bne.n	800f1aa <rmw_destroy_node+0x22>
 800f1ba:	4b2e      	ldr	r3, [pc, #184]	; (800f274 <rmw_destroy_node+0xec>)
 800f1bc:	681c      	ldr	r4, [r3, #0]
 800f1be:	b1c4      	cbz	r4, 800f1f2 <rmw_destroy_node+0x6a>
 800f1c0:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f1c4:	6a0b      	ldr	r3, [r1, #32]
 800f1c6:	429d      	cmp	r5, r3
 800f1c8:	d1f9      	bne.n	800f1be <rmw_destroy_node+0x36>
 800f1ca:	317c      	adds	r1, #124	; 0x7c
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	f000 f8a1 	bl	800f314 <rmw_destroy_subscription>
 800f1d2:	2801      	cmp	r0, #1
 800f1d4:	4606      	mov	r6, r0
 800f1d6:	d1f2      	bne.n	800f1be <rmw_destroy_node+0x36>
 800f1d8:	2601      	movs	r6, #1
 800f1da:	4630      	mov	r0, r6
 800f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1de:	3184      	adds	r1, #132	; 0x84
 800f1e0:	4638      	mov	r0, r7
 800f1e2:	f7f9 fae3 	bl	80087ac <rmw_destroy_publisher>
 800f1e6:	2801      	cmp	r0, #1
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	d0f5      	beq.n	800f1d8 <rmw_destroy_node+0x50>
 800f1ec:	2c00      	cmp	r4, #0
 800f1ee:	d1dc      	bne.n	800f1aa <rmw_destroy_node+0x22>
 800f1f0:	e7e3      	b.n	800f1ba <rmw_destroy_node+0x32>
 800f1f2:	4b21      	ldr	r3, [pc, #132]	; (800f278 <rmw_destroy_node+0xf0>)
 800f1f4:	681c      	ldr	r4, [r3, #0]
 800f1f6:	b16c      	cbz	r4, 800f214 <rmw_destroy_node+0x8c>
 800f1f8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f1fc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f1fe:	429d      	cmp	r5, r3
 800f200:	d1f9      	bne.n	800f1f6 <rmw_destroy_node+0x6e>
 800f202:	317c      	adds	r1, #124	; 0x7c
 800f204:	4638      	mov	r0, r7
 800f206:	f000 f841 	bl	800f28c <rmw_destroy_service>
 800f20a:	2801      	cmp	r0, #1
 800f20c:	4606      	mov	r6, r0
 800f20e:	d0e3      	beq.n	800f1d8 <rmw_destroy_node+0x50>
 800f210:	2c00      	cmp	r4, #0
 800f212:	d1f1      	bne.n	800f1f8 <rmw_destroy_node+0x70>
 800f214:	4b19      	ldr	r3, [pc, #100]	; (800f27c <rmw_destroy_node+0xf4>)
 800f216:	681c      	ldr	r4, [r3, #0]
 800f218:	b16c      	cbz	r4, 800f236 <rmw_destroy_node+0xae>
 800f21a:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800f21e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f220:	429d      	cmp	r5, r3
 800f222:	d1f9      	bne.n	800f218 <rmw_destroy_node+0x90>
 800f224:	317c      	adds	r1, #124	; 0x7c
 800f226:	4638      	mov	r0, r7
 800f228:	f7ff fc1c 	bl	800ea64 <rmw_destroy_client>
 800f22c:	2801      	cmp	r0, #1
 800f22e:	4606      	mov	r6, r0
 800f230:	d0d2      	beq.n	800f1d8 <rmw_destroy_node+0x50>
 800f232:	2c00      	cmp	r4, #0
 800f234:	d1f1      	bne.n	800f21a <rmw_destroy_node+0x92>
 800f236:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800f23a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f23e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f242:	6819      	ldr	r1, [r3, #0]
 800f244:	f7fb fbda 	bl	800a9fc <uxr_buffer_delete_entity>
 800f248:	4602      	mov	r2, r0
 800f24a:	6928      	ldr	r0, [r5, #16]
 800f24c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f250:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f254:	f7f9 fcf2 	bl	8008c3c <run_xrce_session>
 800f258:	2800      	cmp	r0, #0
 800f25a:	bf08      	it	eq
 800f25c:	2602      	moveq	r6, #2
 800f25e:	4638      	mov	r0, r7
 800f260:	f7f9 fc24 	bl	8008aac <rmw_uxrce_fini_node_memory>
 800f264:	4630      	mov	r0, r6
 800f266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f268:	4626      	mov	r6, r4
 800f26a:	e7a6      	b.n	800f1ba <rmw_destroy_node+0x32>
 800f26c:	080131a4 	.word	0x080131a4
 800f270:	20009498 	.word	0x20009498
 800f274:	2000c6f4 	.word	0x2000c6f4
 800f278:	2000c6e4 	.word	0x2000c6e4
 800f27c:	20009d18 	.word	0x20009d18

0800f280 <rmw_node_get_graph_guard_condition>:
 800f280:	6843      	ldr	r3, [r0, #4]
 800f282:	6918      	ldr	r0, [r3, #16]
 800f284:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop

0800f28c <rmw_destroy_service>:
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	b128      	cbz	r0, 800f29c <rmw_destroy_service+0x10>
 800f290:	4604      	mov	r4, r0
 800f292:	6800      	ldr	r0, [r0, #0]
 800f294:	460d      	mov	r5, r1
 800f296:	f7f9 fd51 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800f29a:	b910      	cbnz	r0, 800f2a2 <rmw_destroy_service+0x16>
 800f29c:	2401      	movs	r4, #1
 800f29e:	4620      	mov	r0, r4
 800f2a0:	bd70      	pop	{r4, r5, r6, pc}
 800f2a2:	6863      	ldr	r3, [r4, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0f9      	beq.n	800f29c <rmw_destroy_service+0x10>
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	d0f7      	beq.n	800f29c <rmw_destroy_service+0x10>
 800f2ac:	6828      	ldr	r0, [r5, #0]
 800f2ae:	f7f9 fd45 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d0f2      	beq.n	800f29c <rmw_destroy_service+0x10>
 800f2b6:	686e      	ldr	r6, [r5, #4]
 800f2b8:	2e00      	cmp	r6, #0
 800f2ba:	d0ef      	beq.n	800f29c <rmw_destroy_service+0x10>
 800f2bc:	6864      	ldr	r4, [r4, #4]
 800f2be:	6932      	ldr	r2, [r6, #16]
 800f2c0:	6920      	ldr	r0, [r4, #16]
 800f2c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f2c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f2ca:	6819      	ldr	r1, [r3, #0]
 800f2cc:	f001 f888 	bl	80103e0 <uxr_buffer_cancel_data>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	6920      	ldr	r0, [r4, #16]
 800f2d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f2d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f2dc:	f7f9 fcae 	bl	8008c3c <run_xrce_session>
 800f2e0:	6920      	ldr	r0, [r4, #16]
 800f2e2:	6932      	ldr	r2, [r6, #16]
 800f2e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f2e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f2ec:	6819      	ldr	r1, [r3, #0]
 800f2ee:	f7fb fb85 	bl	800a9fc <uxr_buffer_delete_entity>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	6920      	ldr	r0, [r4, #16]
 800f2f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f2fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f2fe:	f7f9 fc9d 	bl	8008c3c <run_xrce_session>
 800f302:	2800      	cmp	r0, #0
 800f304:	4628      	mov	r0, r5
 800f306:	bf14      	ite	ne
 800f308:	2400      	movne	r4, #0
 800f30a:	2402      	moveq	r4, #2
 800f30c:	f7f9 fc12 	bl	8008b34 <rmw_uxrce_fini_service_memory>
 800f310:	e7c5      	b.n	800f29e <rmw_destroy_service+0x12>
 800f312:	bf00      	nop

0800f314 <rmw_destroy_subscription>:
 800f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f316:	b128      	cbz	r0, 800f324 <rmw_destroy_subscription+0x10>
 800f318:	4604      	mov	r4, r0
 800f31a:	6800      	ldr	r0, [r0, #0]
 800f31c:	460d      	mov	r5, r1
 800f31e:	f7f9 fd0d 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800f322:	b910      	cbnz	r0, 800f32a <rmw_destroy_subscription+0x16>
 800f324:	2401      	movs	r4, #1
 800f326:	4620      	mov	r0, r4
 800f328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f32a:	6863      	ldr	r3, [r4, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0f9      	beq.n	800f324 <rmw_destroy_subscription+0x10>
 800f330:	2d00      	cmp	r5, #0
 800f332:	d0f7      	beq.n	800f324 <rmw_destroy_subscription+0x10>
 800f334:	6828      	ldr	r0, [r5, #0]
 800f336:	f7f9 fd01 	bl	8008d3c <is_uxrce_rmw_identifier_valid>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0f2      	beq.n	800f324 <rmw_destroy_subscription+0x10>
 800f33e:	686c      	ldr	r4, [r5, #4]
 800f340:	2c00      	cmp	r4, #0
 800f342:	d0ef      	beq.n	800f324 <rmw_destroy_subscription+0x10>
 800f344:	6a26      	ldr	r6, [r4, #32]
 800f346:	6962      	ldr	r2, [r4, #20]
 800f348:	6930      	ldr	r0, [r6, #16]
 800f34a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f34e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f352:	6819      	ldr	r1, [r3, #0]
 800f354:	f001 f844 	bl	80103e0 <uxr_buffer_cancel_data>
 800f358:	4602      	mov	r2, r0
 800f35a:	6930      	ldr	r0, [r6, #16]
 800f35c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f360:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f364:	f7f9 fc6a 	bl	8008c3c <run_xrce_session>
 800f368:	69e0      	ldr	r0, [r4, #28]
 800f36a:	f7ff fe59 	bl	800f020 <destroy_topic>
 800f36e:	6a23      	ldr	r3, [r4, #32]
 800f370:	6962      	ldr	r2, [r4, #20]
 800f372:	6918      	ldr	r0, [r3, #16]
 800f374:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f378:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f37c:	6819      	ldr	r1, [r3, #0]
 800f37e:	f7fb fb3d 	bl	800a9fc <uxr_buffer_delete_entity>
 800f382:	6a21      	ldr	r1, [r4, #32]
 800f384:	6922      	ldr	r2, [r4, #16]
 800f386:	4603      	mov	r3, r0
 800f388:	6908      	ldr	r0, [r1, #16]
 800f38a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f38e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f392:	6809      	ldr	r1, [r1, #0]
 800f394:	461c      	mov	r4, r3
 800f396:	f7fb fb31 	bl	800a9fc <uxr_buffer_delete_entity>
 800f39a:	4607      	mov	r7, r0
 800f39c:	6930      	ldr	r0, [r6, #16]
 800f39e:	4622      	mov	r2, r4
 800f3a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f3a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f3a8:	f7f9 fc48 	bl	8008c3c <run_xrce_session>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	6930      	ldr	r0, [r6, #16]
 800f3b0:	463a      	mov	r2, r7
 800f3b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f3b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f3ba:	f7f9 fc3f 	bl	8008c3c <run_xrce_session>
 800f3be:	b12c      	cbz	r4, 800f3cc <rmw_destroy_subscription+0xb8>
 800f3c0:	b120      	cbz	r0, 800f3cc <rmw_destroy_subscription+0xb8>
 800f3c2:	2400      	movs	r4, #0
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f7f9 fb9f 	bl	8008b08 <rmw_uxrce_fini_subscription_memory>
 800f3ca:	e7ac      	b.n	800f326 <rmw_destroy_subscription+0x12>
 800f3cc:	2402      	movs	r4, #2
 800f3ce:	e7f9      	b.n	800f3c4 <rmw_destroy_subscription+0xb0>

0800f3d0 <rmw_uxrce_transport_init>:
 800f3d0:	b508      	push	{r3, lr}
 800f3d2:	b108      	cbz	r0, 800f3d8 <rmw_uxrce_transport_init+0x8>
 800f3d4:	f100 0210 	add.w	r2, r0, #16
 800f3d8:	b139      	cbz	r1, 800f3ea <rmw_uxrce_transport_init+0x1a>
 800f3da:	6949      	ldr	r1, [r1, #20]
 800f3dc:	4610      	mov	r0, r2
 800f3de:	f000 fa95 	bl	800f90c <uxr_init_custom_transport>
 800f3e2:	f080 0001 	eor.w	r0, r0, #1
 800f3e6:	b2c0      	uxtb	r0, r0
 800f3e8:	bd08      	pop	{r3, pc}
 800f3ea:	4b04      	ldr	r3, [pc, #16]	; (800f3fc <rmw_uxrce_transport_init+0x2c>)
 800f3ec:	4610      	mov	r0, r2
 800f3ee:	6859      	ldr	r1, [r3, #4]
 800f3f0:	f000 fa8c 	bl	800f90c <uxr_init_custom_transport>
 800f3f4:	f080 0001 	eor.w	r0, r0, #1
 800f3f8:	b2c0      	uxtb	r0, r0
 800f3fa:	bd08      	pop	{r3, pc}
 800f3fc:	20009468 	.word	0x20009468

0800f400 <rmw_uros_epoch_nanos>:
 800f400:	4b05      	ldr	r3, [pc, #20]	; (800f418 <rmw_uros_epoch_nanos+0x18>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	b123      	cbz	r3, 800f410 <rmw_uros_epoch_nanos+0x10>
 800f406:	68d8      	ldr	r0, [r3, #12]
 800f408:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f40c:	f7fb bd90 	b.w	800af30 <uxr_epoch_nanos>
 800f410:	2000      	movs	r0, #0
 800f412:	2100      	movs	r1, #0
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	2000c630 	.word	0x2000c630

0800f41c <ucdr_serialize_endian_array_char>:
 800f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f420:	4619      	mov	r1, r3
 800f422:	461e      	mov	r6, r3
 800f424:	4690      	mov	r8, r2
 800f426:	4604      	mov	r4, r0
 800f428:	f7fb f9a2 	bl	800a770 <ucdr_check_buffer_available_for>
 800f42c:	b9e0      	cbnz	r0, 800f468 <ucdr_serialize_endian_array_char+0x4c>
 800f42e:	4637      	mov	r7, r6
 800f430:	e009      	b.n	800f446 <ucdr_serialize_endian_array_char+0x2a>
 800f432:	68a0      	ldr	r0, [r4, #8]
 800f434:	f002 fbe9 	bl	8011c0a <memcpy>
 800f438:	68a2      	ldr	r2, [r4, #8]
 800f43a:	6923      	ldr	r3, [r4, #16]
 800f43c:	442a      	add	r2, r5
 800f43e:	442b      	add	r3, r5
 800f440:	1b7f      	subs	r7, r7, r5
 800f442:	60a2      	str	r2, [r4, #8]
 800f444:	6123      	str	r3, [r4, #16]
 800f446:	2201      	movs	r2, #1
 800f448:	4639      	mov	r1, r7
 800f44a:	4620      	mov	r0, r4
 800f44c:	f7fb fa16 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f450:	1bf1      	subs	r1, r6, r7
 800f452:	4441      	add	r1, r8
 800f454:	4605      	mov	r5, r0
 800f456:	4602      	mov	r2, r0
 800f458:	2800      	cmp	r0, #0
 800f45a:	d1ea      	bne.n	800f432 <ucdr_serialize_endian_array_char+0x16>
 800f45c:	2301      	movs	r3, #1
 800f45e:	7da0      	ldrb	r0, [r4, #22]
 800f460:	7563      	strb	r3, [r4, #21]
 800f462:	4058      	eors	r0, r3
 800f464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f468:	4632      	mov	r2, r6
 800f46a:	68a0      	ldr	r0, [r4, #8]
 800f46c:	4641      	mov	r1, r8
 800f46e:	f002 fbcc 	bl	8011c0a <memcpy>
 800f472:	68a2      	ldr	r2, [r4, #8]
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	4432      	add	r2, r6
 800f478:	4433      	add	r3, r6
 800f47a:	60a2      	str	r2, [r4, #8]
 800f47c:	6123      	str	r3, [r4, #16]
 800f47e:	e7ed      	b.n	800f45c <ucdr_serialize_endian_array_char+0x40>

0800f480 <ucdr_deserialize_endian_array_char>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	4619      	mov	r1, r3
 800f486:	461e      	mov	r6, r3
 800f488:	4690      	mov	r8, r2
 800f48a:	4604      	mov	r4, r0
 800f48c:	f7fb f970 	bl	800a770 <ucdr_check_buffer_available_for>
 800f490:	b9e0      	cbnz	r0, 800f4cc <ucdr_deserialize_endian_array_char+0x4c>
 800f492:	4637      	mov	r7, r6
 800f494:	e009      	b.n	800f4aa <ucdr_deserialize_endian_array_char+0x2a>
 800f496:	68a1      	ldr	r1, [r4, #8]
 800f498:	f002 fbb7 	bl	8011c0a <memcpy>
 800f49c:	68a2      	ldr	r2, [r4, #8]
 800f49e:	6923      	ldr	r3, [r4, #16]
 800f4a0:	442a      	add	r2, r5
 800f4a2:	442b      	add	r3, r5
 800f4a4:	1b7f      	subs	r7, r7, r5
 800f4a6:	60a2      	str	r2, [r4, #8]
 800f4a8:	6123      	str	r3, [r4, #16]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4639      	mov	r1, r7
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f7fb f9e4 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	1bf0      	subs	r0, r6, r7
 800f4b8:	4440      	add	r0, r8
 800f4ba:	462a      	mov	r2, r5
 800f4bc:	2d00      	cmp	r5, #0
 800f4be:	d1ea      	bne.n	800f496 <ucdr_deserialize_endian_array_char+0x16>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	7da0      	ldrb	r0, [r4, #22]
 800f4c4:	7563      	strb	r3, [r4, #21]
 800f4c6:	4058      	eors	r0, r3
 800f4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4cc:	4632      	mov	r2, r6
 800f4ce:	68a1      	ldr	r1, [r4, #8]
 800f4d0:	4640      	mov	r0, r8
 800f4d2:	f002 fb9a 	bl	8011c0a <memcpy>
 800f4d6:	68a2      	ldr	r2, [r4, #8]
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	4432      	add	r2, r6
 800f4dc:	4433      	add	r3, r6
 800f4de:	60a2      	str	r2, [r4, #8]
 800f4e0:	6123      	str	r3, [r4, #16]
 800f4e2:	e7ed      	b.n	800f4c0 <ucdr_deserialize_endian_array_char+0x40>

0800f4e4 <ucdr_serialize_array_uint8_t>:
 800f4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e8:	4688      	mov	r8, r1
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4616      	mov	r6, r2
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	f7fb f93e 	bl	800a770 <ucdr_check_buffer_available_for>
 800f4f4:	b9e0      	cbnz	r0, 800f530 <ucdr_serialize_array_uint8_t+0x4c>
 800f4f6:	4637      	mov	r7, r6
 800f4f8:	e009      	b.n	800f50e <ucdr_serialize_array_uint8_t+0x2a>
 800f4fa:	68a0      	ldr	r0, [r4, #8]
 800f4fc:	f002 fb85 	bl	8011c0a <memcpy>
 800f500:	68a2      	ldr	r2, [r4, #8]
 800f502:	6923      	ldr	r3, [r4, #16]
 800f504:	442a      	add	r2, r5
 800f506:	442b      	add	r3, r5
 800f508:	1b7f      	subs	r7, r7, r5
 800f50a:	60a2      	str	r2, [r4, #8]
 800f50c:	6123      	str	r3, [r4, #16]
 800f50e:	2201      	movs	r2, #1
 800f510:	4639      	mov	r1, r7
 800f512:	4620      	mov	r0, r4
 800f514:	f7fb f9b2 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f518:	1bf1      	subs	r1, r6, r7
 800f51a:	4441      	add	r1, r8
 800f51c:	4605      	mov	r5, r0
 800f51e:	4602      	mov	r2, r0
 800f520:	2800      	cmp	r0, #0
 800f522:	d1ea      	bne.n	800f4fa <ucdr_serialize_array_uint8_t+0x16>
 800f524:	2301      	movs	r3, #1
 800f526:	7da0      	ldrb	r0, [r4, #22]
 800f528:	7563      	strb	r3, [r4, #21]
 800f52a:	4058      	eors	r0, r3
 800f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f530:	4632      	mov	r2, r6
 800f532:	68a0      	ldr	r0, [r4, #8]
 800f534:	4641      	mov	r1, r8
 800f536:	f002 fb68 	bl	8011c0a <memcpy>
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	6922      	ldr	r2, [r4, #16]
 800f53e:	4433      	add	r3, r6
 800f540:	4432      	add	r2, r6
 800f542:	60a3      	str	r3, [r4, #8]
 800f544:	6122      	str	r2, [r4, #16]
 800f546:	e7ed      	b.n	800f524 <ucdr_serialize_array_uint8_t+0x40>

0800f548 <ucdr_serialize_endian_array_uint8_t>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	4619      	mov	r1, r3
 800f54e:	461e      	mov	r6, r3
 800f550:	4690      	mov	r8, r2
 800f552:	4604      	mov	r4, r0
 800f554:	f7fb f90c 	bl	800a770 <ucdr_check_buffer_available_for>
 800f558:	b9e0      	cbnz	r0, 800f594 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f55a:	4637      	mov	r7, r6
 800f55c:	e009      	b.n	800f572 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f55e:	68a0      	ldr	r0, [r4, #8]
 800f560:	f002 fb53 	bl	8011c0a <memcpy>
 800f564:	68a2      	ldr	r2, [r4, #8]
 800f566:	6923      	ldr	r3, [r4, #16]
 800f568:	442a      	add	r2, r5
 800f56a:	442b      	add	r3, r5
 800f56c:	1b7f      	subs	r7, r7, r5
 800f56e:	60a2      	str	r2, [r4, #8]
 800f570:	6123      	str	r3, [r4, #16]
 800f572:	2201      	movs	r2, #1
 800f574:	4639      	mov	r1, r7
 800f576:	4620      	mov	r0, r4
 800f578:	f7fb f980 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f57c:	1bf1      	subs	r1, r6, r7
 800f57e:	4441      	add	r1, r8
 800f580:	4605      	mov	r5, r0
 800f582:	4602      	mov	r2, r0
 800f584:	2800      	cmp	r0, #0
 800f586:	d1ea      	bne.n	800f55e <ucdr_serialize_endian_array_uint8_t+0x16>
 800f588:	2301      	movs	r3, #1
 800f58a:	7da0      	ldrb	r0, [r4, #22]
 800f58c:	7563      	strb	r3, [r4, #21]
 800f58e:	4058      	eors	r0, r3
 800f590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f594:	4632      	mov	r2, r6
 800f596:	68a0      	ldr	r0, [r4, #8]
 800f598:	4641      	mov	r1, r8
 800f59a:	f002 fb36 	bl	8011c0a <memcpy>
 800f59e:	68a2      	ldr	r2, [r4, #8]
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	4432      	add	r2, r6
 800f5a4:	4433      	add	r3, r6
 800f5a6:	60a2      	str	r2, [r4, #8]
 800f5a8:	6123      	str	r3, [r4, #16]
 800f5aa:	e7ed      	b.n	800f588 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f5ac <ucdr_deserialize_array_uint8_t>:
 800f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	4688      	mov	r8, r1
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	4616      	mov	r6, r2
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	f7fb f8da 	bl	800a770 <ucdr_check_buffer_available_for>
 800f5bc:	b9e0      	cbnz	r0, 800f5f8 <ucdr_deserialize_array_uint8_t+0x4c>
 800f5be:	4637      	mov	r7, r6
 800f5c0:	e009      	b.n	800f5d6 <ucdr_deserialize_array_uint8_t+0x2a>
 800f5c2:	68a1      	ldr	r1, [r4, #8]
 800f5c4:	f002 fb21 	bl	8011c0a <memcpy>
 800f5c8:	68a2      	ldr	r2, [r4, #8]
 800f5ca:	6923      	ldr	r3, [r4, #16]
 800f5cc:	442a      	add	r2, r5
 800f5ce:	442b      	add	r3, r5
 800f5d0:	1b7f      	subs	r7, r7, r5
 800f5d2:	60a2      	str	r2, [r4, #8]
 800f5d4:	6123      	str	r3, [r4, #16]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	4639      	mov	r1, r7
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7fb f94e 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f5e0:	4605      	mov	r5, r0
 800f5e2:	1bf0      	subs	r0, r6, r7
 800f5e4:	4440      	add	r0, r8
 800f5e6:	462a      	mov	r2, r5
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	d1ea      	bne.n	800f5c2 <ucdr_deserialize_array_uint8_t+0x16>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	7da0      	ldrb	r0, [r4, #22]
 800f5f0:	7563      	strb	r3, [r4, #21]
 800f5f2:	4058      	eors	r0, r3
 800f5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f8:	4632      	mov	r2, r6
 800f5fa:	68a1      	ldr	r1, [r4, #8]
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	f002 fb04 	bl	8011c0a <memcpy>
 800f602:	68a3      	ldr	r3, [r4, #8]
 800f604:	6922      	ldr	r2, [r4, #16]
 800f606:	4433      	add	r3, r6
 800f608:	4432      	add	r2, r6
 800f60a:	60a3      	str	r3, [r4, #8]
 800f60c:	6122      	str	r2, [r4, #16]
 800f60e:	e7ed      	b.n	800f5ec <ucdr_deserialize_array_uint8_t+0x40>

0800f610 <ucdr_deserialize_endian_array_uint8_t>:
 800f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	4619      	mov	r1, r3
 800f616:	461e      	mov	r6, r3
 800f618:	4690      	mov	r8, r2
 800f61a:	4604      	mov	r4, r0
 800f61c:	f7fb f8a8 	bl	800a770 <ucdr_check_buffer_available_for>
 800f620:	b9e0      	cbnz	r0, 800f65c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f622:	4637      	mov	r7, r6
 800f624:	e009      	b.n	800f63a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f626:	68a1      	ldr	r1, [r4, #8]
 800f628:	f002 faef 	bl	8011c0a <memcpy>
 800f62c:	68a2      	ldr	r2, [r4, #8]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	442a      	add	r2, r5
 800f632:	442b      	add	r3, r5
 800f634:	1b7f      	subs	r7, r7, r5
 800f636:	60a2      	str	r2, [r4, #8]
 800f638:	6123      	str	r3, [r4, #16]
 800f63a:	2201      	movs	r2, #1
 800f63c:	4639      	mov	r1, r7
 800f63e:	4620      	mov	r0, r4
 800f640:	f7fb f91c 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f644:	4605      	mov	r5, r0
 800f646:	1bf0      	subs	r0, r6, r7
 800f648:	4440      	add	r0, r8
 800f64a:	462a      	mov	r2, r5
 800f64c:	2d00      	cmp	r5, #0
 800f64e:	d1ea      	bne.n	800f626 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f650:	2301      	movs	r3, #1
 800f652:	7da0      	ldrb	r0, [r4, #22]
 800f654:	7563      	strb	r3, [r4, #21]
 800f656:	4058      	eors	r0, r3
 800f658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65c:	4632      	mov	r2, r6
 800f65e:	68a1      	ldr	r1, [r4, #8]
 800f660:	4640      	mov	r0, r8
 800f662:	f002 fad2 	bl	8011c0a <memcpy>
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	4432      	add	r2, r6
 800f66c:	4433      	add	r3, r6
 800f66e:	60a2      	str	r2, [r4, #8]
 800f670:	6123      	str	r3, [r4, #16]
 800f672:	e7ed      	b.n	800f650 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f674 <ucdr_serialize_endian_array_float>:
 800f674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f678:	460f      	mov	r7, r1
 800f67a:	2104      	movs	r1, #4
 800f67c:	4605      	mov	r5, r0
 800f67e:	4614      	mov	r4, r2
 800f680:	461e      	mov	r6, r3
 800f682:	f7fb f8d3 	bl	800a82c <ucdr_buffer_alignment>
 800f686:	4601      	mov	r1, r0
 800f688:	4628      	mov	r0, r5
 800f68a:	f895 8015 	ldrb.w	r8, [r5, #21]
 800f68e:	f7fb f911 	bl	800a8b4 <ucdr_advance_buffer>
 800f692:	2f01      	cmp	r7, #1
 800f694:	f885 8015 	strb.w	r8, [r5, #21]
 800f698:	d00f      	beq.n	800f6ba <ucdr_serialize_endian_array_float+0x46>
 800f69a:	b14e      	cbz	r6, 800f6b0 <ucdr_serialize_endian_array_float+0x3c>
 800f69c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f6a0:	ecb4 0a01 	vldmia	r4!, {s0}
 800f6a4:	4639      	mov	r1, r7
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f7fa fea2 	bl	800a3f0 <ucdr_serialize_endian_float>
 800f6ac:	42a6      	cmp	r6, r4
 800f6ae:	d1f7      	bne.n	800f6a0 <ucdr_serialize_endian_array_float+0x2c>
 800f6b0:	7da8      	ldrb	r0, [r5, #22]
 800f6b2:	f080 0001 	eor.w	r0, r0, #1
 800f6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ba:	00b6      	lsls	r6, r6, #2
 800f6bc:	4631      	mov	r1, r6
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7fb f856 	bl	800a770 <ucdr_check_buffer_available_for>
 800f6c4:	b9f8      	cbnz	r0, 800f706 <ucdr_serialize_endian_array_float+0x92>
 800f6c6:	46b0      	mov	r8, r6
 800f6c8:	e00a      	b.n	800f6e0 <ucdr_serialize_endian_array_float+0x6c>
 800f6ca:	68a8      	ldr	r0, [r5, #8]
 800f6cc:	f002 fa9d 	bl	8011c0a <memcpy>
 800f6d0:	68aa      	ldr	r2, [r5, #8]
 800f6d2:	692b      	ldr	r3, [r5, #16]
 800f6d4:	443a      	add	r2, r7
 800f6d6:	443b      	add	r3, r7
 800f6d8:	eba8 0807 	sub.w	r8, r8, r7
 800f6dc:	60aa      	str	r2, [r5, #8]
 800f6de:	612b      	str	r3, [r5, #16]
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	4641      	mov	r1, r8
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f7fb f8c9 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f6ea:	eba6 0108 	sub.w	r1, r6, r8
 800f6ee:	4421      	add	r1, r4
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d1e8      	bne.n	800f6ca <ucdr_serialize_endian_array_float+0x56>
 800f6f8:	7da8      	ldrb	r0, [r5, #22]
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	756b      	strb	r3, [r5, #21]
 800f6fe:	f080 0001 	eor.w	r0, r0, #1
 800f702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f706:	4632      	mov	r2, r6
 800f708:	68a8      	ldr	r0, [r5, #8]
 800f70a:	4621      	mov	r1, r4
 800f70c:	f002 fa7d 	bl	8011c0a <memcpy>
 800f710:	68aa      	ldr	r2, [r5, #8]
 800f712:	692b      	ldr	r3, [r5, #16]
 800f714:	4432      	add	r2, r6
 800f716:	441e      	add	r6, r3
 800f718:	60aa      	str	r2, [r5, #8]
 800f71a:	612e      	str	r6, [r5, #16]
 800f71c:	e7ec      	b.n	800f6f8 <ucdr_serialize_endian_array_float+0x84>
 800f71e:	bf00      	nop

0800f720 <ucdr_deserialize_endian_array_float>:
 800f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f724:	460f      	mov	r7, r1
 800f726:	2104      	movs	r1, #4
 800f728:	4605      	mov	r5, r0
 800f72a:	4614      	mov	r4, r2
 800f72c:	461e      	mov	r6, r3
 800f72e:	f7fb f87d 	bl	800a82c <ucdr_buffer_alignment>
 800f732:	4601      	mov	r1, r0
 800f734:	4628      	mov	r0, r5
 800f736:	f895 8015 	ldrb.w	r8, [r5, #21]
 800f73a:	f7fb f8bb 	bl	800a8b4 <ucdr_advance_buffer>
 800f73e:	2f01      	cmp	r7, #1
 800f740:	f885 8015 	strb.w	r8, [r5, #21]
 800f744:	d00f      	beq.n	800f766 <ucdr_deserialize_endian_array_float+0x46>
 800f746:	b14e      	cbz	r6, 800f75c <ucdr_deserialize_endian_array_float+0x3c>
 800f748:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f74c:	4622      	mov	r2, r4
 800f74e:	4639      	mov	r1, r7
 800f750:	3404      	adds	r4, #4
 800f752:	4628      	mov	r0, r5
 800f754:	f7fa ff76 	bl	800a644 <ucdr_deserialize_endian_float>
 800f758:	42a6      	cmp	r6, r4
 800f75a:	d1f7      	bne.n	800f74c <ucdr_deserialize_endian_array_float+0x2c>
 800f75c:	7da8      	ldrb	r0, [r5, #22]
 800f75e:	f080 0001 	eor.w	r0, r0, #1
 800f762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f766:	00b6      	lsls	r6, r6, #2
 800f768:	4631      	mov	r1, r6
 800f76a:	4628      	mov	r0, r5
 800f76c:	f7fb f800 	bl	800a770 <ucdr_check_buffer_available_for>
 800f770:	b9f8      	cbnz	r0, 800f7b2 <ucdr_deserialize_endian_array_float+0x92>
 800f772:	46b0      	mov	r8, r6
 800f774:	e00a      	b.n	800f78c <ucdr_deserialize_endian_array_float+0x6c>
 800f776:	68a9      	ldr	r1, [r5, #8]
 800f778:	f002 fa47 	bl	8011c0a <memcpy>
 800f77c:	68aa      	ldr	r2, [r5, #8]
 800f77e:	692b      	ldr	r3, [r5, #16]
 800f780:	443a      	add	r2, r7
 800f782:	443b      	add	r3, r7
 800f784:	eba8 0807 	sub.w	r8, r8, r7
 800f788:	60aa      	str	r2, [r5, #8]
 800f78a:	612b      	str	r3, [r5, #16]
 800f78c:	2204      	movs	r2, #4
 800f78e:	4641      	mov	r1, r8
 800f790:	4628      	mov	r0, r5
 800f792:	f7fb f873 	bl	800a87c <ucdr_check_final_buffer_behavior_array>
 800f796:	4607      	mov	r7, r0
 800f798:	eba6 0008 	sub.w	r0, r6, r8
 800f79c:	4420      	add	r0, r4
 800f79e:	463a      	mov	r2, r7
 800f7a0:	2f00      	cmp	r7, #0
 800f7a2:	d1e8      	bne.n	800f776 <ucdr_deserialize_endian_array_float+0x56>
 800f7a4:	7da8      	ldrb	r0, [r5, #22]
 800f7a6:	2304      	movs	r3, #4
 800f7a8:	756b      	strb	r3, [r5, #21]
 800f7aa:	f080 0001 	eor.w	r0, r0, #1
 800f7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b2:	4632      	mov	r2, r6
 800f7b4:	68a9      	ldr	r1, [r5, #8]
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f002 fa27 	bl	8011c0a <memcpy>
 800f7bc:	68aa      	ldr	r2, [r5, #8]
 800f7be:	692b      	ldr	r3, [r5, #16]
 800f7c0:	4432      	add	r2, r6
 800f7c2:	441e      	add	r6, r3
 800f7c4:	60aa      	str	r2, [r5, #8]
 800f7c6:	612e      	str	r6, [r5, #16]
 800f7c8:	e7ec      	b.n	800f7a4 <ucdr_deserialize_endian_array_float+0x84>
 800f7ca:	bf00      	nop

0800f7cc <ucdr_serialize_string>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	4608      	mov	r0, r1
 800f7d4:	9101      	str	r1, [sp, #4]
 800f7d6:	f7f0 fd25 	bl	8000224 <strlen>
 800f7da:	9901      	ldr	r1, [sp, #4]
 800f7dc:	4602      	mov	r2, r0
 800f7de:	3201      	adds	r2, #1
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	b002      	add	sp, #8
 800f7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7e8:	f7fb b884 	b.w	800a8f4 <ucdr_serialize_sequence_char>

0800f7ec <ucdr_deserialize_string>:
 800f7ec:	b500      	push	{lr}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	ab01      	add	r3, sp, #4
 800f7f2:	f7fb f891 	bl	800a918 <ucdr_deserialize_sequence_char>
 800f7f6:	b003      	add	sp, #12
 800f7f8:	f85d fb04 	ldr.w	pc, [sp], #4

0800f7fc <get_custom_error>:
 800f7fc:	4b01      	ldr	r3, [pc, #4]	; (800f804 <get_custom_error+0x8>)
 800f7fe:	7818      	ldrb	r0, [r3, #0]
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	200092e8 	.word	0x200092e8

0800f808 <recv_custom_msg>:
 800f808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80c:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800f810:	b089      	sub	sp, #36	; 0x24
 800f812:	2600      	movs	r6, #0
 800f814:	4604      	mov	r4, r0
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	468a      	mov	sl, r1
 800f81a:	4693      	mov	fp, r2
 800f81c:	f88d 601e 	strb.w	r6, [sp, #30]
 800f820:	b325      	cbz	r5, 800f86c <recv_custom_msg+0x64>
 800f822:	f200 2902 	addw	r9, r0, #514	; 0x202
 800f826:	f10d 081f 	add.w	r8, sp, #31
 800f82a:	af05      	add	r7, sp, #20
 800f82c:	f10d 061e 	add.w	r6, sp, #30
 800f830:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f834:	e002      	b.n	800f83c <recv_custom_msg+0x34>
 800f836:	9b05      	ldr	r3, [sp, #20]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	dd0f      	ble.n	800f85c <recv_custom_msg+0x54>
 800f83c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f840:	e9cd 5600 	strd	r5, r6, [sp]
 800f844:	4623      	mov	r3, r4
 800f846:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800f84a:	4622      	mov	r2, r4
 800f84c:	4648      	mov	r0, r9
 800f84e:	f001 f8c1 	bl	80109d4 <uxr_read_framed_msg>
 800f852:	2800      	cmp	r0, #0
 800f854:	d0ef      	beq.n	800f836 <recv_custom_msg+0x2e>
 800f856:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f85a:	b1b3      	cbz	r3, 800f88a <recv_custom_msg+0x82>
 800f85c:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <recv_custom_msg+0x94>)
 800f85e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f862:	701a      	strb	r2, [r3, #0]
 800f864:	2000      	movs	r0, #0
 800f866:	b009      	add	sp, #36	; 0x24
 800f868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f86c:	f10d 021f 	add.w	r2, sp, #31
 800f870:	9200      	str	r2, [sp, #0]
 800f872:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800f876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f87a:	4601      	mov	r1, r0
 800f87c:	47a8      	blx	r5
 800f87e:	2800      	cmp	r0, #0
 800f880:	d0ec      	beq.n	800f85c <recv_custom_msg+0x54>
 800f882:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1e8      	bne.n	800f85c <recv_custom_msg+0x54>
 800f88a:	f8cb 0000 	str.w	r0, [fp]
 800f88e:	2001      	movs	r0, #1
 800f890:	f8ca 4000 	str.w	r4, [sl]
 800f894:	b009      	add	sp, #36	; 0x24
 800f896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89a:	bf00      	nop
 800f89c:	200092e8 	.word	0x200092e8

0800f8a0 <send_custom_msg>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800f8a6:	b086      	sub	sp, #24
 800f8a8:	4616      	mov	r6, r2
 800f8aa:	b975      	cbnz	r5, 800f8ca <send_custom_msg+0x2a>
 800f8ac:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800f8b0:	f10d 0317 	add.w	r3, sp, #23
 800f8b4:	47a0      	blx	r4
 800f8b6:	b108      	cbz	r0, 800f8bc <send_custom_msg+0x1c>
 800f8b8:	42b0      	cmp	r0, r6
 800f8ba:	d015      	beq.n	800f8e8 <send_custom_msg+0x48>
 800f8bc:	4b0c      	ldr	r3, [pc, #48]	; (800f8f0 <send_custom_msg+0x50>)
 800f8be:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	b006      	add	sp, #24
 800f8c8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f10d 0117 	add.w	r1, sp, #23
 800f8d2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f8d6:	9600      	str	r6, [sp, #0]
 800f8d8:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800f8dc:	4602      	mov	r2, r0
 800f8de:	f200 2002 	addw	r0, r0, #514	; 0x202
 800f8e2:	f000 fe8f 	bl	8010604 <uxr_write_framed_msg>
 800f8e6:	e7e6      	b.n	800f8b6 <send_custom_msg+0x16>
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	b006      	add	sp, #24
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	bf00      	nop
 800f8f0:	200092e8 	.word	0x200092e8

0800f8f4 <uxr_set_custom_transport_callbacks>:
 800f8f4:	b430      	push	{r4, r5}
 800f8f6:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800f8fa:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800f8fe:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 800f902:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800f906:	bc30      	pop	{r4, r5}
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop

0800f90c <uxr_init_custom_transport>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800f912:	b303      	cbz	r3, 800f956 <uxr_init_custom_transport+0x4a>
 800f914:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800f918:	4604      	mov	r4, r0
 800f91a:	b1e2      	cbz	r2, 800f956 <uxr_init_custom_transport+0x4a>
 800f91c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800f920:	b1ca      	cbz	r2, 800f956 <uxr_init_custom_transport+0x4a>
 800f922:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800f926:	b1b2      	cbz	r2, 800f956 <uxr_init_custom_transport+0x4a>
 800f928:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800f92c:	4798      	blx	r3
 800f92e:	4605      	mov	r5, r0
 800f930:	b188      	cbz	r0, 800f956 <uxr_init_custom_transport+0x4a>
 800f932:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800f936:	b98b      	cbnz	r3, 800f95c <uxr_init_custom_transport+0x50>
 800f938:	480b      	ldr	r0, [pc, #44]	; (800f968 <uxr_init_custom_transport+0x5c>)
 800f93a:	490c      	ldr	r1, [pc, #48]	; (800f96c <uxr_init_custom_transport+0x60>)
 800f93c:	4a0c      	ldr	r2, [pc, #48]	; (800f970 <uxr_init_custom_transport+0x64>)
 800f93e:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 800f942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f946:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 800f94a:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800f94e:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800f952:	4628      	mov	r0, r5
 800f954:	bd38      	pop	{r3, r4, r5, pc}
 800f956:	2500      	movs	r5, #0
 800f958:	4628      	mov	r0, r5
 800f95a:	bd38      	pop	{r3, r4, r5, pc}
 800f95c:	2100      	movs	r1, #0
 800f95e:	f204 2002 	addw	r0, r4, #514	; 0x202
 800f962:	f000 fe49 	bl	80105f8 <uxr_init_framing_io>
 800f966:	e7e7      	b.n	800f938 <uxr_init_custom_transport+0x2c>
 800f968:	0800f8a1 	.word	0x0800f8a1
 800f96c:	0800f809 	.word	0x0800f809
 800f970:	0800f7fd 	.word	0x0800f7fd

0800f974 <uxr_close_custom_transport>:
 800f974:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800f978:	4718      	bx	r3
 800f97a:	bf00      	nop

0800f97c <uxr_init_input_best_effort_stream>:
 800f97c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f980:	8003      	strh	r3, [r0, #0]
 800f982:	4770      	bx	lr

0800f984 <uxr_reset_input_best_effort_stream>:
 800f984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f988:	8003      	strh	r3, [r0, #0]
 800f98a:	4770      	bx	lr

0800f98c <uxr_receive_best_effort_message>:
 800f98c:	b538      	push	{r3, r4, r5, lr}
 800f98e:	4604      	mov	r4, r0
 800f990:	8800      	ldrh	r0, [r0, #0]
 800f992:	460d      	mov	r5, r1
 800f994:	f000 fe18 	bl	80105c8 <uxr_seq_num_cmp>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800f9a0:	bfb8      	it	lt
 800f9a2:	8025      	strhlt	r5, [r4, #0]
 800f9a4:	bd38      	pop	{r3, r4, r5, pc}
 800f9a6:	bf00      	nop

0800f9a8 <on_full_input_buffer>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	6802      	ldr	r2, [r0, #0]
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	6809      	ldr	r1, [r1, #0]
 800f9b0:	686c      	ldr	r4, [r5, #4]
 800f9b2:	1a53      	subs	r3, r2, r1
 800f9b4:	4606      	mov	r6, r0
 800f9b6:	8928      	ldrh	r0, [r5, #8]
 800f9b8:	fbb4 f4f0 	udiv	r4, r4, r0
 800f9bc:	fbb3 f3f4 	udiv	r3, r3, r4
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	fbb3 f2f0 	udiv	r2, r3, r0
 800f9c8:	fb00 3312 	mls	r3, r0, r2, r3
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	fb04 f403 	mul.w	r4, r4, r3
 800f9d2:	1d23      	adds	r3, r4, #4
 800f9d4:	440b      	add	r3, r1
 800f9d6:	7d28      	ldrb	r0, [r5, #20]
 800f9d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800f9dc:	b110      	cbz	r0, 800f9e4 <on_full_input_buffer+0x3c>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	f843 0c04 	str.w	r0, [r3, #-4]
 800f9e4:	2a03      	cmp	r2, #3
 800f9e6:	d801      	bhi.n	800f9ec <on_full_input_buffer+0x44>
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	3408      	adds	r4, #8
 800f9ee:	6933      	ldr	r3, [r6, #16]
 800f9f0:	4421      	add	r1, r4
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	3a04      	subs	r2, #4
 800f9f6:	f7fa ff05 	bl	800a804 <ucdr_init_buffer_origin>
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	4902      	ldr	r1, [pc, #8]	; (800fa08 <on_full_input_buffer+0x60>)
 800f9fe:	462a      	mov	r2, r5
 800fa00:	f7fa fede 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800fa04:	2000      	movs	r0, #0
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	0800f9a9 	.word	0x0800f9a9

0800fa0c <uxr_init_input_reliable_stream>:
 800fa0c:	b470      	push	{r4, r5, r6}
 800fa0e:	9c03      	ldr	r4, [sp, #12]
 800fa10:	6001      	str	r1, [r0, #0]
 800fa12:	2600      	movs	r6, #0
 800fa14:	8103      	strh	r3, [r0, #8]
 800fa16:	6042      	str	r2, [r0, #4]
 800fa18:	6104      	str	r4, [r0, #16]
 800fa1a:	7506      	strb	r6, [r0, #20]
 800fa1c:	b1ab      	cbz	r3, 800fa4a <uxr_init_input_reliable_stream+0x3e>
 800fa1e:	600e      	str	r6, [r1, #0]
 800fa20:	8901      	ldrh	r1, [r0, #8]
 800fa22:	2901      	cmp	r1, #1
 800fa24:	d911      	bls.n	800fa4a <uxr_init_input_reliable_stream+0x3e>
 800fa26:	2201      	movs	r2, #1
 800fa28:	e9d0 5400 	ldrd	r5, r4, [r0]
 800fa2c:	fbb2 f3f1 	udiv	r3, r2, r1
 800fa30:	fb01 2313 	mls	r3, r1, r3, r2
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	fbb4 f1f1 	udiv	r1, r4, r1
 800fa3a:	fb03 f301 	mul.w	r3, r3, r1
 800fa3e:	3201      	adds	r2, #1
 800fa40:	50ee      	str	r6, [r5, r3]
 800fa42:	8901      	ldrh	r1, [r0, #8]
 800fa44:	b292      	uxth	r2, r2
 800fa46:	4291      	cmp	r1, r2
 800fa48:	d8ee      	bhi.n	800fa28 <uxr_init_input_reliable_stream+0x1c>
 800fa4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa4e:	bc70      	pop	{r4, r5, r6}
 800fa50:	60c3      	str	r3, [r0, #12]
 800fa52:	4770      	bx	lr

0800fa54 <uxr_reset_input_reliable_stream>:
 800fa54:	8902      	ldrh	r2, [r0, #8]
 800fa56:	b1ca      	cbz	r2, 800fa8c <uxr_reset_input_reliable_stream+0x38>
 800fa58:	b470      	push	{r4, r5, r6}
 800fa5a:	2400      	movs	r4, #0
 800fa5c:	4621      	mov	r1, r4
 800fa5e:	4626      	mov	r6, r4
 800fa60:	fbb1 f3f2 	udiv	r3, r1, r2
 800fa64:	fb02 1313 	mls	r3, r2, r3, r1
 800fa68:	e9d0 5100 	ldrd	r5, r1, [r0]
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	fbb1 f2f2 	udiv	r2, r1, r2
 800fa72:	fb03 f302 	mul.w	r3, r3, r2
 800fa76:	3401      	adds	r4, #1
 800fa78:	50ee      	str	r6, [r5, r3]
 800fa7a:	8902      	ldrh	r2, [r0, #8]
 800fa7c:	b2a1      	uxth	r1, r4
 800fa7e:	428a      	cmp	r2, r1
 800fa80:	d8ee      	bhi.n	800fa60 <uxr_reset_input_reliable_stream+0xc>
 800fa82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa86:	bc70      	pop	{r4, r5, r6}
 800fa88:	60c3      	str	r3, [r0, #12]
 800fa8a:	4770      	bx	lr
 800fa8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa90:	60c3      	str	r3, [r0, #12]
 800fa92:	4770      	bx	lr

0800fa94 <uxr_receive_reliable_message>:
 800fa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa98:	4604      	mov	r4, r0
 800fa9a:	460d      	mov	r5, r1
 800fa9c:	8901      	ldrh	r1, [r0, #8]
 800fa9e:	8980      	ldrh	r0, [r0, #12]
 800faa0:	4690      	mov	r8, r2
 800faa2:	461f      	mov	r7, r3
 800faa4:	f000 fd88 	bl	80105b8 <uxr_seq_num_add>
 800faa8:	4629      	mov	r1, r5
 800faaa:	4606      	mov	r6, r0
 800faac:	89a0      	ldrh	r0, [r4, #12]
 800faae:	f000 fd8b 	bl	80105c8 <uxr_seq_num_cmp>
 800fab2:	2800      	cmp	r0, #0
 800fab4:	db0a      	blt.n	800facc <uxr_receive_reliable_message+0x38>
 800fab6:	2600      	movs	r6, #0
 800fab8:	89e0      	ldrh	r0, [r4, #14]
 800faba:	4629      	mov	r1, r5
 800fabc:	f000 fd84 	bl	80105c8 <uxr_seq_num_cmp>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	bfb8      	it	lt
 800fac4:	81e5      	strhlt	r5, [r4, #14]
 800fac6:	4630      	mov	r0, r6
 800fac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800facc:	4630      	mov	r0, r6
 800face:	4629      	mov	r1, r5
 800fad0:	f000 fd7a 	bl	80105c8 <uxr_seq_num_cmp>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	dbee      	blt.n	800fab6 <uxr_receive_reliable_message+0x22>
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	4640      	mov	r0, r8
 800fadc:	4798      	blx	r3
 800fade:	2101      	movs	r1, #1
 800fae0:	4681      	mov	r9, r0
 800fae2:	89a0      	ldrh	r0, [r4, #12]
 800fae4:	f000 fd68 	bl	80105b8 <uxr_seq_num_add>
 800fae8:	f1b9 0f00 	cmp.w	r9, #0
 800faec:	d101      	bne.n	800faf2 <uxr_receive_reliable_message+0x5e>
 800faee:	4285      	cmp	r5, r0
 800faf0:	d049      	beq.n	800fb86 <uxr_receive_reliable_message+0xf2>
 800faf2:	8921      	ldrh	r1, [r4, #8]
 800faf4:	fbb5 f3f1 	udiv	r3, r5, r1
 800faf8:	fb01 5313 	mls	r3, r1, r3, r5
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	6862      	ldr	r2, [r4, #4]
 800fb00:	6820      	ldr	r0, [r4, #0]
 800fb02:	fbb2 f2f1 	udiv	r2, r2, r1
 800fb06:	fb03 f302 	mul.w	r3, r3, r2
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	4418      	add	r0, r3
 800fb0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1cf      	bne.n	800fab6 <uxr_receive_reliable_message+0x22>
 800fb16:	4641      	mov	r1, r8
 800fb18:	463a      	mov	r2, r7
 800fb1a:	f002 f876 	bl	8011c0a <memcpy>
 800fb1e:	8921      	ldrh	r1, [r4, #8]
 800fb20:	fbb5 f3f1 	udiv	r3, r5, r1
 800fb24:	fb01 5313 	mls	r3, r1, r3, r5
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	6862      	ldr	r2, [r4, #4]
 800fb2c:	fbb2 f2f1 	udiv	r2, r2, r1
 800fb30:	6821      	ldr	r1, [r4, #0]
 800fb32:	fb03 f302 	mul.w	r3, r3, r2
 800fb36:	2201      	movs	r2, #1
 800fb38:	50cf      	str	r7, [r1, r3]
 800fb3a:	9b08      	ldr	r3, [sp, #32]
 800fb3c:	701a      	strb	r2, [r3, #0]
 800fb3e:	f1b9 0f00 	cmp.w	r9, #0
 800fb42:	d0b8      	beq.n	800fab6 <uxr_receive_reliable_message+0x22>
 800fb44:	89a6      	ldrh	r6, [r4, #12]
 800fb46:	e001      	b.n	800fb4c <uxr_receive_reliable_message+0xb8>
 800fb48:	2801      	cmp	r0, #1
 800fb4a:	d1b4      	bne.n	800fab6 <uxr_receive_reliable_message+0x22>
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	2101      	movs	r1, #1
 800fb50:	f000 fd32 	bl	80105b8 <uxr_seq_num_add>
 800fb54:	8921      	ldrh	r1, [r4, #8]
 800fb56:	fbb0 f3f1 	udiv	r3, r0, r1
 800fb5a:	fb01 0313 	mls	r3, r1, r3, r0
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	6862      	ldr	r2, [r4, #4]
 800fb62:	fbb2 f2f1 	udiv	r2, r2, r1
 800fb66:	4606      	mov	r6, r0
 800fb68:	fb03 f302 	mul.w	r3, r3, r2
 800fb6c:	6820      	ldr	r0, [r4, #0]
 800fb6e:	3304      	adds	r3, #4
 800fb70:	4418      	add	r0, r3
 800fb72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d09d      	beq.n	800fab6 <uxr_receive_reliable_message+0x22>
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	4798      	blx	r3
 800fb7e:	2802      	cmp	r0, #2
 800fb80:	d1e2      	bne.n	800fb48 <uxr_receive_reliable_message+0xb4>
 800fb82:	2601      	movs	r6, #1
 800fb84:	e798      	b.n	800fab8 <uxr_receive_reliable_message+0x24>
 800fb86:	9b08      	ldr	r3, [sp, #32]
 800fb88:	81a5      	strh	r5, [r4, #12]
 800fb8a:	2601      	movs	r6, #1
 800fb8c:	f883 9000 	strb.w	r9, [r3]
 800fb90:	e792      	b.n	800fab8 <uxr_receive_reliable_message+0x24>
 800fb92:	bf00      	nop

0800fb94 <uxr_next_input_reliable_buffer_available>:
 800fb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb98:	4604      	mov	r4, r0
 800fb9a:	460e      	mov	r6, r1
 800fb9c:	8980      	ldrh	r0, [r0, #12]
 800fb9e:	2101      	movs	r1, #1
 800fba0:	4617      	mov	r7, r2
 800fba2:	f000 fd09 	bl	80105b8 <uxr_seq_num_add>
 800fba6:	8921      	ldrh	r1, [r4, #8]
 800fba8:	fbb0 f3f1 	udiv	r3, r0, r1
 800fbac:	fb01 0313 	mls	r3, r1, r3, r0
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	6862      	ldr	r2, [r4, #4]
 800fbb4:	fbb2 f2f1 	udiv	r2, r2, r1
 800fbb8:	fb03 f302 	mul.w	r3, r3, r2
 800fbbc:	6822      	ldr	r2, [r4, #0]
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	eb02 0803 	add.w	r8, r2, r3
 800fbc4:	f858 9c04 	ldr.w	r9, [r8, #-4]
 800fbc8:	f1b9 0f00 	cmp.w	r9, #0
 800fbcc:	d025      	beq.n	800fc1a <uxr_next_input_reliable_buffer_available+0x86>
 800fbce:	6923      	ldr	r3, [r4, #16]
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	4640      	mov	r0, r8
 800fbd4:	4798      	blx	r3
 800fbd6:	4682      	mov	sl, r0
 800fbd8:	b310      	cbz	r0, 800fc20 <uxr_next_input_reliable_buffer_available+0x8c>
 800fbda:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800fbde:	e005      	b.n	800fbec <uxr_next_input_reliable_buffer_available+0x58>
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	4798      	blx	r3
 800fbe4:	2802      	cmp	r0, #2
 800fbe6:	d032      	beq.n	800fc4e <uxr_next_input_reliable_buffer_available+0xba>
 800fbe8:	2801      	cmp	r0, #1
 800fbea:	d116      	bne.n	800fc1a <uxr_next_input_reliable_buffer_available+0x86>
 800fbec:	4650      	mov	r0, sl
 800fbee:	2101      	movs	r1, #1
 800fbf0:	f000 fce2 	bl	80105b8 <uxr_seq_num_add>
 800fbf4:	8921      	ldrh	r1, [r4, #8]
 800fbf6:	fbb0 f3f1 	udiv	r3, r0, r1
 800fbfa:	fb01 0313 	mls	r3, r1, r3, r0
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	6862      	ldr	r2, [r4, #4]
 800fc02:	fbb2 f2f1 	udiv	r2, r2, r1
 800fc06:	4682      	mov	sl, r0
 800fc08:	fb03 f302 	mul.w	r3, r3, r2
 800fc0c:	6820      	ldr	r0, [r4, #0]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	4418      	add	r0, r3
 800fc12:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1e2      	bne.n	800fbe0 <uxr_next_input_reliable_buffer_available+0x4c>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc20:	464a      	mov	r2, r9
 800fc22:	4641      	mov	r1, r8
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7fa fdf5 	bl	800a814 <ucdr_init_buffer>
 800fc2a:	8921      	ldrh	r1, [r4, #8]
 800fc2c:	fbb5 f3f1 	udiv	r3, r5, r1
 800fc30:	fb01 5313 	mls	r3, r1, r3, r5
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	6862      	ldr	r2, [r4, #4]
 800fc38:	fbb2 f2f1 	udiv	r2, r2, r1
 800fc3c:	6821      	ldr	r1, [r4, #0]
 800fc3e:	fb03 f302 	mul.w	r3, r3, r2
 800fc42:	2001      	movs	r0, #1
 800fc44:	f841 a003 	str.w	sl, [r1, r3]
 800fc48:	81a5      	strh	r5, [r4, #12]
 800fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4e:	8922      	ldrh	r2, [r4, #8]
 800fc50:	fbb5 f0f2 	udiv	r0, r5, r2
 800fc54:	fb02 5510 	mls	r5, r2, r0, r5
 800fc58:	b2ad      	uxth	r5, r5
 800fc5a:	6863      	ldr	r3, [r4, #4]
 800fc5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc60:	fb05 f503 	mul.w	r5, r5, r3
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	2000      	movs	r0, #0
 800fc68:	5158      	str	r0, [r3, r5]
 800fc6a:	eba9 0207 	sub.w	r2, r9, r7
 800fc6e:	eb08 0107 	add.w	r1, r8, r7
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7fa fdce 	bl	800a814 <ucdr_init_buffer>
 800fc78:	4630      	mov	r0, r6
 800fc7a:	4904      	ldr	r1, [pc, #16]	; (800fc8c <uxr_next_input_reliable_buffer_available+0xf8>)
 800fc7c:	4622      	mov	r2, r4
 800fc7e:	f7fa fd9f 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800fc82:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800fc86:	2001      	movs	r0, #1
 800fc88:	e7c8      	b.n	800fc1c <uxr_next_input_reliable_buffer_available+0x88>
 800fc8a:	bf00      	nop
 800fc8c:	0800f9a9 	.word	0x0800f9a9

0800fc90 <uxr_process_heartbeat>:
 800fc90:	b538      	push	{r3, r4, r5, lr}
 800fc92:	4611      	mov	r1, r2
 800fc94:	4604      	mov	r4, r0
 800fc96:	89c0      	ldrh	r0, [r0, #14]
 800fc98:	4615      	mov	r5, r2
 800fc9a:	f000 fc95 	bl	80105c8 <uxr_seq_num_cmp>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	bfb8      	it	lt
 800fca2:	81e5      	strhlt	r5, [r4, #14]
 800fca4:	bd38      	pop	{r3, r4, r5, pc}
 800fca6:	bf00      	nop

0800fca8 <uxr_compute_acknack>:
 800fca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcac:	8903      	ldrh	r3, [r0, #8]
 800fcae:	8986      	ldrh	r6, [r0, #12]
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	b1d3      	cbz	r3, 800fcec <uxr_compute_acknack+0x44>
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	2701      	movs	r7, #1
 800fcba:	e003      	b.n	800fcc4 <uxr_compute_acknack+0x1c>
 800fcbc:	4567      	cmp	r7, ip
 800fcbe:	d215      	bcs.n	800fcec <uxr_compute_acknack+0x44>
 800fcc0:	89a0      	ldrh	r0, [r4, #12]
 800fcc2:	3701      	adds	r7, #1
 800fcc4:	b2b9      	uxth	r1, r7
 800fcc6:	f000 fc77 	bl	80105b8 <uxr_seq_num_add>
 800fcca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fcce:	fbb0 f2fc 	udiv	r2, r0, ip
 800fcd2:	e9d4 1300 	ldrd	r1, r3, [r4]
 800fcd6:	fb0c 0212 	mls	r2, ip, r2, r0
 800fcda:	b292      	uxth	r2, r2
 800fcdc:	fbb3 f3fc 	udiv	r3, r3, ip
 800fce0:	fb02 1303 	mla	r3, r2, r3, r1
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1e8      	bne.n	800fcbc <uxr_compute_acknack+0x14>
 800fcea:	4606      	mov	r6, r0
 800fcec:	802e      	strh	r6, [r5, #0]
 800fcee:	4630      	mov	r0, r6
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	89e6      	ldrh	r6, [r4, #14]
 800fcf4:	f000 fc64 	bl	80105c0 <uxr_seq_num_sub>
 800fcf8:	4601      	mov	r1, r0
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f000 fc60 	bl	80105c0 <uxr_seq_num_sub>
 800fd00:	4606      	mov	r6, r0
 800fd02:	b318      	cbz	r0, 800fd4c <uxr_compute_acknack+0xa4>
 800fd04:	f04f 0900 	mov.w	r9, #0
 800fd08:	464f      	mov	r7, r9
 800fd0a:	f04f 0801 	mov.w	r8, #1
 800fd0e:	fa1f f189 	uxth.w	r1, r9
 800fd12:	8828      	ldrh	r0, [r5, #0]
 800fd14:	f000 fc50 	bl	80105b8 <uxr_seq_num_add>
 800fd18:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800fd1c:	6822      	ldr	r2, [r4, #0]
 800fd1e:	fbb0 f1fc 	udiv	r1, r0, ip
 800fd22:	fb01 011c 	mls	r1, r1, ip, r0
 800fd26:	b289      	uxth	r1, r1
 800fd28:	6863      	ldr	r3, [r4, #4]
 800fd2a:	fbb3 f3fc 	udiv	r3, r3, ip
 800fd2e:	fb01 2303 	mla	r3, r1, r3, r2
 800fd32:	fa08 f209 	lsl.w	r2, r8, r9
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f109 0901 	add.w	r9, r9, #1
 800fd3c:	b90b      	cbnz	r3, 800fd42 <uxr_compute_acknack+0x9a>
 800fd3e:	4317      	orrs	r7, r2
 800fd40:	b2bf      	uxth	r7, r7
 800fd42:	454e      	cmp	r6, r9
 800fd44:	d1e3      	bne.n	800fd0e <uxr_compute_acknack+0x66>
 800fd46:	4638      	mov	r0, r7
 800fd48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd4c:	4607      	mov	r7, r0
 800fd4e:	4638      	mov	r0, r7
 800fd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fd54 <uxr_init_output_best_effort_stream>:
 800fd54:	b410      	push	{r4}
 800fd56:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fd5a:	81c4      	strh	r4, [r0, #14]
 800fd5c:	e9c0 1300 	strd	r1, r3, [r0]
 800fd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd64:	7303      	strb	r3, [r0, #12]
 800fd66:	6082      	str	r2, [r0, #8]
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop

0800fd6c <uxr_reset_output_best_effort_stream>:
 800fd6c:	7b02      	ldrb	r2, [r0, #12]
 800fd6e:	6042      	str	r2, [r0, #4]
 800fd70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd74:	81c3      	strh	r3, [r0, #14]
 800fd76:	4770      	bx	lr

0800fd78 <uxr_prepare_best_effort_buffer_to_write>:
 800fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	b083      	sub	sp, #12
 800fd7e:	6840      	ldr	r0, [r0, #4]
 800fd80:	460d      	mov	r5, r1
 800fd82:	4616      	mov	r6, r2
 800fd84:	f7fc f9a6 	bl	800c0d4 <uxr_submessage_padding>
 800fd88:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800fd8c:	4410      	add	r0, r2
 800fd8e:	1942      	adds	r2, r0, r5
 800fd90:	4293      	cmp	r3, r2
 800fd92:	bf2c      	ite	cs
 800fd94:	2701      	movcs	r7, #1
 800fd96:	2700      	movcc	r7, #0
 800fd98:	d202      	bcs.n	800fda0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	b003      	add	sp, #12
 800fd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fda0:	9000      	str	r0, [sp, #0]
 800fda2:	6821      	ldr	r1, [r4, #0]
 800fda4:	4630      	mov	r0, r6
 800fda6:	2300      	movs	r3, #0
 800fda8:	f7fa fd22 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 800fdac:	6861      	ldr	r1, [r4, #4]
 800fdae:	4638      	mov	r0, r7
 800fdb0:	4429      	add	r1, r5
 800fdb2:	6061      	str	r1, [r4, #4]
 800fdb4:	b003      	add	sp, #12
 800fdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdb8 <uxr_prepare_best_effort_buffer_to_send>:
 800fdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbc:	6845      	ldr	r5, [r0, #4]
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	7b00      	ldrb	r0, [r0, #12]
 800fdc2:	4285      	cmp	r5, r0
 800fdc4:	bf8c      	ite	hi
 800fdc6:	2701      	movhi	r7, #1
 800fdc8:	2700      	movls	r7, #0
 800fdca:	d802      	bhi.n	800fdd2 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 800fdcc:	4638      	mov	r0, r7
 800fdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd2:	4688      	mov	r8, r1
 800fdd4:	89e0      	ldrh	r0, [r4, #14]
 800fdd6:	2101      	movs	r1, #1
 800fdd8:	4615      	mov	r5, r2
 800fdda:	461e      	mov	r6, r3
 800fddc:	f000 fbec 	bl	80105b8 <uxr_seq_num_add>
 800fde0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fde4:	81e0      	strh	r0, [r4, #14]
 800fde6:	8030      	strh	r0, [r6, #0]
 800fde8:	f8c8 2000 	str.w	r2, [r8]
 800fdec:	602b      	str	r3, [r5, #0]
 800fdee:	7b23      	ldrb	r3, [r4, #12]
 800fdf0:	6063      	str	r3, [r4, #4]
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fdf8 <on_full_output_buffer>:
 800fdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfa:	6802      	ldr	r2, [r0, #0]
 800fdfc:	460d      	mov	r5, r1
 800fdfe:	6809      	ldr	r1, [r1, #0]
 800fe00:	892f      	ldrh	r7, [r5, #8]
 800fe02:	686c      	ldr	r4, [r5, #4]
 800fe04:	fbb4 f4f7 	udiv	r4, r4, r7
 800fe08:	1a53      	subs	r3, r2, r1
 800fe0a:	fbb3 f3f4 	udiv	r3, r3, r4
 800fe0e:	3301      	adds	r3, #1
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	fbb3 f2f7 	udiv	r2, r3, r7
 800fe16:	fb07 3312 	mls	r3, r7, r2, r3
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	fb04 f403 	mul.w	r4, r4, r3
 800fe20:	7b2f      	ldrb	r7, [r5, #12]
 800fe22:	590a      	ldr	r2, [r1, r4]
 800fe24:	6903      	ldr	r3, [r0, #16]
 800fe26:	443c      	add	r4, r7
 800fe28:	3408      	adds	r4, #8
 800fe2a:	1bd2      	subs	r2, r2, r7
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	4421      	add	r1, r4
 800fe30:	3a04      	subs	r2, #4
 800fe32:	f7fa fce7 	bl	800a804 <ucdr_init_buffer_origin>
 800fe36:	4630      	mov	r0, r6
 800fe38:	4902      	ldr	r1, [pc, #8]	; (800fe44 <on_full_output_buffer+0x4c>)
 800fe3a:	462a      	mov	r2, r5
 800fe3c:	f7fa fcc0 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 800fe40:	2000      	movs	r0, #0
 800fe42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe44:	0800fdf9 	.word	0x0800fdf9

0800fe48 <uxr_init_output_reliable_stream>:
 800fe48:	b430      	push	{r4, r5}
 800fe4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800fe4e:	6001      	str	r1, [r0, #0]
 800fe50:	8103      	strh	r3, [r0, #8]
 800fe52:	6042      	str	r2, [r0, #4]
 800fe54:	7304      	strb	r4, [r0, #12]
 800fe56:	b1b3      	cbz	r3, 800fe86 <uxr_init_output_reliable_stream+0x3e>
 800fe58:	600c      	str	r4, [r1, #0]
 800fe5a:	8901      	ldrh	r1, [r0, #8]
 800fe5c:	2901      	cmp	r1, #1
 800fe5e:	d912      	bls.n	800fe86 <uxr_init_output_reliable_stream+0x3e>
 800fe60:	2201      	movs	r2, #1
 800fe62:	e9d0 5400 	ldrd	r5, r4, [r0]
 800fe66:	fbb2 f3f1 	udiv	r3, r2, r1
 800fe6a:	fb01 2313 	mls	r3, r1, r3, r2
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	fbb4 f1f1 	udiv	r1, r4, r1
 800fe74:	fb03 f301 	mul.w	r3, r3, r1
 800fe78:	7b01      	ldrb	r1, [r0, #12]
 800fe7a:	50e9      	str	r1, [r5, r3]
 800fe7c:	3201      	adds	r2, #1
 800fe7e:	8901      	ldrh	r1, [r0, #8]
 800fe80:	b292      	uxth	r2, r2
 800fe82:	4291      	cmp	r1, r2
 800fe84:	d8ed      	bhi.n	800fe62 <uxr_init_output_reliable_stream+0x1a>
 800fe86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fe8e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fe92:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <uxr_init_output_reliable_stream+0x60>)
 800fe94:	f8c0 300e 	str.w	r3, [r0, #14]
 800fe98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	bc30      	pop	{r4, r5}
 800fea0:	8242      	strh	r2, [r0, #18]
 800fea2:	8403      	strh	r3, [r0, #32]
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	ffff0000 	.word	0xffff0000

0800feac <uxr_reset_output_reliable_stream>:
 800feac:	8902      	ldrh	r2, [r0, #8]
 800feae:	b430      	push	{r4, r5}
 800feb0:	b19a      	cbz	r2, 800feda <uxr_reset_output_reliable_stream+0x2e>
 800feb2:	2400      	movs	r4, #0
 800feb4:	4621      	mov	r1, r4
 800feb6:	fbb1 f3f2 	udiv	r3, r1, r2
 800feba:	fb02 1313 	mls	r3, r2, r3, r1
 800febe:	e9d0 5100 	ldrd	r5, r1, [r0]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	fbb1 f2f2 	udiv	r2, r1, r2
 800fec8:	fb03 f302 	mul.w	r3, r3, r2
 800fecc:	7b02      	ldrb	r2, [r0, #12]
 800fece:	50ea      	str	r2, [r5, r3]
 800fed0:	3401      	adds	r4, #1
 800fed2:	8902      	ldrh	r2, [r0, #8]
 800fed4:	b2a1      	uxth	r1, r4
 800fed6:	428a      	cmp	r2, r1
 800fed8:	d8ed      	bhi.n	800feb6 <uxr_reset_output_reliable_stream+0xa>
 800feda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fede:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fee2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <uxr_reset_output_reliable_stream+0x50>)
 800fee8:	f8c0 300e 	str.w	r3, [r0, #14]
 800feec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fef0:	2300      	movs	r3, #0
 800fef2:	bc30      	pop	{r4, r5}
 800fef4:	8242      	strh	r2, [r0, #18]
 800fef6:	8403      	strh	r3, [r0, #32]
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	ffff0000 	.word	0xffff0000

0800ff00 <uxr_prepare_reliable_buffer_to_write>:
 800ff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff04:	4604      	mov	r4, r0
 800ff06:	89c6      	ldrh	r6, [r0, #14]
 800ff08:	8900      	ldrh	r0, [r0, #8]
 800ff0a:	f8d4 c000 	ldr.w	ip, [r4]
 800ff0e:	fbb6 f3f0 	udiv	r3, r6, r0
 800ff12:	fb00 6313 	mls	r3, r0, r3, r6
 800ff16:	b091      	sub	sp, #68	; 0x44
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	6865      	ldr	r5, [r4, #4]
 800ff1c:	fbb5 f5f0 	udiv	r5, r5, r0
 800ff20:	fb05 c303 	mla	r3, r5, r3, ip
 800ff24:	9204      	str	r2, [sp, #16]
 800ff26:	1d1a      	adds	r2, r3, #4
 800ff28:	f8d3 8000 	ldr.w	r8, [r3]
 800ff2c:	f894 900c 	ldrb.w	r9, [r4, #12]
 800ff30:	9203      	str	r2, [sp, #12]
 800ff32:	468b      	mov	fp, r1
 800ff34:	1f2f      	subs	r7, r5, #4
 800ff36:	2800      	cmp	r0, #0
 800ff38:	f000 814e 	beq.w	80101d8 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 800ff3c:	f04f 0e00 	mov.w	lr, #0
 800ff40:	46f2      	mov	sl, lr
 800ff42:	4672      	mov	r2, lr
 800ff44:	fbb2 f3f0 	udiv	r3, r2, r0
 800ff48:	fb00 2313 	mls	r3, r0, r3, r2
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	fb05 c303 	mla	r3, r5, r3, ip
 800ff52:	f10e 0e01 	add.w	lr, lr, #1
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	454b      	cmp	r3, r9
 800ff5a:	bf08      	it	eq
 800ff5c:	f10a 0a01 	addeq.w	sl, sl, #1
 800ff60:	fa1f f28e 	uxth.w	r2, lr
 800ff64:	bf08      	it	eq
 800ff66:	fa1f fa8a 	uxtheq.w	sl, sl
 800ff6a:	4282      	cmp	r2, r0
 800ff6c:	d3ea      	bcc.n	800ff44 <uxr_prepare_reliable_buffer_to_write+0x44>
 800ff6e:	4640      	mov	r0, r8
 800ff70:	2104      	movs	r1, #4
 800ff72:	f8cd a014 	str.w	sl, [sp, #20]
 800ff76:	f7fa fc51 	bl	800a81c <ucdr_alignment>
 800ff7a:	4480      	add	r8, r0
 800ff7c:	eb08 020b 	add.w	r2, r8, fp
 800ff80:	42ba      	cmp	r2, r7
 800ff82:	f240 80cf 	bls.w	8010124 <uxr_prepare_reliable_buffer_to_write+0x224>
 800ff86:	7b22      	ldrb	r2, [r4, #12]
 800ff88:	445a      	add	r2, fp
 800ff8a:	42ba      	cmp	r2, r7
 800ff8c:	f240 80b7 	bls.w	80100fe <uxr_prepare_reliable_buffer_to_write+0x1fe>
 800ff90:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 800ff94:	33fc      	adds	r3, #252	; 0xfc
 800ff96:	b2ba      	uxth	r2, r7
 800ff98:	4413      	add	r3, r2
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	fb0a f903 	mul.w	r9, sl, r3
 800ffa0:	45d9      	cmp	r9, fp
 800ffa2:	9305      	str	r3, [sp, #20]
 800ffa4:	9306      	str	r3, [sp, #24]
 800ffa6:	f0c0 80b9 	bcc.w	801011c <uxr_prepare_reliable_buffer_to_write+0x21c>
 800ffaa:	f108 0304 	add.w	r3, r8, #4
 800ffae:	42bb      	cmp	r3, r7
 800ffb0:	f080 80dd 	bcs.w	801016e <uxr_prepare_reliable_buffer_to_write+0x26e>
 800ffb4:	f1a2 0904 	sub.w	r9, r2, #4
 800ffb8:	eba9 0908 	sub.w	r9, r9, r8
 800ffbc:	9b05      	ldr	r3, [sp, #20]
 800ffbe:	fa1f f989 	uxth.w	r9, r9
 800ffc2:	ebab 0b09 	sub.w	fp, fp, r9
 800ffc6:	fbbb f2f3 	udiv	r2, fp, r3
 800ffca:	fb03 b312 	mls	r3, r3, r2, fp
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f000 80ca 	beq.w	8010168 <uxr_prepare_reliable_buffer_to_write+0x268>
 800ffd4:	3201      	adds	r2, #1
 800ffd6:	b292      	uxth	r2, r2
 800ffd8:	4611      	mov	r1, r2
 800ffda:	9306      	str	r3, [sp, #24]
 800ffdc:	4551      	cmp	r1, sl
 800ffde:	f200 809d 	bhi.w	801011c <uxr_prepare_reliable_buffer_to_write+0x21c>
 800ffe2:	f10d 0b20 	add.w	fp, sp, #32
 800ffe6:	2900      	cmp	r1, #0
 800ffe8:	d042      	beq.n	8010070 <uxr_prepare_reliable_buffer_to_write+0x170>
 800ffea:	f8cd 801c 	str.w	r8, [sp, #28]
 800ffee:	f04f 0a00 	mov.w	sl, #0
 800fff2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fff6:	9505      	str	r5, [sp, #20]
 800fff8:	f10d 0b20 	add.w	fp, sp, #32
 800fffc:	460d      	mov	r5, r1
 800fffe:	e000      	b.n	8010002 <uxr_prepare_reliable_buffer_to_write+0x102>
 8010000:	46c1      	mov	r9, r8
 8010002:	8920      	ldrh	r0, [r4, #8]
 8010004:	fbb6 f1f0 	udiv	r1, r6, r0
 8010008:	e9d4 3200 	ldrd	r3, r2, [r4]
 801000c:	fb00 6111 	mls	r1, r0, r1, r6
 8010010:	b289      	uxth	r1, r1
 8010012:	fbb2 f2f0 	udiv	r2, r2, r0
 8010016:	fb01 f102 	mul.w	r1, r1, r2
 801001a:	3104      	adds	r1, #4
 801001c:	4419      	add	r1, r3
 801001e:	463a      	mov	r2, r7
 8010020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	4658      	mov	r0, fp
 8010028:	2300      	movs	r3, #0
 801002a:	f7fa fbe1 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 801002e:	464a      	mov	r2, r9
 8010030:	2300      	movs	r3, #0
 8010032:	210d      	movs	r1, #13
 8010034:	4658      	mov	r0, fp
 8010036:	f7fc f80d 	bl	800c054 <uxr_buffer_submessage_header>
 801003a:	8920      	ldrh	r0, [r4, #8]
 801003c:	fbb6 f3f0 	udiv	r3, r6, r0
 8010040:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010044:	fb00 6313 	mls	r3, r0, r3, r6
 8010048:	b29b      	uxth	r3, r3
 801004a:	fbb1 f1f0 	udiv	r1, r1, r0
 801004e:	fb03 f301 	mul.w	r3, r3, r1
 8010052:	4630      	mov	r0, r6
 8010054:	50d7      	str	r7, [r2, r3]
 8010056:	2101      	movs	r1, #1
 8010058:	f000 faae 	bl	80105b8 <uxr_seq_num_add>
 801005c:	f10a 0a01 	add.w	sl, sl, #1
 8010060:	fa1f f38a 	uxth.w	r3, sl
 8010064:	429d      	cmp	r5, r3
 8010066:	4606      	mov	r6, r0
 8010068:	d8ca      	bhi.n	8010000 <uxr_prepare_reliable_buffer_to_write+0x100>
 801006a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801006e:	9d05      	ldr	r5, [sp, #20]
 8010070:	8921      	ldrh	r1, [r4, #8]
 8010072:	fbb6 f3f1 	udiv	r3, r6, r1
 8010076:	fb01 6313 	mls	r3, r1, r3, r6
 801007a:	b29b      	uxth	r3, r3
 801007c:	6862      	ldr	r2, [r4, #4]
 801007e:	fbb2 f2f1 	udiv	r2, r2, r1
 8010082:	6821      	ldr	r1, [r4, #0]
 8010084:	fb03 f302 	mul.w	r3, r3, r2
 8010088:	3304      	adds	r3, #4
 801008a:	4419      	add	r1, r3
 801008c:	463a      	mov	r2, r7
 801008e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	4658      	mov	r0, fp
 8010096:	2300      	movs	r3, #0
 8010098:	f7fa fbaa 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 801009c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80100a0:	4658      	mov	r0, fp
 80100a2:	fa1f f289 	uxth.w	r2, r9
 80100a6:	2302      	movs	r3, #2
 80100a8:	210d      	movs	r1, #13
 80100aa:	f7fb ffd3 	bl	800c054 <uxr_buffer_submessage_header>
 80100ae:	8921      	ldrh	r1, [r4, #8]
 80100b0:	7b27      	ldrb	r7, [r4, #12]
 80100b2:	fbb6 f0f1 	udiv	r0, r6, r1
 80100b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80100ba:	fb01 6010 	mls	r0, r1, r0, r6
 80100be:	b280      	uxth	r0, r0
 80100c0:	fbb2 f2f1 	udiv	r2, r2, r1
 80100c4:	3704      	adds	r7, #4
 80100c6:	fb00 f002 	mul.w	r0, r0, r2
 80100ca:	f1a5 0208 	sub.w	r2, r5, #8
 80100ce:	464d      	mov	r5, r9
 80100d0:	443d      	add	r5, r7
 80100d2:	9f03      	ldr	r7, [sp, #12]
 80100d4:	501d      	str	r5, [r3, r0]
 80100d6:	f108 0104 	add.w	r1, r8, #4
 80100da:	9d04      	ldr	r5, [sp, #16]
 80100dc:	440f      	add	r7, r1
 80100de:	eba2 0208 	sub.w	r2, r2, r8
 80100e2:	4639      	mov	r1, r7
 80100e4:	4628      	mov	r0, r5
 80100e6:	f7fa fb95 	bl	800a814 <ucdr_init_buffer>
 80100ea:	4628      	mov	r0, r5
 80100ec:	493b      	ldr	r1, [pc, #236]	; (80101dc <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 80100ee:	4622      	mov	r2, r4
 80100f0:	f7fa fb66 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 80100f4:	2001      	movs	r0, #1
 80100f6:	81e6      	strh	r6, [r4, #14]
 80100f8:	b011      	add	sp, #68	; 0x44
 80100fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100fe:	2101      	movs	r1, #1
 8010100:	89e0      	ldrh	r0, [r4, #14]
 8010102:	f000 fa59 	bl	80105b8 <uxr_seq_num_add>
 8010106:	8921      	ldrh	r1, [r4, #8]
 8010108:	4605      	mov	r5, r0
 801010a:	8a60      	ldrh	r0, [r4, #18]
 801010c:	f000 fa54 	bl	80105b8 <uxr_seq_num_add>
 8010110:	4601      	mov	r1, r0
 8010112:	4628      	mov	r0, r5
 8010114:	f000 fa58 	bl	80105c8 <uxr_seq_num_cmp>
 8010118:	2800      	cmp	r0, #0
 801011a:	dd42      	ble.n	80101a2 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 801011c:	2000      	movs	r0, #0
 801011e:	b011      	add	sp, #68	; 0x44
 8010120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010124:	8921      	ldrh	r1, [r4, #8]
 8010126:	8a60      	ldrh	r0, [r4, #18]
 8010128:	9205      	str	r2, [sp, #20]
 801012a:	f000 fa45 	bl	80105b8 <uxr_seq_num_add>
 801012e:	4601      	mov	r1, r0
 8010130:	4630      	mov	r0, r6
 8010132:	f000 fa49 	bl	80105c8 <uxr_seq_num_cmp>
 8010136:	2800      	cmp	r0, #0
 8010138:	9a05      	ldr	r2, [sp, #20]
 801013a:	dcef      	bgt.n	801011c <uxr_prepare_reliable_buffer_to_write+0x21c>
 801013c:	8920      	ldrh	r0, [r4, #8]
 801013e:	fbb6 f3f0 	udiv	r3, r6, r0
 8010142:	e9d4 4100 	ldrd	r4, r1, [r4]
 8010146:	fb00 6313 	mls	r3, r0, r3, r6
 801014a:	b29b      	uxth	r3, r3
 801014c:	fbb1 f1f0 	udiv	r1, r1, r0
 8010150:	fb03 f301 	mul.w	r3, r3, r1
 8010154:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8010158:	50e2      	str	r2, [r4, r3]
 801015a:	f8cd 8000 	str.w	r8, [sp]
 801015e:	2300      	movs	r3, #0
 8010160:	f7fa fb46 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 8010164:	2001      	movs	r0, #1
 8010166:	e7da      	b.n	801011e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8010168:	b293      	uxth	r3, r2
 801016a:	4619      	mov	r1, r3
 801016c:	e736      	b.n	800ffdc <uxr_prepare_reliable_buffer_to_write+0xdc>
 801016e:	4630      	mov	r0, r6
 8010170:	2101      	movs	r1, #1
 8010172:	9207      	str	r2, [sp, #28]
 8010174:	f000 fa20 	bl	80105b8 <uxr_seq_num_add>
 8010178:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801017c:	fbb0 f1fc 	udiv	r1, r0, ip
 8010180:	fb0c 0111 	mls	r1, ip, r1, r0
 8010184:	b289      	uxth	r1, r1
 8010186:	6863      	ldr	r3, [r4, #4]
 8010188:	fbb3 f3fc 	udiv	r3, r3, ip
 801018c:	fb01 f103 	mul.w	r1, r1, r3
 8010190:	6823      	ldr	r3, [r4, #0]
 8010192:	9a07      	ldr	r2, [sp, #28]
 8010194:	3104      	adds	r1, #4
 8010196:	440b      	add	r3, r1
 8010198:	4606      	mov	r6, r0
 801019a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801019e:	9303      	str	r3, [sp, #12]
 80101a0:	e708      	b.n	800ffb4 <uxr_prepare_reliable_buffer_to_write+0xb4>
 80101a2:	8920      	ldrh	r0, [r4, #8]
 80101a4:	fbb5 f3f0 	udiv	r3, r5, r0
 80101a8:	fb00 5313 	mls	r3, r0, r3, r5
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	6862      	ldr	r2, [r4, #4]
 80101b0:	6821      	ldr	r1, [r4, #0]
 80101b2:	fbb2 f0f0 	udiv	r0, r2, r0
 80101b6:	fb03 f300 	mul.w	r3, r3, r0
 80101ba:	7b22      	ldrb	r2, [r4, #12]
 80101bc:	9804      	ldr	r0, [sp, #16]
 80101be:	3304      	adds	r3, #4
 80101c0:	4419      	add	r1, r3
 80101c2:	445a      	add	r2, fp
 80101c4:	f841 2c04 	str.w	r2, [r1, #-4]
 80101c8:	7b23      	ldrb	r3, [r4, #12]
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	2300      	movs	r3, #0
 80101ce:	f7fa fb0f 	bl	800a7f0 <ucdr_init_buffer_origin_offset>
 80101d2:	81e5      	strh	r5, [r4, #14]
 80101d4:	2001      	movs	r0, #1
 80101d6:	e7a2      	b.n	801011e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80101d8:	4682      	mov	sl, r0
 80101da:	e6c8      	b.n	800ff6e <uxr_prepare_reliable_buffer_to_write+0x6e>
 80101dc:	0800fdf9 	.word	0x0800fdf9

080101e0 <uxr_prepare_next_reliable_buffer_to_send>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	4605      	mov	r5, r0
 80101e6:	4688      	mov	r8, r1
 80101e8:	8a00      	ldrh	r0, [r0, #16]
 80101ea:	2101      	movs	r1, #1
 80101ec:	4617      	mov	r7, r2
 80101ee:	461e      	mov	r6, r3
 80101f0:	f000 f9e2 	bl	80105b8 <uxr_seq_num_add>
 80101f4:	8030      	strh	r0, [r6, #0]
 80101f6:	892a      	ldrh	r2, [r5, #8]
 80101f8:	fbb0 f3f2 	udiv	r3, r0, r2
 80101fc:	fb02 0413 	mls	r4, r2, r3, r0
 8010200:	b2a4      	uxth	r4, r4
 8010202:	686b      	ldr	r3, [r5, #4]
 8010204:	fbb3 f2f2 	udiv	r2, r3, r2
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	89e9      	ldrh	r1, [r5, #14]
 801020c:	fb04 f402 	mul.w	r4, r4, r2
 8010210:	3404      	adds	r4, #4
 8010212:	4423      	add	r3, r4
 8010214:	f8c8 3000 	str.w	r3, [r8]
 8010218:	682b      	ldr	r3, [r5, #0]
 801021a:	441c      	add	r4, r3
 801021c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010220:	603b      	str	r3, [r7, #0]
 8010222:	f000 f9d1 	bl	80105c8 <uxr_seq_num_cmp>
 8010226:	2800      	cmp	r0, #0
 8010228:	dd02      	ble.n	8010230 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 801022a:	2000      	movs	r0, #0
 801022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010230:	683a      	ldr	r2, [r7, #0]
 8010232:	7b2b      	ldrb	r3, [r5, #12]
 8010234:	429a      	cmp	r2, r3
 8010236:	d9f8      	bls.n	801022a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8010238:	8a69      	ldrh	r1, [r5, #18]
 801023a:	8a28      	ldrh	r0, [r5, #16]
 801023c:	f000 f9c0 	bl	80105c0 <uxr_seq_num_sub>
 8010240:	892b      	ldrh	r3, [r5, #8]
 8010242:	4283      	cmp	r3, r0
 8010244:	d0f1      	beq.n	801022a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8010246:	8830      	ldrh	r0, [r6, #0]
 8010248:	89eb      	ldrh	r3, [r5, #14]
 801024a:	8228      	strh	r0, [r5, #16]
 801024c:	4298      	cmp	r0, r3
 801024e:	d002      	beq.n	8010256 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8010250:	2001      	movs	r0, #1
 8010252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010256:	2101      	movs	r1, #1
 8010258:	f000 f9ae 	bl	80105b8 <uxr_seq_num_add>
 801025c:	81e8      	strh	r0, [r5, #14]
 801025e:	2001      	movs	r0, #1
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010264 <uxr_update_output_stream_heartbeat_timestamp>:
 8010264:	b5d0      	push	{r4, r6, r7, lr}
 8010266:	8a01      	ldrh	r1, [r0, #16]
 8010268:	4604      	mov	r4, r0
 801026a:	8a40      	ldrh	r0, [r0, #18]
 801026c:	4616      	mov	r6, r2
 801026e:	461f      	mov	r7, r3
 8010270:	f000 f9aa 	bl	80105c8 <uxr_seq_num_cmp>
 8010274:	2800      	cmp	r0, #0
 8010276:	db07      	blt.n	8010288 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8010278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801027c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010280:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8010284:	2000      	movs	r0, #0
 8010286:	bdd0      	pop	{r4, r6, r7, pc}
 8010288:	f894 0020 	ldrb.w	r0, [r4, #32]
 801028c:	b948      	cbnz	r0, 80102a2 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801028e:	2301      	movs	r3, #1
 8010290:	f884 3020 	strb.w	r3, [r4, #32]
 8010294:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8010298:	f147 0200 	adc.w	r2, r7, #0
 801029c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80102a0:	bdd0      	pop	{r4, r6, r7, pc}
 80102a2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80102a6:	4296      	cmp	r6, r2
 80102a8:	eb77 0303 	sbcs.w	r3, r7, r3
 80102ac:	bfa5      	ittet	ge
 80102ae:	3001      	addge	r0, #1
 80102b0:	f884 0020 	strbge.w	r0, [r4, #32]
 80102b4:	2000      	movlt	r0, #0
 80102b6:	2001      	movge	r0, #1
 80102b8:	e7ec      	b.n	8010294 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80102ba:	bf00      	nop

080102bc <uxr_begin_output_nack_buffer_it>:
 80102bc:	8a40      	ldrh	r0, [r0, #18]
 80102be:	4770      	bx	lr

080102c0 <uxr_next_reliable_nack_buffer_to_send>:
 80102c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102c4:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 80102c8:	f1b9 0f00 	cmp.w	r9, #0
 80102cc:	d011      	beq.n	80102f2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 80102ce:	4605      	mov	r5, r0
 80102d0:	8818      	ldrh	r0, [r3, #0]
 80102d2:	460f      	mov	r7, r1
 80102d4:	4690      	mov	r8, r2
 80102d6:	461e      	mov	r6, r3
 80102d8:	2101      	movs	r1, #1
 80102da:	f000 f96d 	bl	80105b8 <uxr_seq_num_add>
 80102de:	8030      	strh	r0, [r6, #0]
 80102e0:	8a29      	ldrh	r1, [r5, #16]
 80102e2:	f000 f971 	bl	80105c8 <uxr_seq_num_cmp>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	dd06      	ble.n	80102f8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 80102ea:	f04f 0900 	mov.w	r9, #0
 80102ee:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 80102f2:	4648      	mov	r0, r9
 80102f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f8:	892a      	ldrh	r2, [r5, #8]
 80102fa:	8830      	ldrh	r0, [r6, #0]
 80102fc:	fbb0 f4f2 	udiv	r4, r0, r2
 8010300:	fb02 0414 	mls	r4, r2, r4, r0
 8010304:	b2a4      	uxth	r4, r4
 8010306:	686b      	ldr	r3, [r5, #4]
 8010308:	fbb3 f2f2 	udiv	r2, r3, r2
 801030c:	682b      	ldr	r3, [r5, #0]
 801030e:	fb04 f402 	mul.w	r4, r4, r2
 8010312:	3404      	adds	r4, #4
 8010314:	4423      	add	r3, r4
 8010316:	603b      	str	r3, [r7, #0]
 8010318:	682b      	ldr	r3, [r5, #0]
 801031a:	441c      	add	r4, r3
 801031c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010320:	f8c8 3000 	str.w	r3, [r8]
 8010324:	7b2a      	ldrb	r2, [r5, #12]
 8010326:	429a      	cmp	r2, r3
 8010328:	d0d6      	beq.n	80102d8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801032a:	4648      	mov	r0, r9
 801032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010330 <uxr_process_acknack>:
 8010330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010332:	4604      	mov	r4, r0
 8010334:	460e      	mov	r6, r1
 8010336:	4610      	mov	r0, r2
 8010338:	2101      	movs	r1, #1
 801033a:	f000 f941 	bl	80105c0 <uxr_seq_num_sub>
 801033e:	8a61      	ldrh	r1, [r4, #18]
 8010340:	f000 f93e 	bl	80105c0 <uxr_seq_num_sub>
 8010344:	b1c0      	cbz	r0, 8010378 <uxr_process_acknack+0x48>
 8010346:	4605      	mov	r5, r0
 8010348:	2700      	movs	r7, #0
 801034a:	2101      	movs	r1, #1
 801034c:	8a60      	ldrh	r0, [r4, #18]
 801034e:	f000 f933 	bl	80105b8 <uxr_seq_num_add>
 8010352:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010356:	fbb0 f3fc 	udiv	r3, r0, ip
 801035a:	e9d4 2100 	ldrd	r2, r1, [r4]
 801035e:	fb0c 0313 	mls	r3, ip, r3, r0
 8010362:	b29b      	uxth	r3, r3
 8010364:	fbb1 f1fc 	udiv	r1, r1, ip
 8010368:	3701      	adds	r7, #1
 801036a:	fb03 f301 	mul.w	r3, r3, r1
 801036e:	42bd      	cmp	r5, r7
 8010370:	7b21      	ldrb	r1, [r4, #12]
 8010372:	8260      	strh	r0, [r4, #18]
 8010374:	50d1      	str	r1, [r2, r3]
 8010376:	d1e8      	bne.n	801034a <uxr_process_acknack+0x1a>
 8010378:	3e00      	subs	r6, #0
 801037a:	f04f 0300 	mov.w	r3, #0
 801037e:	bf18      	it	ne
 8010380:	2601      	movne	r6, #1
 8010382:	f884 3020 	strb.w	r3, [r4, #32]
 8010386:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801038a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801038c <uxr_is_output_up_to_date>:
 801038c:	8a01      	ldrh	r1, [r0, #16]
 801038e:	8a40      	ldrh	r0, [r0, #18]
 8010390:	b508      	push	{r3, lr}
 8010392:	f000 f919 	bl	80105c8 <uxr_seq_num_cmp>
 8010396:	fab0 f080 	clz	r0, r0
 801039a:	0940      	lsrs	r0, r0, #5
 801039c:	bd08      	pop	{r3, pc}
 801039e:	bf00      	nop

080103a0 <get_available_free_slots>:
 80103a0:	8901      	ldrh	r1, [r0, #8]
 80103a2:	b1d9      	cbz	r1, 80103dc <get_available_free_slots+0x3c>
 80103a4:	b4f0      	push	{r4, r5, r6, r7}
 80103a6:	2400      	movs	r4, #0
 80103a8:	6845      	ldr	r5, [r0, #4]
 80103aa:	6807      	ldr	r7, [r0, #0]
 80103ac:	7b06      	ldrb	r6, [r0, #12]
 80103ae:	fbb5 f5f1 	udiv	r5, r5, r1
 80103b2:	4620      	mov	r0, r4
 80103b4:	4622      	mov	r2, r4
 80103b6:	fbb2 f3f1 	udiv	r3, r2, r1
 80103ba:	fb01 2313 	mls	r3, r1, r3, r2
 80103be:	b29b      	uxth	r3, r3
 80103c0:	fb05 7303 	mla	r3, r5, r3, r7
 80103c4:	3401      	adds	r4, #1
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	429e      	cmp	r6, r3
 80103ca:	bf08      	it	eq
 80103cc:	3001      	addeq	r0, #1
 80103ce:	b2a2      	uxth	r2, r4
 80103d0:	bf08      	it	eq
 80103d2:	b280      	uxtheq	r0, r0
 80103d4:	428a      	cmp	r2, r1
 80103d6:	d3ee      	bcc.n	80103b6 <get_available_free_slots+0x16>
 80103d8:	bcf0      	pop	{r4, r5, r6, r7}
 80103da:	4770      	bx	lr
 80103dc:	4608      	mov	r0, r1
 80103de:	4770      	bx	lr

080103e0 <uxr_buffer_cancel_data>:
 80103e0:	b530      	push	{r4, r5, lr}
 80103e2:	b095      	sub	sp, #84	; 0x54
 80103e4:	2400      	movs	r4, #0
 80103e6:	2308      	movs	r3, #8
 80103e8:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	9205      	str	r2, [sp, #20]
 80103f0:	2501      	movs	r5, #1
 80103f2:	ab0c      	add	r3, sp, #48	; 0x30
 80103f4:	2210      	movs	r2, #16
 80103f6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80103fa:	f88d 401e 	strb.w	r4, [sp, #30]
 80103fe:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8010402:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010406:	9103      	str	r1, [sp, #12]
 8010408:	4604      	mov	r4, r0
 801040a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801040e:	f7fb fb7d 	bl	800bb0c <uxr_prepare_stream_to_write_submessage>
 8010412:	b918      	cbnz	r0, 801041c <uxr_buffer_cancel_data+0x3c>
 8010414:	4604      	mov	r4, r0
 8010416:	4620      	mov	r0, r4
 8010418:	b015      	add	sp, #84	; 0x54
 801041a:	bd30      	pop	{r4, r5, pc}
 801041c:	9905      	ldr	r1, [sp, #20]
 801041e:	aa06      	add	r2, sp, #24
 8010420:	4620      	mov	r0, r4
 8010422:	f7fb fcad 	bl	800bd80 <uxr_init_base_object_request>
 8010426:	a906      	add	r1, sp, #24
 8010428:	4604      	mov	r4, r0
 801042a:	a80c      	add	r0, sp, #48	; 0x30
 801042c:	f7fc fea6 	bl	800d17c <uxr_serialize_READ_DATA_Payload>
 8010430:	4620      	mov	r0, r4
 8010432:	b015      	add	sp, #84	; 0x54
 8010434:	bd30      	pop	{r4, r5, pc}
 8010436:	bf00      	nop

08010438 <read_submessage_format>:
 8010438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801043c:	b095      	sub	sp, #84	; 0x54
 801043e:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8010442:	b113      	cbz	r3, 801044a <read_submessage_format+0x12>
 8010444:	b015      	add	sp, #84	; 0x54
 8010446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801044a:	460c      	mov	r4, r1
 801044c:	4616      	mov	r6, r2
 801044e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010452:	461d      	mov	r5, r3
 8010454:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010456:	9304      	str	r3, [sp, #16]
 8010458:	1a52      	subs	r2, r2, r1
 801045a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801045c:	9305      	str	r3, [sp, #20]
 801045e:	4607      	mov	r7, r0
 8010460:	a80c      	add	r0, sp, #48	; 0x30
 8010462:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010466:	f7fa f9d5 	bl	800a814 <ucdr_init_buffer>
 801046a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801046e:	a80c      	add	r0, sp, #48	; 0x30
 8010470:	f7fa f9a6 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 8010474:	69e3      	ldr	r3, [r4, #28]
 8010476:	b193      	cbz	r3, 801049e <read_submessage_format+0x66>
 8010478:	f1b8 0f07 	cmp.w	r8, #7
 801047c:	751d      	strb	r5, [r3, #20]
 801047e:	d03e      	beq.n	80104fe <read_submessage_format+0xc6>
 8010480:	f1b8 0f08 	cmp.w	r8, #8
 8010484:	d02c      	beq.n	80104e0 <read_submessage_format+0xa8>
 8010486:	f1b8 0f06 	cmp.w	r8, #6
 801048a:	d011      	beq.n	80104b0 <read_submessage_format+0x78>
 801048c:	2201      	movs	r2, #1
 801048e:	751a      	strb	r2, [r3, #20]
 8010490:	4631      	mov	r1, r6
 8010492:	4620      	mov	r0, r4
 8010494:	f7fa fa0e 	bl	800a8b4 <ucdr_advance_buffer>
 8010498:	b015      	add	sp, #84	; 0x54
 801049a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801049e:	f1b8 0f07 	cmp.w	r8, #7
 80104a2:	d02c      	beq.n	80104fe <read_submessage_format+0xc6>
 80104a4:	f1b8 0f08 	cmp.w	r8, #8
 80104a8:	d01a      	beq.n	80104e0 <read_submessage_format+0xa8>
 80104aa:	f1b8 0f06 	cmp.w	r8, #6
 80104ae:	d1ef      	bne.n	8010490 <read_submessage_format+0x58>
 80104b0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80104b4:	b18d      	cbz	r5, 80104da <read_submessage_format+0xa2>
 80104b6:	2306      	movs	r3, #6
 80104b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80104bc:	aa0c      	add	r2, sp, #48	; 0x30
 80104be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104c2:	9302      	str	r3, [sp, #8]
 80104c4:	9200      	str	r2, [sp, #0]
 80104c6:	9b04      	ldr	r3, [sp, #16]
 80104c8:	9905      	ldr	r1, [sp, #20]
 80104ca:	9601      	str	r6, [sp, #4]
 80104cc:	464a      	mov	r2, r9
 80104ce:	4638      	mov	r0, r7
 80104d0:	47a8      	blx	r5
 80104d2:	2301      	movs	r3, #1
 80104d4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80104d8:	69e3      	ldr	r3, [r4, #28]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d1d6      	bne.n	801048c <read_submessage_format+0x54>
 80104de:	e7d7      	b.n	8010490 <read_submessage_format+0x58>
 80104e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80104e4:	2a00      	cmp	r2, #0
 80104e6:	d0f8      	beq.n	80104da <read_submessage_format+0xa2>
 80104e8:	a906      	add	r1, sp, #24
 80104ea:	a80c      	add	r0, sp, #48	; 0x30
 80104ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80104ee:	f7fc fee5 	bl	800d2bc <uxr_deserialize_SampleIdentity>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d13c      	bne.n	8010570 <read_submessage_format+0x138>
 80104f6:	69e3      	ldr	r3, [r4, #28]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1c7      	bne.n	801048c <read_submessage_format+0x54>
 80104fc:	e7c8      	b.n	8010490 <read_submessage_format+0x58>
 80104fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010502:	b132      	cbz	r2, 8010512 <read_submessage_format+0xda>
 8010504:	a906      	add	r1, sp, #24
 8010506:	a80c      	add	r0, sp, #48	; 0x30
 8010508:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801050a:	f7fc fbbb 	bl	800cc84 <uxr_deserialize_BaseObjectRequest>
 801050e:	b930      	cbnz	r0, 801051e <read_submessage_format+0xe6>
 8010510:	69e3      	ldr	r3, [r4, #28]
 8010512:	68a2      	ldr	r2, [r4, #8]
 8010514:	4432      	add	r2, r6
 8010516:	60a2      	str	r2, [r4, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1b7      	bne.n	801048c <read_submessage_format+0x54>
 801051c:	e7b8      	b.n	8010490 <read_submessage_format+0x58>
 801051e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010524:	1a52      	subs	r2, r2, r1
 8010526:	a80c      	add	r0, sp, #48	; 0x30
 8010528:	1aed      	subs	r5, r5, r3
 801052a:	f7fa f973 	bl	800a814 <ucdr_init_buffer>
 801052e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010532:	a80c      	add	r0, sp, #48	; 0x30
 8010534:	f7fa f944 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 8010538:	4435      	add	r5, r6
 801053a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801053e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010542:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8010546:	9002      	str	r0, [sp, #8]
 8010548:	2207      	movs	r2, #7
 801054a:	f88d 2016 	strb.w	r2, [sp, #22]
 801054e:	b2ad      	uxth	r5, r5
 8010550:	aa0c      	add	r2, sp, #48	; 0x30
 8010552:	9200      	str	r2, [sp, #0]
 8010554:	9501      	str	r5, [sp, #4]
 8010556:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801055a:	b29b      	uxth	r3, r3
 801055c:	9905      	ldr	r1, [sp, #20]
 801055e:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8010562:	464a      	mov	r2, r9
 8010564:	4638      	mov	r0, r7
 8010566:	47a8      	blx	r5
 8010568:	2301      	movs	r3, #1
 801056a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801056e:	e7cf      	b.n	8010510 <read_submessage_format+0xd8>
 8010570:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010576:	1a52      	subs	r2, r2, r1
 8010578:	a80c      	add	r0, sp, #48	; 0x30
 801057a:	1aed      	subs	r5, r5, r3
 801057c:	f7fa f94a 	bl	800a814 <ucdr_init_buffer>
 8010580:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010584:	a80c      	add	r0, sp, #48	; 0x30
 8010586:	f7fa f91b 	bl	800a7c0 <ucdr_set_on_full_buffer_callback>
 801058a:	4435      	add	r5, r6
 801058c:	2308      	movs	r3, #8
 801058e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010592:	f88d 3016 	strb.w	r3, [sp, #22]
 8010596:	b2ad      	uxth	r5, r5
 8010598:	ab0c      	add	r3, sp, #48	; 0x30
 801059a:	9300      	str	r3, [sp, #0]
 801059c:	9002      	str	r0, [sp, #8]
 801059e:	9501      	str	r5, [sp, #4]
 80105a0:	ab06      	add	r3, sp, #24
 80105a2:	9905      	ldr	r1, [sp, #20]
 80105a4:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 80105a8:	464a      	mov	r2, r9
 80105aa:	4638      	mov	r0, r7
 80105ac:	47a8      	blx	r5
 80105ae:	2301      	movs	r3, #1
 80105b0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80105b4:	e79f      	b.n	80104f6 <read_submessage_format+0xbe>
 80105b6:	bf00      	nop

080105b8 <uxr_seq_num_add>:
 80105b8:	4408      	add	r0, r1
 80105ba:	b280      	uxth	r0, r0
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop

080105c0 <uxr_seq_num_sub>:
 80105c0:	1a40      	subs	r0, r0, r1
 80105c2:	b280      	uxth	r0, r0
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop

080105c8 <uxr_seq_num_cmp>:
 80105c8:	4288      	cmp	r0, r1
 80105ca:	d011      	beq.n	80105f0 <uxr_seq_num_cmp+0x28>
 80105cc:	d309      	bcc.n	80105e2 <uxr_seq_num_cmp+0x1a>
 80105ce:	4288      	cmp	r0, r1
 80105d0:	d910      	bls.n	80105f4 <uxr_seq_num_cmp+0x2c>
 80105d2:	1a40      	subs	r0, r0, r1
 80105d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80105d8:	bfd4      	ite	le
 80105da:	2001      	movle	r0, #1
 80105dc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80105e0:	4770      	bx	lr
 80105e2:	1a0b      	subs	r3, r1, r0
 80105e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105e8:	daf1      	bge.n	80105ce <uxr_seq_num_cmp+0x6>
 80105ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105ee:	4770      	bx	lr
 80105f0:	2000      	movs	r0, #0
 80105f2:	4770      	bx	lr
 80105f4:	2001      	movs	r0, #1
 80105f6:	4770      	bx	lr

080105f8 <uxr_init_framing_io>:
 80105f8:	2300      	movs	r3, #0
 80105fa:	7041      	strb	r1, [r0, #1]
 80105fc:	7003      	strb	r3, [r0, #0]
 80105fe:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop

08010604 <uxr_write_framed_msg>:
 8010604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010608:	7845      	ldrb	r5, [r0, #1]
 801060a:	b085      	sub	sp, #20
 801060c:	4604      	mov	r4, r0
 801060e:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8010612:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8010616:	f1bc 0f01 	cmp.w	ip, #1
 801061a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801061e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8010622:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8010626:	460e      	mov	r6, r1
 8010628:	4617      	mov	r7, r2
 801062a:	469b      	mov	fp, r3
 801062c:	f240 8116 	bls.w	801085c <uxr_write_framed_msg+0x258>
 8010630:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8010634:	2302      	movs	r3, #2
 8010636:	2a01      	cmp	r2, #1
 8010638:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 801063c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010640:	f240 8091 	bls.w	8010766 <uxr_write_framed_msg+0x162>
 8010644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010646:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801064a:	b2d9      	uxtb	r1, r3
 801064c:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8010650:	2203      	movs	r2, #3
 8010652:	2b01      	cmp	r3, #1
 8010654:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010658:	f240 809a 	bls.w	8010790 <uxr_write_framed_msg+0x18c>
 801065c:	18a3      	adds	r3, r4, r2
 801065e:	3201      	adds	r2, #1
 8010660:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8010664:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801066a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801066e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8010672:	2901      	cmp	r1, #1
 8010674:	eb04 0102 	add.w	r1, r4, r2
 8010678:	f240 8101 	bls.w	801087e <uxr_write_framed_msg+0x27a>
 801067c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8010680:	3201      	adds	r2, #1
 8010682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010684:	b2d2      	uxtb	r2, r2
 8010686:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801068a:	2b00      	cmp	r3, #0
 801068c:	f000 8106 	beq.w	801089c <uxr_write_framed_msg+0x298>
 8010690:	f04f 0a00 	mov.w	sl, #0
 8010694:	46d1      	mov	r9, sl
 8010696:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801069a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801069e:	2901      	cmp	r1, #1
 80106a0:	f240 80a3 	bls.w	80107ea <uxr_write_framed_msg+0x1e6>
 80106a4:	2a29      	cmp	r2, #41	; 0x29
 80106a6:	d87f      	bhi.n	80107a8 <uxr_write_framed_msg+0x1a4>
 80106a8:	18a1      	adds	r1, r4, r2
 80106aa:	3201      	adds	r2, #1
 80106ac:	b2d2      	uxtb	r2, r2
 80106ae:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80106b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80106b6:	ea8a 0303 	eor.w	r3, sl, r3
 80106ba:	4984      	ldr	r1, [pc, #528]	; (80108cc <uxr_write_framed_msg+0x2c8>)
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	f109 0901 	add.w	r9, r9, #1
 80106c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80106c6:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80106ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106cc:	454b      	cmp	r3, r9
 80106ce:	d8e2      	bhi.n	8010696 <uxr_write_framed_msg+0x92>
 80106d0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80106d4:	fa5f f98a 	uxtb.w	r9, sl
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	f04f 0b00 	mov.w	fp, #0
 80106de:	f88d 900c 	strb.w	r9, [sp, #12]
 80106e2:	f88d 300d 	strb.w	r3, [sp, #13]
 80106e6:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80106ea:	fa5f f18a 	uxtb.w	r1, sl
 80106ee:	2901      	cmp	r1, #1
 80106f0:	d920      	bls.n	8010734 <uxr_write_framed_msg+0x130>
 80106f2:	2a29      	cmp	r2, #41	; 0x29
 80106f4:	f240 808b 	bls.w	801080e <uxr_write_framed_msg+0x20a>
 80106f8:	2500      	movs	r5, #0
 80106fa:	e000      	b.n	80106fe <uxr_write_framed_msg+0xfa>
 80106fc:	b160      	cbz	r0, 8010718 <uxr_write_framed_msg+0x114>
 80106fe:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010702:	1b52      	subs	r2, r2, r5
 8010704:	4421      	add	r1, r4
 8010706:	4643      	mov	r3, r8
 8010708:	4638      	mov	r0, r7
 801070a:	47b0      	blx	r6
 801070c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010710:	4405      	add	r5, r0
 8010712:	4295      	cmp	r5, r2
 8010714:	d3f2      	bcc.n	80106fc <uxr_write_framed_msg+0xf8>
 8010716:	d003      	beq.n	8010720 <uxr_write_framed_msg+0x11c>
 8010718:	2000      	movs	r0, #0
 801071a:	b005      	add	sp, #20
 801071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010720:	fa5f f18a 	uxtb.w	r1, sl
 8010724:	f04f 0300 	mov.w	r3, #0
 8010728:	2901      	cmp	r1, #1
 801072a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801072e:	f04f 0200 	mov.w	r2, #0
 8010732:	d86c      	bhi.n	801080e <uxr_write_framed_msg+0x20a>
 8010734:	1c51      	adds	r1, r2, #1
 8010736:	b2c9      	uxtb	r1, r1
 8010738:	2929      	cmp	r1, #41	; 0x29
 801073a:	d8dd      	bhi.n	80106f8 <uxr_write_framed_msg+0xf4>
 801073c:	18a0      	adds	r0, r4, r2
 801073e:	3202      	adds	r2, #2
 8010740:	f089 0920 	eor.w	r9, r9, #32
 8010744:	b2d2      	uxtb	r2, r2
 8010746:	4659      	mov	r1, fp
 8010748:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801074c:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8010750:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010754:	f04f 0b01 	mov.w	fp, #1
 8010758:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801075c:	2900      	cmp	r1, #0
 801075e:	d162      	bne.n	8010826 <uxr_write_framed_msg+0x222>
 8010760:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010764:	e7bf      	b.n	80106e6 <uxr_write_framed_msg+0xe2>
 8010766:	2204      	movs	r2, #4
 8010768:	2503      	movs	r5, #3
 801076a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801076c:	4423      	add	r3, r4
 801076e:	b2c9      	uxtb	r1, r1
 8010770:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8010774:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8010778:	4425      	add	r5, r4
 801077a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801077e:	f080 0020 	eor.w	r0, r0, #32
 8010782:	2b01      	cmp	r3, #1
 8010784:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8010788:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801078c:	f63f af66 	bhi.w	801065c <uxr_write_framed_msg+0x58>
 8010790:	18a3      	adds	r3, r4, r2
 8010792:	f081 0120 	eor.w	r1, r1, #32
 8010796:	3202      	adds	r2, #2
 8010798:	207d      	movs	r0, #125	; 0x7d
 801079a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801079e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80107a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80107a6:	e75f      	b.n	8010668 <uxr_write_framed_msg+0x64>
 80107a8:	2500      	movs	r5, #0
 80107aa:	e001      	b.n	80107b0 <uxr_write_framed_msg+0x1ac>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d0b3      	beq.n	8010718 <uxr_write_framed_msg+0x114>
 80107b0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80107b4:	1b52      	subs	r2, r2, r5
 80107b6:	4421      	add	r1, r4
 80107b8:	4643      	mov	r3, r8
 80107ba:	4638      	mov	r0, r7
 80107bc:	47b0      	blx	r6
 80107be:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80107c2:	4405      	add	r5, r0
 80107c4:	4295      	cmp	r5, r2
 80107c6:	d3f1      	bcc.n	80107ac <uxr_write_framed_msg+0x1a8>
 80107c8:	d1a6      	bne.n	8010718 <uxr_write_framed_msg+0x114>
 80107ca:	f04f 0300 	mov.w	r3, #0
 80107ce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80107d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107d4:	454b      	cmp	r3, r9
 80107d6:	d971      	bls.n	80108bc <uxr_write_framed_msg+0x2b8>
 80107d8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80107dc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80107e0:	2901      	cmp	r1, #1
 80107e2:	f04f 0200 	mov.w	r2, #0
 80107e6:	f63f af5d 	bhi.w	80106a4 <uxr_write_framed_msg+0xa0>
 80107ea:	1c51      	adds	r1, r2, #1
 80107ec:	b2c9      	uxtb	r1, r1
 80107ee:	2929      	cmp	r1, #41	; 0x29
 80107f0:	d8da      	bhi.n	80107a8 <uxr_write_framed_msg+0x1a4>
 80107f2:	18a0      	adds	r0, r4, r2
 80107f4:	3202      	adds	r2, #2
 80107f6:	b2d2      	uxtb	r2, r2
 80107f8:	f083 0120 	eor.w	r1, r3, #32
 80107fc:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8010800:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8010804:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8010808:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801080c:	e753      	b.n	80106b6 <uxr_write_framed_msg+0xb2>
 801080e:	18a0      	adds	r0, r4, r2
 8010810:	3201      	adds	r2, #1
 8010812:	b2d2      	uxtb	r2, r2
 8010814:	4659      	mov	r1, fp
 8010816:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801081a:	f04f 0b01 	mov.w	fp, #1
 801081e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010822:	2900      	cmp	r1, #0
 8010824:	d09c      	beq.n	8010760 <uxr_write_framed_msg+0x15c>
 8010826:	2500      	movs	r5, #0
 8010828:	e002      	b.n	8010830 <uxr_write_framed_msg+0x22c>
 801082a:	2800      	cmp	r0, #0
 801082c:	f43f af74 	beq.w	8010718 <uxr_write_framed_msg+0x114>
 8010830:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8010834:	1b52      	subs	r2, r2, r5
 8010836:	4421      	add	r1, r4
 8010838:	4643      	mov	r3, r8
 801083a:	4638      	mov	r0, r7
 801083c:	47b0      	blx	r6
 801083e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8010842:	4405      	add	r5, r0
 8010844:	4295      	cmp	r5, r2
 8010846:	d3f0      	bcc.n	801082a <uxr_write_framed_msg+0x226>
 8010848:	f47f af66 	bne.w	8010718 <uxr_write_framed_msg+0x114>
 801084c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801084e:	2300      	movs	r3, #0
 8010850:	b290      	uxth	r0, r2
 8010852:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010856:	b005      	add	sp, #20
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8010860:	f085 0520 	eor.w	r5, r5, #32
 8010864:	2303      	movs	r3, #3
 8010866:	217d      	movs	r1, #125	; 0x7d
 8010868:	2a01      	cmp	r2, #1
 801086a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801086e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8010872:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8010876:	d814      	bhi.n	80108a2 <uxr_write_framed_msg+0x29e>
 8010878:	2205      	movs	r2, #5
 801087a:	2504      	movs	r5, #4
 801087c:	e775      	b.n	801076a <uxr_write_framed_msg+0x166>
 801087e:	f083 0320 	eor.w	r3, r3, #32
 8010882:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8010886:	3202      	adds	r2, #2
 8010888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801088a:	b2d2      	uxtb	r2, r2
 801088c:	207d      	movs	r0, #125	; 0x7d
 801088e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8010892:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8010896:	2b00      	cmp	r3, #0
 8010898:	f47f aefa 	bne.w	8010690 <uxr_write_framed_msg+0x8c>
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	4699      	mov	r9, r3
 80108a0:	e71b      	b.n	80106da <uxr_write_framed_msg+0xd6>
 80108a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108a4:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80108a8:	b2d9      	uxtb	r1, r3
 80108aa:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80108ae:	2204      	movs	r2, #4
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80108b6:	f63f aed1 	bhi.w	801065c <uxr_write_framed_msg+0x58>
 80108ba:	e769      	b.n	8010790 <uxr_write_framed_msg+0x18c>
 80108bc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80108c0:	fa5f f98a 	uxtb.w	r9, sl
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	e707      	b.n	80106da <uxr_write_framed_msg+0xd6>
 80108ca:	bf00      	nop
 80108cc:	080131a8 	.word	0x080131a8

080108d0 <uxr_framing_read_transport>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	4604      	mov	r4, r0
 80108d6:	b083      	sub	sp, #12
 80108d8:	461f      	mov	r7, r3
 80108da:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80108de:	4689      	mov	r9, r1
 80108e0:	4692      	mov	sl, r2
 80108e2:	f7fb fbfd 	bl	800c0e0 <uxr_millis>
 80108e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80108ea:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80108ee:	42b3      	cmp	r3, r6
 80108f0:	4680      	mov	r8, r0
 80108f2:	d05f      	beq.n	80109b4 <uxr_framing_read_transport+0xe4>
 80108f4:	d81b      	bhi.n	801092e <uxr_framing_read_transport+0x5e>
 80108f6:	1e75      	subs	r5, r6, #1
 80108f8:	1aed      	subs	r5, r5, r3
 80108fa:	b2ed      	uxtb	r5, r5
 80108fc:	2600      	movs	r6, #0
 80108fe:	455d      	cmp	r5, fp
 8010900:	d81e      	bhi.n	8010940 <uxr_framing_read_transport+0x70>
 8010902:	19ab      	adds	r3, r5, r6
 8010904:	455b      	cmp	r3, fp
 8010906:	bf84      	itt	hi
 8010908:	ebab 0605 	subhi.w	r6, fp, r5
 801090c:	b2f6      	uxtbhi	r6, r6
 801090e:	b9e5      	cbnz	r5, 801094a <uxr_framing_read_transport+0x7a>
 8010910:	f04f 0b00 	mov.w	fp, #0
 8010914:	f7fb fbe4 	bl	800c0e0 <uxr_millis>
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	eba0 0008 	sub.w	r0, r0, r8
 801091e:	1a1b      	subs	r3, r3, r0
 8010920:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010924:	4658      	mov	r0, fp
 8010926:	603b      	str	r3, [r7, #0]
 8010928:	b003      	add	sp, #12
 801092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092e:	2e00      	cmp	r6, #0
 8010930:	d048      	beq.n	80109c4 <uxr_framing_read_transport+0xf4>
 8010932:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8010936:	b2ed      	uxtb	r5, r5
 8010938:	3e01      	subs	r6, #1
 801093a:	455d      	cmp	r5, fp
 801093c:	b2f6      	uxtb	r6, r6
 801093e:	d9e0      	bls.n	8010902 <uxr_framing_read_transport+0x32>
 8010940:	fa5f f58b 	uxtb.w	r5, fp
 8010944:	2600      	movs	r6, #0
 8010946:	2d00      	cmp	r5, #0
 8010948:	d0e2      	beq.n	8010910 <uxr_framing_read_transport+0x40>
 801094a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801094e:	3102      	adds	r1, #2
 8010950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	4421      	add	r1, r4
 8010958:	462a      	mov	r2, r5
 801095a:	4650      	mov	r0, sl
 801095c:	47c8      	blx	r9
 801095e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010962:	4a1b      	ldr	r2, [pc, #108]	; (80109d0 <uxr_framing_read_transport+0x100>)
 8010964:	4403      	add	r3, r0
 8010966:	0859      	lsrs	r1, r3, #1
 8010968:	fba2 2101 	umull	r2, r1, r2, r1
 801096c:	0889      	lsrs	r1, r1, #2
 801096e:	222a      	movs	r2, #42	; 0x2a
 8010970:	fb02 3111 	mls	r1, r2, r1, r3
 8010974:	4683      	mov	fp, r0
 8010976:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801097a:	2800      	cmp	r0, #0
 801097c:	d0c8      	beq.n	8010910 <uxr_framing_read_transport+0x40>
 801097e:	42a8      	cmp	r0, r5
 8010980:	d1c8      	bne.n	8010914 <uxr_framing_read_transport+0x44>
 8010982:	b31e      	cbz	r6, 80109cc <uxr_framing_read_transport+0xfc>
 8010984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	3102      	adds	r1, #2
 801098a:	4421      	add	r1, r4
 801098c:	4632      	mov	r2, r6
 801098e:	2300      	movs	r3, #0
 8010990:	4650      	mov	r0, sl
 8010992:	47c8      	blx	r9
 8010994:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010998:	490d      	ldr	r1, [pc, #52]	; (80109d0 <uxr_framing_read_transport+0x100>)
 801099a:	181a      	adds	r2, r3, r0
 801099c:	0853      	lsrs	r3, r2, #1
 801099e:	fba1 1303 	umull	r1, r3, r1, r3
 80109a2:	089b      	lsrs	r3, r3, #2
 80109a4:	212a      	movs	r1, #42	; 0x2a
 80109a6:	fb01 2313 	mls	r3, r1, r3, r2
 80109aa:	eb00 0b05 	add.w	fp, r0, r5
 80109ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80109b2:	e7af      	b.n	8010914 <uxr_framing_read_transport+0x44>
 80109b4:	2600      	movs	r6, #0
 80109b6:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80109ba:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80109bc:	d9c0      	bls.n	8010940 <uxr_framing_read_transport+0x70>
 80109be:	2102      	movs	r1, #2
 80109c0:	2529      	movs	r5, #41	; 0x29
 80109c2:	e7c5      	b.n	8010950 <uxr_framing_read_transport+0x80>
 80109c4:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80109c8:	b2ed      	uxtb	r5, r5
 80109ca:	e798      	b.n	80108fe <uxr_framing_read_transport+0x2e>
 80109cc:	46ab      	mov	fp, r5
 80109ce:	e7a1      	b.n	8010914 <uxr_framing_read_transport+0x44>
 80109d0:	30c30c31 	.word	0x30c30c31

080109d4 <uxr_read_framed_msg>:
 80109d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d8:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80109dc:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80109e0:	42ae      	cmp	r6, r5
 80109e2:	b083      	sub	sp, #12
 80109e4:	4604      	mov	r4, r0
 80109e6:	461f      	mov	r7, r3
 80109e8:	4689      	mov	r9, r1
 80109ea:	4692      	mov	sl, r2
 80109ec:	f000 817d 	beq.w	8010cea <uxr_read_framed_msg+0x316>
 80109f0:	7823      	ldrb	r3, [r4, #0]
 80109f2:	4ecc      	ldr	r6, [pc, #816]	; (8010d24 <uxr_read_framed_msg+0x350>)
 80109f4:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8010d28 <uxr_read_framed_msg+0x354>
 80109f8:	2b07      	cmp	r3, #7
 80109fa:	d8fd      	bhi.n	80109f8 <uxr_read_framed_msg+0x24>
 80109fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010a00:	00f40113 	.word	0x00f40113
 8010a04:	00b700d4 	.word	0x00b700d4
 8010a08:	004d008e 	.word	0x004d008e
 8010a0c:	00080030 	.word	0x00080030
 8010a10:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010a14:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010a18:	4298      	cmp	r0, r3
 8010a1a:	f000 8141 	beq.w	8010ca0 <uxr_read_framed_msg+0x2cc>
 8010a1e:	18e2      	adds	r2, r4, r3
 8010a20:	7891      	ldrb	r1, [r2, #2]
 8010a22:	297d      	cmp	r1, #125	; 0x7d
 8010a24:	f000 81a2 	beq.w	8010d6c <uxr_read_framed_msg+0x398>
 8010a28:	3301      	adds	r3, #1
 8010a2a:	085a      	lsrs	r2, r3, #1
 8010a2c:	fba6 0202 	umull	r0, r2, r6, r2
 8010a30:	0892      	lsrs	r2, r2, #2
 8010a32:	202a      	movs	r0, #42	; 0x2a
 8010a34:	fb00 3312 	mls	r3, r0, r2, r3
 8010a38:	297e      	cmp	r1, #126	; 0x7e
 8010a3a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010a3e:	f000 8251 	beq.w	8010ee4 <uxr_read_framed_msg+0x510>
 8010a42:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010a44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8010a46:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	2100      	movs	r1, #0
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	86a3      	strh	r3, [r4, #52]	; 0x34
 8010a52:	7021      	strb	r1, [r4, #0]
 8010a54:	f000 8182 	beq.w	8010d5c <uxr_read_framed_msg+0x388>
 8010a58:	2000      	movs	r0, #0
 8010a5a:	b003      	add	sp, #12
 8010a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a60:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010a64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010a68:	4298      	cmp	r0, r3
 8010a6a:	f000 8128 	beq.w	8010cbe <uxr_read_framed_msg+0x2ea>
 8010a6e:	18e2      	adds	r2, r4, r3
 8010a70:	7891      	ldrb	r1, [r2, #2]
 8010a72:	297d      	cmp	r1, #125	; 0x7d
 8010a74:	f000 8196 	beq.w	8010da4 <uxr_read_framed_msg+0x3d0>
 8010a78:	3301      	adds	r3, #1
 8010a7a:	085a      	lsrs	r2, r3, #1
 8010a7c:	fba6 0202 	umull	r0, r2, r6, r2
 8010a80:	0892      	lsrs	r2, r2, #2
 8010a82:	202a      	movs	r0, #42	; 0x2a
 8010a84:	fb00 3312 	mls	r3, r0, r2, r3
 8010a88:	297e      	cmp	r1, #126	; 0x7e
 8010a8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010a8e:	f000 8219 	beq.w	8010ec4 <uxr_read_framed_msg+0x4f0>
 8010a92:	2307      	movs	r3, #7
 8010a94:	86a1      	strh	r1, [r4, #52]	; 0x34
 8010a96:	7023      	strb	r3, [r4, #0]
 8010a98:	e7ae      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010a9a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010a9c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8010a9e:	429d      	cmp	r5, r3
 8010aa0:	d937      	bls.n	8010b12 <uxr_read_framed_msg+0x13e>
 8010aa2:	ee07 9a90 	vmov	s15, r9
 8010aa6:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010aaa:	e01e      	b.n	8010aea <uxr_read_framed_msg+0x116>
 8010aac:	f89e e002 	ldrb.w	lr, [lr, #2]
 8010ab0:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8010ab4:	f000 80d2 	beq.w	8010c5c <uxr_read_framed_msg+0x288>
 8010ab8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8010abc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010ac0:	f000 8214 	beq.w	8010eec <uxr_read_framed_msg+0x518>
 8010ac4:	f807 e003 	strb.w	lr, [r7, r3]
 8010ac8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8010aca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010acc:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8010ace:	ea80 010e 	eor.w	r1, r0, lr
 8010ad2:	b2c9      	uxtb	r1, r1
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8010ae0:	42ab      	cmp	r3, r5
 8010ae2:	86e2      	strh	r2, [r4, #54]	; 0x36
 8010ae4:	8663      	strh	r3, [r4, #50]	; 0x32
 8010ae6:	f080 8121 	bcs.w	8010d2c <uxr_read_framed_msg+0x358>
 8010aea:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8010aee:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010af2:	f101 0b01 	add.w	fp, r1, #1
 8010af6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8010afa:	fba6 9202 	umull	r9, r2, r6, r2
 8010afe:	0892      	lsrs	r2, r2, #2
 8010b00:	4288      	cmp	r0, r1
 8010b02:	eb04 0e01 	add.w	lr, r4, r1
 8010b06:	fb0c b212 	mls	r2, ip, r2, fp
 8010b0a:	d1cf      	bne.n	8010aac <uxr_read_framed_msg+0xd8>
 8010b0c:	ee17 9a90 	vmov	r9, s15
 8010b10:	429d      	cmp	r5, r3
 8010b12:	f040 8112 	bne.w	8010d3a <uxr_read_framed_msg+0x366>
 8010b16:	2306      	movs	r3, #6
 8010b18:	7023      	strb	r3, [r4, #0]
 8010b1a:	e76d      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010b1c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010b20:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010b24:	4298      	cmp	r0, r3
 8010b26:	f000 80bb 	beq.w	8010ca0 <uxr_read_framed_msg+0x2cc>
 8010b2a:	18e2      	adds	r2, r4, r3
 8010b2c:	7891      	ldrb	r1, [r2, #2]
 8010b2e:	297d      	cmp	r1, #125	; 0x7d
 8010b30:	f000 8153 	beq.w	8010dda <uxr_read_framed_msg+0x406>
 8010b34:	3301      	adds	r3, #1
 8010b36:	085a      	lsrs	r2, r3, #1
 8010b38:	fba6 0202 	umull	r0, r2, r6, r2
 8010b3c:	0892      	lsrs	r2, r2, #2
 8010b3e:	202a      	movs	r0, #42	; 0x2a
 8010b40:	fb00 3212 	mls	r2, r0, r2, r3
 8010b44:	297e      	cmp	r1, #126	; 0x7e
 8010b46:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010b4a:	f000 81cb 	beq.w	8010ee4 <uxr_read_framed_msg+0x510>
 8010b4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8010b50:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010b54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	2000      	movs	r0, #0
 8010b5a:	428b      	cmp	r3, r1
 8010b5c:	8623      	strh	r3, [r4, #48]	; 0x30
 8010b5e:	8660      	strh	r0, [r4, #50]	; 0x32
 8010b60:	86e0      	strh	r0, [r4, #54]	; 0x36
 8010b62:	f240 80db 	bls.w	8010d1c <uxr_read_framed_msg+0x348>
 8010b66:	7020      	strb	r0, [r4, #0]
 8010b68:	b003      	add	sp, #12
 8010b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b6e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010b72:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010b76:	4298      	cmp	r0, r3
 8010b78:	f000 80a1 	beq.w	8010cbe <uxr_read_framed_msg+0x2ea>
 8010b7c:	18e2      	adds	r2, r4, r3
 8010b7e:	7891      	ldrb	r1, [r2, #2]
 8010b80:	297d      	cmp	r1, #125	; 0x7d
 8010b82:	f000 8167 	beq.w	8010e54 <uxr_read_framed_msg+0x480>
 8010b86:	3301      	adds	r3, #1
 8010b88:	085a      	lsrs	r2, r3, #1
 8010b8a:	fba6 0202 	umull	r0, r2, r6, r2
 8010b8e:	0892      	lsrs	r2, r2, #2
 8010b90:	202a      	movs	r0, #42	; 0x2a
 8010b92:	fb00 3312 	mls	r3, r0, r2, r3
 8010b96:	297e      	cmp	r1, #126	; 0x7e
 8010b98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010b9c:	f000 8192 	beq.w	8010ec4 <uxr_read_framed_msg+0x4f0>
 8010ba0:	2304      	movs	r3, #4
 8010ba2:	8621      	strh	r1, [r4, #48]	; 0x30
 8010ba4:	7023      	strb	r3, [r4, #0]
 8010ba6:	e727      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010ba8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8010bac:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010bb0:	4290      	cmp	r0, r2
 8010bb2:	f000 80b1 	beq.w	8010d18 <uxr_read_framed_msg+0x344>
 8010bb6:	18a3      	adds	r3, r4, r2
 8010bb8:	7899      	ldrb	r1, [r3, #2]
 8010bba:	297d      	cmp	r1, #125	; 0x7d
 8010bbc:	f000 8166 	beq.w	8010e8c <uxr_read_framed_msg+0x4b8>
 8010bc0:	3201      	adds	r2, #1
 8010bc2:	0850      	lsrs	r0, r2, #1
 8010bc4:	fba6 3000 	umull	r3, r0, r6, r0
 8010bc8:	0880      	lsrs	r0, r0, #2
 8010bca:	232a      	movs	r3, #42	; 0x2a
 8010bcc:	fb03 2210 	mls	r2, r3, r0, r2
 8010bd0:	297e      	cmp	r1, #126	; 0x7e
 8010bd2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010bd6:	f000 8187 	beq.w	8010ee8 <uxr_read_framed_msg+0x514>
 8010bda:	7863      	ldrb	r3, [r4, #1]
 8010bdc:	428b      	cmp	r3, r1
 8010bde:	bf0c      	ite	eq
 8010be0:	2303      	moveq	r3, #3
 8010be2:	2300      	movne	r3, #0
 8010be4:	7023      	strb	r3, [r4, #0]
 8010be6:	e707      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010be8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8010bec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8010bf8:	d063      	beq.n	8010cc2 <uxr_read_framed_msg+0x2ee>
 8010bfa:	18e2      	adds	r2, r4, r3
 8010bfc:	7892      	ldrb	r2, [r2, #2]
 8010bfe:	2a7d      	cmp	r2, #125	; 0x7d
 8010c00:	f000 8107 	beq.w	8010e12 <uxr_read_framed_msg+0x43e>
 8010c04:	1c59      	adds	r1, r3, #1
 8010c06:	084b      	lsrs	r3, r1, #1
 8010c08:	fba6 0303 	umull	r0, r3, r6, r3
 8010c0c:	089b      	lsrs	r3, r3, #2
 8010c0e:	202a      	movs	r0, #42	; 0x2a
 8010c10:	fb00 1313 	mls	r3, r0, r3, r1
 8010c14:	2a7e      	cmp	r2, #126	; 0x7e
 8010c16:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8010c1a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010c1e:	d050      	beq.n	8010cc2 <uxr_read_framed_msg+0x2ee>
 8010c20:	2302      	movs	r3, #2
 8010c22:	7023      	strb	r3, [r4, #0]
 8010c24:	e6e8      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010c26:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8010c2a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010c2e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8010c32:	1c51      	adds	r1, r2, #1
 8010c34:	084b      	lsrs	r3, r1, #1
 8010c36:	fba6 5303 	umull	r5, r3, r6, r3
 8010c3a:	089b      	lsrs	r3, r3, #2
 8010c3c:	fb0c 1313 	mls	r3, ip, r3, r1
 8010c40:	4596      	cmp	lr, r2
 8010c42:	eb04 0002 	add.w	r0, r4, r2
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	f43f af06 	beq.w	8010a58 <uxr_read_framed_msg+0x84>
 8010c4c:	7883      	ldrb	r3, [r0, #2]
 8010c4e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010c52:	2b7e      	cmp	r3, #126	; 0x7e
 8010c54:	d1ed      	bne.n	8010c32 <uxr_read_framed_msg+0x25e>
 8010c56:	2301      	movs	r3, #1
 8010c58:	7023      	strb	r3, [r4, #0]
 8010c5a:	e6cd      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010c5c:	f101 0b01 	add.w	fp, r1, #1
 8010c60:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8010c64:	fba6 e202 	umull	lr, r2, r6, r2
 8010c68:	3102      	adds	r1, #2
 8010c6a:	0892      	lsrs	r2, r2, #2
 8010c6c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8010c70:	fb0c b212 	mls	r2, ip, r2, fp
 8010c74:	fba6 9e0e 	umull	r9, lr, r6, lr
 8010c78:	eb04 0b02 	add.w	fp, r4, r2
 8010c7c:	b2d2      	uxtb	r2, r2
 8010c7e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8010c82:	4290      	cmp	r0, r2
 8010c84:	fb0c 111e 	mls	r1, ip, lr, r1
 8010c88:	f43f af40 	beq.w	8010b0c <uxr_read_framed_msg+0x138>
 8010c8c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8010c90:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8010c94:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8010c98:	d036      	beq.n	8010d08 <uxr_read_framed_msg+0x334>
 8010c9a:	f08e 0e20 	eor.w	lr, lr, #32
 8010c9e:	e711      	b.n	8010ac4 <uxr_read_framed_msg+0xf0>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ca4:	4649      	mov	r1, r9
 8010ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8010caa:	4620      	mov	r0, r4
 8010cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cae:	4652      	mov	r2, sl
 8010cb0:	f7ff fe0e 	bl	80108d0 <uxr_framing_read_transport>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f43f aecf 	beq.w	8010a58 <uxr_read_framed_msg+0x84>
 8010cba:	7823      	ldrb	r3, [r4, #0]
 8010cbc:	e69c      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010cbe:	2302      	movs	r3, #2
 8010cc0:	e7ef      	b.n	8010ca2 <uxr_read_framed_msg+0x2ce>
 8010cc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010cc4:	2304      	movs	r3, #4
 8010cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8010cca:	4649      	mov	r1, r9
 8010ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cce:	4652      	mov	r2, sl
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	f7ff fdfd 	bl	80108d0 <uxr_framing_read_transport>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d1ef      	bne.n	8010cba <uxr_read_framed_msg+0x2e6>
 8010cda:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8010cde:	387e      	subs	r0, #126	; 0x7e
 8010ce0:	bf18      	it	ne
 8010ce2:	2001      	movne	r0, #1
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d0e8      	beq.n	8010cba <uxr_read_framed_msg+0x2e6>
 8010ce8:	e6b6      	b.n	8010a58 <uxr_read_framed_msg+0x84>
 8010cea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010cec:	2305      	movs	r3, #5
 8010cee:	e9cd 5300 	strd	r5, r3, [sp]
 8010cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cf4:	f7ff fdec 	bl	80108d0 <uxr_framing_read_transport>
 8010cf8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8010cfc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010d00:	429a      	cmp	r2, r3
 8010d02:	f43f aea9 	beq.w	8010a58 <uxr_read_framed_msg+0x84>
 8010d06:	e673      	b.n	80109f0 <uxr_read_framed_msg+0x1c>
 8010d08:	429d      	cmp	r5, r3
 8010d0a:	ee17 9a90 	vmov	r9, s15
 8010d0e:	f43f af02 	beq.w	8010b16 <uxr_read_framed_msg+0x142>
 8010d12:	2301      	movs	r3, #1
 8010d14:	7023      	strb	r3, [r4, #0]
 8010d16:	e66f      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010d18:	2303      	movs	r3, #3
 8010d1a:	e7c2      	b.n	8010ca2 <uxr_read_framed_msg+0x2ce>
 8010d1c:	2305      	movs	r3, #5
 8010d1e:	7023      	strb	r3, [r4, #0]
 8010d20:	e66a      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010d22:	bf00      	nop
 8010d24:	30c30c31 	.word	0x30c30c31
 8010d28:	080131a8 	.word	0x080131a8
 8010d2c:	ee17 9a90 	vmov	r9, s15
 8010d30:	f43f aef1 	beq.w	8010b16 <uxr_read_framed_msg+0x142>
 8010d34:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8010d38:	d08d      	beq.n	8010c56 <uxr_read_framed_msg+0x282>
 8010d3a:	1aeb      	subs	r3, r5, r3
 8010d3c:	3302      	adds	r3, #2
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	4652      	mov	r2, sl
 8010d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d48:	4649      	mov	r1, r9
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f7ff fdc0 	bl	80108d0 <uxr_framing_read_transport>
 8010d50:	fab0 f080 	clz	r0, r0
 8010d54:	0940      	lsrs	r0, r0, #5
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d0af      	beq.n	8010cba <uxr_read_framed_msg+0x2e6>
 8010d5a:	e67d      	b.n	8010a58 <uxr_read_framed_msg+0x84>
 8010d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d5e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010d62:	7013      	strb	r3, [r2, #0]
 8010d64:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8010d66:	b003      	add	sp, #12
 8010d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6c:	1c59      	adds	r1, r3, #1
 8010d6e:	084a      	lsrs	r2, r1, #1
 8010d70:	fba6 5202 	umull	r5, r2, r6, r2
 8010d74:	0892      	lsrs	r2, r2, #2
 8010d76:	252a      	movs	r5, #42	; 0x2a
 8010d78:	fb05 1212 	mls	r2, r5, r2, r1
 8010d7c:	b2d1      	uxtb	r1, r2
 8010d7e:	4288      	cmp	r0, r1
 8010d80:	d08e      	beq.n	8010ca0 <uxr_read_framed_msg+0x2cc>
 8010d82:	3302      	adds	r3, #2
 8010d84:	4422      	add	r2, r4
 8010d86:	0858      	lsrs	r0, r3, #1
 8010d88:	fba6 1000 	umull	r1, r0, r6, r0
 8010d8c:	7891      	ldrb	r1, [r2, #2]
 8010d8e:	0882      	lsrs	r2, r0, #2
 8010d90:	fb05 3312 	mls	r3, r5, r2, r3
 8010d94:	297e      	cmp	r1, #126	; 0x7e
 8010d96:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010d9a:	f000 80a3 	beq.w	8010ee4 <uxr_read_framed_msg+0x510>
 8010d9e:	f081 0120 	eor.w	r1, r1, #32
 8010da2:	e64e      	b.n	8010a42 <uxr_read_framed_msg+0x6e>
 8010da4:	1c59      	adds	r1, r3, #1
 8010da6:	084a      	lsrs	r2, r1, #1
 8010da8:	fba6 5202 	umull	r5, r2, r6, r2
 8010dac:	0892      	lsrs	r2, r2, #2
 8010dae:	252a      	movs	r5, #42	; 0x2a
 8010db0:	fb05 1212 	mls	r2, r5, r2, r1
 8010db4:	b2d1      	uxtb	r1, r2
 8010db6:	4288      	cmp	r0, r1
 8010db8:	d081      	beq.n	8010cbe <uxr_read_framed_msg+0x2ea>
 8010dba:	3302      	adds	r3, #2
 8010dbc:	4422      	add	r2, r4
 8010dbe:	0858      	lsrs	r0, r3, #1
 8010dc0:	fba6 1000 	umull	r1, r0, r6, r0
 8010dc4:	7891      	ldrb	r1, [r2, #2]
 8010dc6:	0882      	lsrs	r2, r0, #2
 8010dc8:	fb05 3312 	mls	r3, r5, r2, r3
 8010dcc:	297e      	cmp	r1, #126	; 0x7e
 8010dce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010dd2:	d077      	beq.n	8010ec4 <uxr_read_framed_msg+0x4f0>
 8010dd4:	f081 0120 	eor.w	r1, r1, #32
 8010dd8:	e65b      	b.n	8010a92 <uxr_read_framed_msg+0xbe>
 8010dda:	1c59      	adds	r1, r3, #1
 8010ddc:	084a      	lsrs	r2, r1, #1
 8010dde:	fba6 5202 	umull	r5, r2, r6, r2
 8010de2:	0892      	lsrs	r2, r2, #2
 8010de4:	252a      	movs	r5, #42	; 0x2a
 8010de6:	fb05 1212 	mls	r2, r5, r2, r1
 8010dea:	b2d1      	uxtb	r1, r2
 8010dec:	4288      	cmp	r0, r1
 8010dee:	f43f af57 	beq.w	8010ca0 <uxr_read_framed_msg+0x2cc>
 8010df2:	3302      	adds	r3, #2
 8010df4:	4422      	add	r2, r4
 8010df6:	0858      	lsrs	r0, r3, #1
 8010df8:	fba6 1000 	umull	r1, r0, r6, r0
 8010dfc:	7891      	ldrb	r1, [r2, #2]
 8010dfe:	0882      	lsrs	r2, r0, #2
 8010e00:	fb05 3312 	mls	r3, r5, r2, r3
 8010e04:	297e      	cmp	r1, #126	; 0x7e
 8010e06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010e0a:	d06b      	beq.n	8010ee4 <uxr_read_framed_msg+0x510>
 8010e0c:	f081 0120 	eor.w	r1, r1, #32
 8010e10:	e69d      	b.n	8010b4e <uxr_read_framed_msg+0x17a>
 8010e12:	1c5d      	adds	r5, r3, #1
 8010e14:	086a      	lsrs	r2, r5, #1
 8010e16:	fba6 0202 	umull	r0, r2, r6, r2
 8010e1a:	0892      	lsrs	r2, r2, #2
 8010e1c:	202a      	movs	r0, #42	; 0x2a
 8010e1e:	fb00 5212 	mls	r2, r0, r2, r5
 8010e22:	b2d5      	uxtb	r5, r2
 8010e24:	42a9      	cmp	r1, r5
 8010e26:	f43f af4c 	beq.w	8010cc2 <uxr_read_framed_msg+0x2ee>
 8010e2a:	3302      	adds	r3, #2
 8010e2c:	4422      	add	r2, r4
 8010e2e:	0859      	lsrs	r1, r3, #1
 8010e30:	fba6 5101 	umull	r5, r1, r6, r1
 8010e34:	7895      	ldrb	r5, [r2, #2]
 8010e36:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8010e3a:	088a      	lsrs	r2, r1, #2
 8010e3c:	fb00 3312 	mls	r3, r0, r2, r3
 8010e40:	2d7e      	cmp	r5, #126	; 0x7e
 8010e42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010e46:	f43f af3c 	beq.w	8010cc2 <uxr_read_framed_msg+0x2ee>
 8010e4a:	f085 0520 	eor.w	r5, r5, #32
 8010e4e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8010e52:	e6e5      	b.n	8010c20 <uxr_read_framed_msg+0x24c>
 8010e54:	1c59      	adds	r1, r3, #1
 8010e56:	084a      	lsrs	r2, r1, #1
 8010e58:	fba6 5202 	umull	r5, r2, r6, r2
 8010e5c:	0892      	lsrs	r2, r2, #2
 8010e5e:	252a      	movs	r5, #42	; 0x2a
 8010e60:	fb05 1212 	mls	r2, r5, r2, r1
 8010e64:	b2d1      	uxtb	r1, r2
 8010e66:	4288      	cmp	r0, r1
 8010e68:	f43f af29 	beq.w	8010cbe <uxr_read_framed_msg+0x2ea>
 8010e6c:	3302      	adds	r3, #2
 8010e6e:	4422      	add	r2, r4
 8010e70:	0858      	lsrs	r0, r3, #1
 8010e72:	fba6 1000 	umull	r1, r0, r6, r0
 8010e76:	7891      	ldrb	r1, [r2, #2]
 8010e78:	0882      	lsrs	r2, r0, #2
 8010e7a:	fb05 3312 	mls	r3, r5, r2, r3
 8010e7e:	297e      	cmp	r1, #126	; 0x7e
 8010e80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010e84:	d01e      	beq.n	8010ec4 <uxr_read_framed_msg+0x4f0>
 8010e86:	f081 0120 	eor.w	r1, r1, #32
 8010e8a:	e689      	b.n	8010ba0 <uxr_read_framed_msg+0x1cc>
 8010e8c:	1c51      	adds	r1, r2, #1
 8010e8e:	084b      	lsrs	r3, r1, #1
 8010e90:	fba6 5303 	umull	r5, r3, r6, r3
 8010e94:	089b      	lsrs	r3, r3, #2
 8010e96:	252a      	movs	r5, #42	; 0x2a
 8010e98:	fb05 1313 	mls	r3, r5, r3, r1
 8010e9c:	b2d9      	uxtb	r1, r3
 8010e9e:	4288      	cmp	r0, r1
 8010ea0:	f43f af3a 	beq.w	8010d18 <uxr_read_framed_msg+0x344>
 8010ea4:	3202      	adds	r2, #2
 8010ea6:	4423      	add	r3, r4
 8010ea8:	0850      	lsrs	r0, r2, #1
 8010eaa:	789b      	ldrb	r3, [r3, #2]
 8010eac:	fba6 1000 	umull	r1, r0, r6, r0
 8010eb0:	0880      	lsrs	r0, r0, #2
 8010eb2:	fb05 2210 	mls	r2, r5, r0, r2
 8010eb6:	2b7e      	cmp	r3, #126	; 0x7e
 8010eb8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8010ebc:	d014      	beq.n	8010ee8 <uxr_read_framed_msg+0x514>
 8010ebe:	f083 0120 	eor.w	r1, r3, #32
 8010ec2:	e68a      	b.n	8010bda <uxr_read_framed_msg+0x206>
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ec8:	4649      	mov	r1, r9
 8010eca:	e9cd 2300 	strd	r2, r3, [sp]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ed2:	4652      	mov	r2, sl
 8010ed4:	f7ff fcfc 	bl	80108d0 <uxr_framing_read_transport>
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	f47f aeee 	bne.w	8010cba <uxr_read_framed_msg+0x2e6>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	7023      	strb	r3, [r4, #0]
 8010ee2:	e589      	b.n	80109f8 <uxr_read_framed_msg+0x24>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e7ee      	b.n	8010ec6 <uxr_read_framed_msg+0x4f2>
 8010ee8:	2303      	movs	r3, #3
 8010eea:	e7ec      	b.n	8010ec6 <uxr_read_framed_msg+0x4f2>
 8010eec:	ee17 9a90 	vmov	r9, s15
 8010ef0:	e6b1      	b.n	8010c56 <uxr_read_framed_msg+0x282>
 8010ef2:	bf00      	nop

08010ef4 <rcl_get_default_domain_id>:
 8010ef4:	b530      	push	{r4, r5, lr}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	2300      	movs	r3, #0
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	b1d0      	cbz	r0, 8010f34 <rcl_get_default_domain_id+0x40>
 8010efe:	4604      	mov	r4, r0
 8010f00:	4669      	mov	r1, sp
 8010f02:	4815      	ldr	r0, [pc, #84]	; (8010f58 <rcl_get_default_domain_id+0x64>)
 8010f04:	f7fd fb76 	bl	800e5f4 <rcutils_get_env>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	b110      	cbz	r0, 8010f12 <rcl_get_default_domain_id+0x1e>
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	b003      	add	sp, #12
 8010f10:	bd30      	pop	{r4, r5, pc}
 8010f12:	9b00      	ldr	r3, [sp, #0]
 8010f14:	b18b      	cbz	r3, 8010f3a <rcl_get_default_domain_id+0x46>
 8010f16:	7818      	ldrb	r0, [r3, #0]
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d0f8      	beq.n	8010f0e <rcl_get_default_domain_id+0x1a>
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	a901      	add	r1, sp, #4
 8010f20:	9201      	str	r2, [sp, #4]
 8010f22:	f000 fc01 	bl	8011728 <strtoul>
 8010f26:	4605      	mov	r5, r0
 8010f28:	b150      	cbz	r0, 8010f40 <rcl_get_default_domain_id+0x4c>
 8010f2a:	1c43      	adds	r3, r0, #1
 8010f2c:	d00d      	beq.n	8010f4a <rcl_get_default_domain_id+0x56>
 8010f2e:	6025      	str	r5, [r4, #0]
 8010f30:	2000      	movs	r0, #0
 8010f32:	e7ec      	b.n	8010f0e <rcl_get_default_domain_id+0x1a>
 8010f34:	200b      	movs	r0, #11
 8010f36:	b003      	add	sp, #12
 8010f38:	bd30      	pop	{r4, r5, pc}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	b003      	add	sp, #12
 8010f3e:	bd30      	pop	{r4, r5, pc}
 8010f40:	9b01      	ldr	r3, [sp, #4]
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d0f2      	beq.n	8010f2e <rcl_get_default_domain_id+0x3a>
 8010f48:	e7e0      	b.n	8010f0c <rcl_get_default_domain_id+0x18>
 8010f4a:	f000 fe29 	bl	8011ba0 <__errno>
 8010f4e:	6803      	ldr	r3, [r0, #0]
 8010f50:	2b22      	cmp	r3, #34	; 0x22
 8010f52:	d1ec      	bne.n	8010f2e <rcl_get_default_domain_id+0x3a>
 8010f54:	e7da      	b.n	8010f0c <rcl_get_default_domain_id+0x18>
 8010f56:	bf00      	nop
 8010f58:	080133a8 	.word	0x080133a8

08010f5c <rcl_get_zero_initialized_guard_condition>:
 8010f5c:	4a03      	ldr	r2, [pc, #12]	; (8010f6c <rcl_get_zero_initialized_guard_condition+0x10>)
 8010f5e:	4603      	mov	r3, r0
 8010f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f64:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	4770      	bx	lr
 8010f6c:	080133b8 	.word	0x080133b8

08010f70 <rcl_guard_condition_init_from_rmw>:
 8010f70:	b082      	sub	sp, #8
 8010f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f76:	b086      	sub	sp, #24
 8010f78:	ac0c      	add	r4, sp, #48	; 0x30
 8010f7a:	4684      	mov	ip, r0
 8010f7c:	f844 3f04 	str.w	r3, [r4, #4]!
 8010f80:	460f      	mov	r7, r1
 8010f82:	4690      	mov	r8, r2
 8010f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f86:	ad01      	add	r5, sp, #4
 8010f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	602b      	str	r3, [r5, #0]
 8010f8e:	a801      	add	r0, sp, #4
 8010f90:	4664      	mov	r4, ip
 8010f92:	f7f7 f865 	bl	8008060 <rcutils_allocator_is_valid>
 8010f96:	b328      	cbz	r0, 8010fe4 <rcl_guard_condition_init_from_rmw+0x74>
 8010f98:	b324      	cbz	r4, 8010fe4 <rcl_guard_condition_init_from_rmw+0x74>
 8010f9a:	6866      	ldr	r6, [r4, #4]
 8010f9c:	b9e6      	cbnz	r6, 8010fd8 <rcl_guard_condition_init_from_rmw+0x68>
 8010f9e:	f1b8 0f00 	cmp.w	r8, #0
 8010fa2:	d01f      	beq.n	8010fe4 <rcl_guard_condition_init_from_rmw+0x74>
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	f7fc f9d1 	bl	800d34c <rcl_context_is_valid>
 8010faa:	b308      	cbz	r0, 8010ff0 <rcl_guard_condition_init_from_rmw+0x80>
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	9905      	ldr	r1, [sp, #20]
 8010fb0:	201c      	movs	r0, #28
 8010fb2:	4798      	blx	r3
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	6060      	str	r0, [r4, #4]
 8010fb8:	b340      	cbz	r0, 801100c <rcl_guard_condition_init_from_rmw+0x9c>
 8010fba:	b1df      	cbz	r7, 8010ff4 <rcl_guard_condition_init_from_rmw+0x84>
 8010fbc:	6007      	str	r7, [r0, #0]
 8010fbe:	7106      	strb	r6, [r0, #4]
 8010fc0:	ac01      	add	r4, sp, #4
 8010fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fc4:	3508      	adds	r5, #8
 8010fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fc8:	6823      	ldr	r3, [r4, #0]
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	2000      	movs	r0, #0
 8010fce:	b006      	add	sp, #24
 8010fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd4:	b002      	add	sp, #8
 8010fd6:	4770      	bx	lr
 8010fd8:	2064      	movs	r0, #100	; 0x64
 8010fda:	b006      	add	sp, #24
 8010fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe0:	b002      	add	sp, #8
 8010fe2:	4770      	bx	lr
 8010fe4:	200b      	movs	r0, #11
 8010fe6:	b006      	add	sp, #24
 8010fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fec:	b002      	add	sp, #8
 8010fee:	4770      	bx	lr
 8010ff0:	2065      	movs	r0, #101	; 0x65
 8010ff2:	e7f2      	b.n	8010fda <rcl_guard_condition_init_from_rmw+0x6a>
 8010ff4:	f8d8 0000 	ldr.w	r0, [r8]
 8010ff8:	3028      	adds	r0, #40	; 0x28
 8010ffa:	f000 f935 	bl	8011268 <rmw_create_guard_condition>
 8010ffe:	6028      	str	r0, [r5, #0]
 8011000:	6865      	ldr	r5, [r4, #4]
 8011002:	682e      	ldr	r6, [r5, #0]
 8011004:	b126      	cbz	r6, 8011010 <rcl_guard_condition_init_from_rmw+0xa0>
 8011006:	2301      	movs	r3, #1
 8011008:	712b      	strb	r3, [r5, #4]
 801100a:	e7d9      	b.n	8010fc0 <rcl_guard_condition_init_from_rmw+0x50>
 801100c:	200a      	movs	r0, #10
 801100e:	e7e4      	b.n	8010fda <rcl_guard_condition_init_from_rmw+0x6a>
 8011010:	4628      	mov	r0, r5
 8011012:	9b02      	ldr	r3, [sp, #8]
 8011014:	9905      	ldr	r1, [sp, #20]
 8011016:	4798      	blx	r3
 8011018:	6066      	str	r6, [r4, #4]
 801101a:	2001      	movs	r0, #1
 801101c:	e7dd      	b.n	8010fda <rcl_guard_condition_init_from_rmw+0x6a>
 801101e:	bf00      	nop

08011020 <rcl_guard_condition_fini>:
 8011020:	b570      	push	{r4, r5, r6, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	b1f0      	cbz	r0, 8011064 <rcl_guard_condition_fini+0x44>
 8011026:	4604      	mov	r4, r0
 8011028:	6840      	ldr	r0, [r0, #4]
 801102a:	b158      	cbz	r0, 8011044 <rcl_guard_condition_fini+0x24>
 801102c:	6803      	ldr	r3, [r0, #0]
 801102e:	68c6      	ldr	r6, [r0, #12]
 8011030:	6981      	ldr	r1, [r0, #24]
 8011032:	b15b      	cbz	r3, 801104c <rcl_guard_condition_fini+0x2c>
 8011034:	7905      	ldrb	r5, [r0, #4]
 8011036:	b95d      	cbnz	r5, 8011050 <rcl_guard_condition_fini+0x30>
 8011038:	47b0      	blx	r6
 801103a:	2300      	movs	r3, #0
 801103c:	4628      	mov	r0, r5
 801103e:	6063      	str	r3, [r4, #4]
 8011040:	b002      	add	sp, #8
 8011042:	bd70      	pop	{r4, r5, r6, pc}
 8011044:	4605      	mov	r5, r0
 8011046:	4628      	mov	r0, r5
 8011048:	b002      	add	sp, #8
 801104a:	bd70      	pop	{r4, r5, r6, pc}
 801104c:	461d      	mov	r5, r3
 801104e:	e7f3      	b.n	8011038 <rcl_guard_condition_fini+0x18>
 8011050:	4618      	mov	r0, r3
 8011052:	9101      	str	r1, [sp, #4]
 8011054:	f000 f91c 	bl	8011290 <rmw_destroy_guard_condition>
 8011058:	1e05      	subs	r5, r0, #0
 801105a:	9901      	ldr	r1, [sp, #4]
 801105c:	6860      	ldr	r0, [r4, #4]
 801105e:	bf18      	it	ne
 8011060:	2501      	movne	r5, #1
 8011062:	e7e9      	b.n	8011038 <rcl_guard_condition_fini+0x18>
 8011064:	250b      	movs	r5, #11
 8011066:	4628      	mov	r0, r5
 8011068:	b002      	add	sp, #8
 801106a:	bd70      	pop	{r4, r5, r6, pc}

0801106c <rcl_guard_condition_get_default_options>:
 801106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801106e:	b087      	sub	sp, #28
 8011070:	4607      	mov	r7, r0
 8011072:	466c      	mov	r4, sp
 8011074:	4668      	mov	r0, sp
 8011076:	f7f6 ffe5 	bl	8008044 <rcutils_get_default_allocator>
 801107a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801107c:	4d07      	ldr	r5, [pc, #28]	; (801109c <rcl_guard_condition_get_default_options+0x30>)
 801107e:	f8d4 c000 	ldr.w	ip, [r4]
 8011082:	462e      	mov	r6, r5
 8011084:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011086:	462c      	mov	r4, r5
 8011088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801108a:	463c      	mov	r4, r7
 801108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801108e:	4638      	mov	r0, r7
 8011090:	f8c6 c000 	str.w	ip, [r6]
 8011094:	f8c4 c000 	str.w	ip, [r4]
 8011098:	b007      	add	sp, #28
 801109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801109c:	200092ec 	.word	0x200092ec

080110a0 <on_status>:
 80110a0:	b082      	sub	sp, #8
 80110a2:	b002      	add	sp, #8
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop

080110a8 <on_topic>:
 80110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110ac:	4a21      	ldr	r2, [pc, #132]	; (8011134 <on_topic+0x8c>)
 80110ae:	b094      	sub	sp, #80	; 0x50
 80110b0:	6812      	ldr	r2, [r2, #0]
 80110b2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80110b4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80110b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80110ba:	9312      	str	r3, [sp, #72]	; 0x48
 80110bc:	b3ba      	cbz	r2, 801112e <on_topic+0x86>
 80110be:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80110c2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80110c6:	e001      	b.n	80110cc <on_topic+0x24>
 80110c8:	6892      	ldr	r2, [r2, #8]
 80110ca:	b382      	cbz	r2, 801112e <on_topic+0x86>
 80110cc:	68d4      	ldr	r4, [r2, #12]
 80110ce:	8aa3      	ldrh	r3, [r4, #20]
 80110d0:	428b      	cmp	r3, r1
 80110d2:	d1f9      	bne.n	80110c8 <on_topic+0x20>
 80110d4:	7da3      	ldrb	r3, [r4, #22]
 80110d6:	4283      	cmp	r3, r0
 80110d8:	d1f6      	bne.n	80110c8 <on_topic+0x20>
 80110da:	2248      	movs	r2, #72	; 0x48
 80110dc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80110e0:	4668      	mov	r0, sp
 80110e2:	f000 fd92 	bl	8011c0a <memcpy>
 80110e6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80110ea:	4620      	mov	r0, r4
 80110ec:	f7f7 fd5a 	bl	8008ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80110f0:	4607      	mov	r7, r0
 80110f2:	b1e0      	cbz	r0, 801112e <on_topic+0x86>
 80110f4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80110f8:	462a      	mov	r2, r5
 80110fa:	4630      	mov	r0, r6
 80110fc:	f108 0110 	add.w	r1, r8, #16
 8011100:	f7fe fa54 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 8011104:	b930      	cbnz	r0, 8011114 <on_topic+0x6c>
 8011106:	480c      	ldr	r0, [pc, #48]	; (8011138 <on_topic+0x90>)
 8011108:	4639      	mov	r1, r7
 801110a:	b014      	add	sp, #80	; 0x50
 801110c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011110:	f7fd bc94 	b.w	800ea3c <put_memory>
 8011114:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8011118:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801111c:	f7fe f970 	bl	800f400 <rmw_uros_epoch_nanos>
 8011120:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8011124:	2305      	movs	r3, #5
 8011126:	e9c2 0100 	strd	r0, r1, [r2]
 801112a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801112e:	b014      	add	sp, #80	; 0x50
 8011130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011134:	2000c6f4 	.word	0x2000c6f4
 8011138:	20009488 	.word	0x20009488

0801113c <on_request>:
 801113c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011140:	4822      	ldr	r0, [pc, #136]	; (80111cc <on_request+0x90>)
 8011142:	b095      	sub	sp, #84	; 0x54
 8011144:	9113      	str	r1, [sp, #76]	; 0x4c
 8011146:	6801      	ldr	r1, [r0, #0]
 8011148:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801114a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801114e:	2900      	cmp	r1, #0
 8011150:	d039      	beq.n	80111c6 <on_request+0x8a>
 8011152:	461d      	mov	r5, r3
 8011154:	e001      	b.n	801115a <on_request+0x1e>
 8011156:	6889      	ldr	r1, [r1, #8]
 8011158:	b3a9      	cbz	r1, 80111c6 <on_request+0x8a>
 801115a:	68cc      	ldr	r4, [r1, #12]
 801115c:	8b20      	ldrh	r0, [r4, #24]
 801115e:	4290      	cmp	r0, r2
 8011160:	d1f9      	bne.n	8011156 <on_request+0x1a>
 8011162:	2248      	movs	r2, #72	; 0x48
 8011164:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011168:	4668      	mov	r0, sp
 801116a:	f000 fd4e 	bl	8011c0a <memcpy>
 801116e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011172:	4620      	mov	r0, r4
 8011174:	f7f7 fd16 	bl	8008ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011178:	4680      	mov	r8, r0
 801117a:	b320      	cbz	r0, 80111c6 <on_request+0x8a>
 801117c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8011180:	4632      	mov	r2, r6
 8011182:	4638      	mov	r0, r7
 8011184:	f109 0110 	add.w	r1, r9, #16
 8011188:	f7fe fa10 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 801118c:	b930      	cbnz	r0, 801119c <on_request+0x60>
 801118e:	4810      	ldr	r0, [pc, #64]	; (80111d0 <on_request+0x94>)
 8011190:	4641      	mov	r1, r8
 8011192:	b015      	add	sp, #84	; 0x54
 8011194:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011198:	f7fd bc50 	b.w	800ea3c <put_memory>
 801119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801119e:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80111a2:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80111a6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80111aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80111b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80111b4:	f7fe f924 	bl	800f400 <rmw_uros_epoch_nanos>
 80111b8:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80111bc:	2303      	movs	r3, #3
 80111be:	e9c2 0100 	strd	r0, r1, [r2]
 80111c2:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80111c6:	b015      	add	sp, #84	; 0x54
 80111c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111cc:	2000c6e4 	.word	0x2000c6e4
 80111d0:	20009488 	.word	0x20009488

080111d4 <on_reply>:
 80111d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111d8:	4821      	ldr	r0, [pc, #132]	; (8011260 <on_reply+0x8c>)
 80111da:	b095      	sub	sp, #84	; 0x54
 80111dc:	9113      	str	r1, [sp, #76]	; 0x4c
 80111de:	6801      	ldr	r1, [r0, #0]
 80111e0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80111e2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80111e6:	b3b9      	cbz	r1, 8011258 <on_reply+0x84>
 80111e8:	461d      	mov	r5, r3
 80111ea:	e001      	b.n	80111f0 <on_reply+0x1c>
 80111ec:	6889      	ldr	r1, [r1, #8]
 80111ee:	b399      	cbz	r1, 8011258 <on_reply+0x84>
 80111f0:	68cc      	ldr	r4, [r1, #12]
 80111f2:	8b20      	ldrh	r0, [r4, #24]
 80111f4:	4290      	cmp	r0, r2
 80111f6:	d1f9      	bne.n	80111ec <on_reply+0x18>
 80111f8:	2248      	movs	r2, #72	; 0x48
 80111fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80111fe:	4668      	mov	r0, sp
 8011200:	f000 fd03 	bl	8011c0a <memcpy>
 8011204:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011208:	4620      	mov	r0, r4
 801120a:	f7f7 fccb 	bl	8008ba4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801120e:	4680      	mov	r8, r0
 8011210:	b310      	cbz	r0, 8011258 <on_reply+0x84>
 8011212:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8011216:	4632      	mov	r2, r6
 8011218:	4638      	mov	r0, r7
 801121a:	f109 0110 	add.w	r1, r9, #16
 801121e:	f7fe f9c5 	bl	800f5ac <ucdr_deserialize_array_uint8_t>
 8011222:	b930      	cbnz	r0, 8011232 <on_reply+0x5e>
 8011224:	480f      	ldr	r0, [pc, #60]	; (8011264 <on_reply+0x90>)
 8011226:	4641      	mov	r1, r8
 8011228:	b015      	add	sp, #84	; 0x54
 801122a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801122e:	f7fd bc05 	b.w	800ea3c <put_memory>
 8011232:	b2aa      	uxth	r2, r5
 8011234:	2300      	movs	r3, #0
 8011236:	f609 0128 	addw	r1, r9, #2088	; 0x828
 801123a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801123e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8011242:	e9c1 2300 	strd	r2, r3, [r1]
 8011246:	f7fe f8db 	bl	800f400 <rmw_uros_epoch_nanos>
 801124a:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801124e:	2304      	movs	r3, #4
 8011250:	e9c2 0100 	strd	r0, r1, [r2]
 8011254:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8011258:	b015      	add	sp, #84	; 0x54
 801125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801125e:	bf00      	nop
 8011260:	20009d18 	.word	0x20009d18
 8011264:	20009488 	.word	0x20009488

08011268 <rmw_create_guard_condition>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	4605      	mov	r5, r0
 801126c:	4807      	ldr	r0, [pc, #28]	; (801128c <rmw_create_guard_condition+0x24>)
 801126e:	f7fd fbd5 	bl	800ea1c <get_memory>
 8011272:	b148      	cbz	r0, 8011288 <rmw_create_guard_condition+0x20>
 8011274:	68c4      	ldr	r4, [r0, #12]
 8011276:	2300      	movs	r3, #0
 8011278:	61e5      	str	r5, [r4, #28]
 801127a:	7423      	strb	r3, [r4, #16]
 801127c:	f7fd fc36 	bl	800eaec <rmw_get_implementation_identifier>
 8011280:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8011284:	f104 0014 	add.w	r0, r4, #20
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	2000c610 	.word	0x2000c610

08011290 <rmw_destroy_guard_condition>:
 8011290:	b508      	push	{r3, lr}
 8011292:	4b08      	ldr	r3, [pc, #32]	; (80112b4 <rmw_destroy_guard_condition+0x24>)
 8011294:	6819      	ldr	r1, [r3, #0]
 8011296:	b911      	cbnz	r1, 801129e <rmw_destroy_guard_condition+0xe>
 8011298:	e00a      	b.n	80112b0 <rmw_destroy_guard_condition+0x20>
 801129a:	6889      	ldr	r1, [r1, #8]
 801129c:	b141      	cbz	r1, 80112b0 <rmw_destroy_guard_condition+0x20>
 801129e:	68cb      	ldr	r3, [r1, #12]
 80112a0:	3314      	adds	r3, #20
 80112a2:	4298      	cmp	r0, r3
 80112a4:	d1f9      	bne.n	801129a <rmw_destroy_guard_condition+0xa>
 80112a6:	4803      	ldr	r0, [pc, #12]	; (80112b4 <rmw_destroy_guard_condition+0x24>)
 80112a8:	f7fd fbc8 	bl	800ea3c <put_memory>
 80112ac:	2000      	movs	r0, #0
 80112ae:	bd08      	pop	{r3, pc}
 80112b0:	2001      	movs	r0, #1
 80112b2:	bd08      	pop	{r3, pc}
 80112b4:	2000c610 	.word	0x2000c610

080112b8 <calloc>:
 80112b8:	4b02      	ldr	r3, [pc, #8]	; (80112c4 <calloc+0xc>)
 80112ba:	460a      	mov	r2, r1
 80112bc:	4601      	mov	r1, r0
 80112be:	6818      	ldr	r0, [r3, #0]
 80112c0:	f000 b802 	b.w	80112c8 <_calloc_r>
 80112c4:	20000114 	.word	0x20000114

080112c8 <_calloc_r>:
 80112c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112ca:	fba1 2402 	umull	r2, r4, r1, r2
 80112ce:	b94c      	cbnz	r4, 80112e4 <_calloc_r+0x1c>
 80112d0:	4611      	mov	r1, r2
 80112d2:	9201      	str	r2, [sp, #4]
 80112d4:	f000 f886 	bl	80113e4 <_malloc_r>
 80112d8:	9a01      	ldr	r2, [sp, #4]
 80112da:	4605      	mov	r5, r0
 80112dc:	b930      	cbnz	r0, 80112ec <_calloc_r+0x24>
 80112de:	4628      	mov	r0, r5
 80112e0:	b003      	add	sp, #12
 80112e2:	bd30      	pop	{r4, r5, pc}
 80112e4:	220c      	movs	r2, #12
 80112e6:	6002      	str	r2, [r0, #0]
 80112e8:	2500      	movs	r5, #0
 80112ea:	e7f8      	b.n	80112de <_calloc_r+0x16>
 80112ec:	4621      	mov	r1, r4
 80112ee:	f000 fbc3 	bl	8011a78 <memset>
 80112f2:	e7f4      	b.n	80112de <_calloc_r+0x16>

080112f4 <getenv>:
 80112f4:	b507      	push	{r0, r1, r2, lr}
 80112f6:	4b04      	ldr	r3, [pc, #16]	; (8011308 <getenv+0x14>)
 80112f8:	4601      	mov	r1, r0
 80112fa:	aa01      	add	r2, sp, #4
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	f000 f805 	bl	801130c <_findenv_r>
 8011302:	b003      	add	sp, #12
 8011304:	f85d fb04 	ldr.w	pc, [sp], #4
 8011308:	20000114 	.word	0x20000114

0801130c <_findenv_r>:
 801130c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011310:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8011380 <_findenv_r+0x74>
 8011314:	4607      	mov	r7, r0
 8011316:	4689      	mov	r9, r1
 8011318:	4616      	mov	r6, r2
 801131a:	f000 fca3 	bl	8011c64 <__env_lock>
 801131e:	f8da 4000 	ldr.w	r4, [sl]
 8011322:	b134      	cbz	r4, 8011332 <_findenv_r+0x26>
 8011324:	464b      	mov	r3, r9
 8011326:	4698      	mov	r8, r3
 8011328:	f813 2b01 	ldrb.w	r2, [r3], #1
 801132c:	b13a      	cbz	r2, 801133e <_findenv_r+0x32>
 801132e:	2a3d      	cmp	r2, #61	; 0x3d
 8011330:	d1f9      	bne.n	8011326 <_findenv_r+0x1a>
 8011332:	4638      	mov	r0, r7
 8011334:	f000 fc9c 	bl	8011c70 <__env_unlock>
 8011338:	2000      	movs	r0, #0
 801133a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133e:	eba8 0809 	sub.w	r8, r8, r9
 8011342:	46a3      	mov	fp, r4
 8011344:	f854 0b04 	ldr.w	r0, [r4], #4
 8011348:	2800      	cmp	r0, #0
 801134a:	d0f2      	beq.n	8011332 <_findenv_r+0x26>
 801134c:	4642      	mov	r2, r8
 801134e:	4649      	mov	r1, r9
 8011350:	f000 fba7 	bl	8011aa2 <strncmp>
 8011354:	2800      	cmp	r0, #0
 8011356:	d1f4      	bne.n	8011342 <_findenv_r+0x36>
 8011358:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801135c:	eb03 0508 	add.w	r5, r3, r8
 8011360:	f813 3008 	ldrb.w	r3, [r3, r8]
 8011364:	2b3d      	cmp	r3, #61	; 0x3d
 8011366:	d1ec      	bne.n	8011342 <_findenv_r+0x36>
 8011368:	f8da 3000 	ldr.w	r3, [sl]
 801136c:	ebab 0303 	sub.w	r3, fp, r3
 8011370:	109b      	asrs	r3, r3, #2
 8011372:	4638      	mov	r0, r7
 8011374:	6033      	str	r3, [r6, #0]
 8011376:	f000 fc7b 	bl	8011c70 <__env_unlock>
 801137a:	1c68      	adds	r0, r5, #1
 801137c:	e7dd      	b.n	801133a <_findenv_r+0x2e>
 801137e:	bf00      	nop
 8011380:	20000000 	.word	0x20000000

08011384 <malloc>:
 8011384:	4b02      	ldr	r3, [pc, #8]	; (8011390 <malloc+0xc>)
 8011386:	4601      	mov	r1, r0
 8011388:	6818      	ldr	r0, [r3, #0]
 801138a:	f000 b82b 	b.w	80113e4 <_malloc_r>
 801138e:	bf00      	nop
 8011390:	20000114 	.word	0x20000114

08011394 <free>:
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <free+0xc>)
 8011396:	4601      	mov	r1, r0
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	f000 bc6f 	b.w	8011c7c <_free_r>
 801139e:	bf00      	nop
 80113a0:	20000114 	.word	0x20000114

080113a4 <sbrk_aligned>:
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	4e0e      	ldr	r6, [pc, #56]	; (80113e0 <sbrk_aligned+0x3c>)
 80113a8:	460c      	mov	r4, r1
 80113aa:	6831      	ldr	r1, [r6, #0]
 80113ac:	4605      	mov	r5, r0
 80113ae:	b911      	cbnz	r1, 80113b6 <sbrk_aligned+0x12>
 80113b0:	f000 fbd4 	bl	8011b5c <_sbrk_r>
 80113b4:	6030      	str	r0, [r6, #0]
 80113b6:	4621      	mov	r1, r4
 80113b8:	4628      	mov	r0, r5
 80113ba:	f000 fbcf 	bl	8011b5c <_sbrk_r>
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	d00a      	beq.n	80113d8 <sbrk_aligned+0x34>
 80113c2:	1cc4      	adds	r4, r0, #3
 80113c4:	f024 0403 	bic.w	r4, r4, #3
 80113c8:	42a0      	cmp	r0, r4
 80113ca:	d007      	beq.n	80113dc <sbrk_aligned+0x38>
 80113cc:	1a21      	subs	r1, r4, r0
 80113ce:	4628      	mov	r0, r5
 80113d0:	f000 fbc4 	bl	8011b5c <_sbrk_r>
 80113d4:	3001      	adds	r0, #1
 80113d6:	d101      	bne.n	80113dc <sbrk_aligned+0x38>
 80113d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80113dc:	4620      	mov	r0, r4
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	20009304 	.word	0x20009304

080113e4 <_malloc_r>:
 80113e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	1ccd      	adds	r5, r1, #3
 80113ea:	f025 0503 	bic.w	r5, r5, #3
 80113ee:	3508      	adds	r5, #8
 80113f0:	2d0c      	cmp	r5, #12
 80113f2:	bf38      	it	cc
 80113f4:	250c      	movcc	r5, #12
 80113f6:	2d00      	cmp	r5, #0
 80113f8:	4607      	mov	r7, r0
 80113fa:	db01      	blt.n	8011400 <_malloc_r+0x1c>
 80113fc:	42a9      	cmp	r1, r5
 80113fe:	d905      	bls.n	801140c <_malloc_r+0x28>
 8011400:	230c      	movs	r3, #12
 8011402:	603b      	str	r3, [r7, #0]
 8011404:	2600      	movs	r6, #0
 8011406:	4630      	mov	r0, r6
 8011408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801140c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80114e0 <_malloc_r+0xfc>
 8011410:	f000 f868 	bl	80114e4 <__malloc_lock>
 8011414:	f8d8 3000 	ldr.w	r3, [r8]
 8011418:	461c      	mov	r4, r3
 801141a:	bb5c      	cbnz	r4, 8011474 <_malloc_r+0x90>
 801141c:	4629      	mov	r1, r5
 801141e:	4638      	mov	r0, r7
 8011420:	f7ff ffc0 	bl	80113a4 <sbrk_aligned>
 8011424:	1c43      	adds	r3, r0, #1
 8011426:	4604      	mov	r4, r0
 8011428:	d155      	bne.n	80114d6 <_malloc_r+0xf2>
 801142a:	f8d8 4000 	ldr.w	r4, [r8]
 801142e:	4626      	mov	r6, r4
 8011430:	2e00      	cmp	r6, #0
 8011432:	d145      	bne.n	80114c0 <_malloc_r+0xdc>
 8011434:	2c00      	cmp	r4, #0
 8011436:	d048      	beq.n	80114ca <_malloc_r+0xe6>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	4631      	mov	r1, r6
 801143c:	4638      	mov	r0, r7
 801143e:	eb04 0903 	add.w	r9, r4, r3
 8011442:	f000 fb8b 	bl	8011b5c <_sbrk_r>
 8011446:	4581      	cmp	r9, r0
 8011448:	d13f      	bne.n	80114ca <_malloc_r+0xe6>
 801144a:	6821      	ldr	r1, [r4, #0]
 801144c:	1a6d      	subs	r5, r5, r1
 801144e:	4629      	mov	r1, r5
 8011450:	4638      	mov	r0, r7
 8011452:	f7ff ffa7 	bl	80113a4 <sbrk_aligned>
 8011456:	3001      	adds	r0, #1
 8011458:	d037      	beq.n	80114ca <_malloc_r+0xe6>
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	442b      	add	r3, r5
 801145e:	6023      	str	r3, [r4, #0]
 8011460:	f8d8 3000 	ldr.w	r3, [r8]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d038      	beq.n	80114da <_malloc_r+0xf6>
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	42a2      	cmp	r2, r4
 801146c:	d12b      	bne.n	80114c6 <_malloc_r+0xe2>
 801146e:	2200      	movs	r2, #0
 8011470:	605a      	str	r2, [r3, #4]
 8011472:	e00f      	b.n	8011494 <_malloc_r+0xb0>
 8011474:	6822      	ldr	r2, [r4, #0]
 8011476:	1b52      	subs	r2, r2, r5
 8011478:	d41f      	bmi.n	80114ba <_malloc_r+0xd6>
 801147a:	2a0b      	cmp	r2, #11
 801147c:	d917      	bls.n	80114ae <_malloc_r+0xca>
 801147e:	1961      	adds	r1, r4, r5
 8011480:	42a3      	cmp	r3, r4
 8011482:	6025      	str	r5, [r4, #0]
 8011484:	bf18      	it	ne
 8011486:	6059      	strne	r1, [r3, #4]
 8011488:	6863      	ldr	r3, [r4, #4]
 801148a:	bf08      	it	eq
 801148c:	f8c8 1000 	streq.w	r1, [r8]
 8011490:	5162      	str	r2, [r4, r5]
 8011492:	604b      	str	r3, [r1, #4]
 8011494:	4638      	mov	r0, r7
 8011496:	f104 060b 	add.w	r6, r4, #11
 801149a:	f000 f829 	bl	80114f0 <__malloc_unlock>
 801149e:	f026 0607 	bic.w	r6, r6, #7
 80114a2:	1d23      	adds	r3, r4, #4
 80114a4:	1af2      	subs	r2, r6, r3
 80114a6:	d0ae      	beq.n	8011406 <_malloc_r+0x22>
 80114a8:	1b9b      	subs	r3, r3, r6
 80114aa:	50a3      	str	r3, [r4, r2]
 80114ac:	e7ab      	b.n	8011406 <_malloc_r+0x22>
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	6862      	ldr	r2, [r4, #4]
 80114b2:	d1dd      	bne.n	8011470 <_malloc_r+0x8c>
 80114b4:	f8c8 2000 	str.w	r2, [r8]
 80114b8:	e7ec      	b.n	8011494 <_malloc_r+0xb0>
 80114ba:	4623      	mov	r3, r4
 80114bc:	6864      	ldr	r4, [r4, #4]
 80114be:	e7ac      	b.n	801141a <_malloc_r+0x36>
 80114c0:	4634      	mov	r4, r6
 80114c2:	6876      	ldr	r6, [r6, #4]
 80114c4:	e7b4      	b.n	8011430 <_malloc_r+0x4c>
 80114c6:	4613      	mov	r3, r2
 80114c8:	e7cc      	b.n	8011464 <_malloc_r+0x80>
 80114ca:	230c      	movs	r3, #12
 80114cc:	603b      	str	r3, [r7, #0]
 80114ce:	4638      	mov	r0, r7
 80114d0:	f000 f80e 	bl	80114f0 <__malloc_unlock>
 80114d4:	e797      	b.n	8011406 <_malloc_r+0x22>
 80114d6:	6025      	str	r5, [r4, #0]
 80114d8:	e7dc      	b.n	8011494 <_malloc_r+0xb0>
 80114da:	605b      	str	r3, [r3, #4]
 80114dc:	deff      	udf	#255	; 0xff
 80114de:	bf00      	nop
 80114e0:	20009300 	.word	0x20009300

080114e4 <__malloc_lock>:
 80114e4:	4801      	ldr	r0, [pc, #4]	; (80114ec <__malloc_lock+0x8>)
 80114e6:	f000 bb86 	b.w	8011bf6 <__retarget_lock_acquire_recursive>
 80114ea:	bf00      	nop
 80114ec:	20009449 	.word	0x20009449

080114f0 <__malloc_unlock>:
 80114f0:	4801      	ldr	r0, [pc, #4]	; (80114f8 <__malloc_unlock+0x8>)
 80114f2:	f000 bb81 	b.w	8011bf8 <__retarget_lock_release_recursive>
 80114f6:	bf00      	nop
 80114f8:	20009449 	.word	0x20009449

080114fc <srand>:
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	4b10      	ldr	r3, [pc, #64]	; (8011540 <srand+0x44>)
 8011500:	681d      	ldr	r5, [r3, #0]
 8011502:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011504:	4604      	mov	r4, r0
 8011506:	b9b3      	cbnz	r3, 8011536 <srand+0x3a>
 8011508:	2018      	movs	r0, #24
 801150a:	f7ff ff3b 	bl	8011384 <malloc>
 801150e:	4602      	mov	r2, r0
 8011510:	6328      	str	r0, [r5, #48]	; 0x30
 8011512:	b920      	cbnz	r0, 801151e <srand+0x22>
 8011514:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <srand+0x48>)
 8011516:	480c      	ldr	r0, [pc, #48]	; (8011548 <srand+0x4c>)
 8011518:	2146      	movs	r1, #70	; 0x46
 801151a:	f000 fb85 	bl	8011c28 <__assert_func>
 801151e:	490b      	ldr	r1, [pc, #44]	; (801154c <srand+0x50>)
 8011520:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <srand+0x54>)
 8011522:	e9c0 1300 	strd	r1, r3, [r0]
 8011526:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <srand+0x58>)
 8011528:	6083      	str	r3, [r0, #8]
 801152a:	230b      	movs	r3, #11
 801152c:	8183      	strh	r3, [r0, #12]
 801152e:	2100      	movs	r1, #0
 8011530:	2001      	movs	r0, #1
 8011532:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011536:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011538:	2200      	movs	r2, #0
 801153a:	611c      	str	r4, [r3, #16]
 801153c:	615a      	str	r2, [r3, #20]
 801153e:	bd38      	pop	{r3, r4, r5, pc}
 8011540:	20000114 	.word	0x20000114
 8011544:	080133c0 	.word	0x080133c0
 8011548:	080133d7 	.word	0x080133d7
 801154c:	abcd330e 	.word	0xabcd330e
 8011550:	e66d1234 	.word	0xe66d1234
 8011554:	0005deec 	.word	0x0005deec

08011558 <rand>:
 8011558:	4b16      	ldr	r3, [pc, #88]	; (80115b4 <rand+0x5c>)
 801155a:	b510      	push	{r4, lr}
 801155c:	681c      	ldr	r4, [r3, #0]
 801155e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011560:	b9b3      	cbnz	r3, 8011590 <rand+0x38>
 8011562:	2018      	movs	r0, #24
 8011564:	f7ff ff0e 	bl	8011384 <malloc>
 8011568:	4602      	mov	r2, r0
 801156a:	6320      	str	r0, [r4, #48]	; 0x30
 801156c:	b920      	cbnz	r0, 8011578 <rand+0x20>
 801156e:	4b12      	ldr	r3, [pc, #72]	; (80115b8 <rand+0x60>)
 8011570:	4812      	ldr	r0, [pc, #72]	; (80115bc <rand+0x64>)
 8011572:	2152      	movs	r1, #82	; 0x52
 8011574:	f000 fb58 	bl	8011c28 <__assert_func>
 8011578:	4911      	ldr	r1, [pc, #68]	; (80115c0 <rand+0x68>)
 801157a:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <rand+0x6c>)
 801157c:	e9c0 1300 	strd	r1, r3, [r0]
 8011580:	4b11      	ldr	r3, [pc, #68]	; (80115c8 <rand+0x70>)
 8011582:	6083      	str	r3, [r0, #8]
 8011584:	230b      	movs	r3, #11
 8011586:	8183      	strh	r3, [r0, #12]
 8011588:	2100      	movs	r1, #0
 801158a:	2001      	movs	r0, #1
 801158c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011590:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011592:	480e      	ldr	r0, [pc, #56]	; (80115cc <rand+0x74>)
 8011594:	690b      	ldr	r3, [r1, #16]
 8011596:	694c      	ldr	r4, [r1, #20]
 8011598:	4a0d      	ldr	r2, [pc, #52]	; (80115d0 <rand+0x78>)
 801159a:	4358      	muls	r0, r3
 801159c:	fb02 0004 	mla	r0, r2, r4, r0
 80115a0:	fba3 3202 	umull	r3, r2, r3, r2
 80115a4:	3301      	adds	r3, #1
 80115a6:	eb40 0002 	adc.w	r0, r0, r2
 80115aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80115ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80115b2:	bd10      	pop	{r4, pc}
 80115b4:	20000114 	.word	0x20000114
 80115b8:	080133c0 	.word	0x080133c0
 80115bc:	080133d7 	.word	0x080133d7
 80115c0:	abcd330e 	.word	0xabcd330e
 80115c4:	e66d1234 	.word	0xe66d1234
 80115c8:	0005deec 	.word	0x0005deec
 80115cc:	5851f42d 	.word	0x5851f42d
 80115d0:	4c957f2d 	.word	0x4c957f2d

080115d4 <realloc>:
 80115d4:	4b02      	ldr	r3, [pc, #8]	; (80115e0 <realloc+0xc>)
 80115d6:	460a      	mov	r2, r1
 80115d8:	4601      	mov	r1, r0
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	f000 b802 	b.w	80115e4 <_realloc_r>
 80115e0:	20000114 	.word	0x20000114

080115e4 <_realloc_r>:
 80115e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e8:	4680      	mov	r8, r0
 80115ea:	4614      	mov	r4, r2
 80115ec:	460e      	mov	r6, r1
 80115ee:	b921      	cbnz	r1, 80115fa <_realloc_r+0x16>
 80115f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115f4:	4611      	mov	r1, r2
 80115f6:	f7ff bef5 	b.w	80113e4 <_malloc_r>
 80115fa:	b92a      	cbnz	r2, 8011608 <_realloc_r+0x24>
 80115fc:	f000 fb3e 	bl	8011c7c <_free_r>
 8011600:	4625      	mov	r5, r4
 8011602:	4628      	mov	r0, r5
 8011604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011608:	f000 fb84 	bl	8011d14 <_malloc_usable_size_r>
 801160c:	4284      	cmp	r4, r0
 801160e:	4607      	mov	r7, r0
 8011610:	d802      	bhi.n	8011618 <_realloc_r+0x34>
 8011612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011616:	d812      	bhi.n	801163e <_realloc_r+0x5a>
 8011618:	4621      	mov	r1, r4
 801161a:	4640      	mov	r0, r8
 801161c:	f7ff fee2 	bl	80113e4 <_malloc_r>
 8011620:	4605      	mov	r5, r0
 8011622:	2800      	cmp	r0, #0
 8011624:	d0ed      	beq.n	8011602 <_realloc_r+0x1e>
 8011626:	42bc      	cmp	r4, r7
 8011628:	4622      	mov	r2, r4
 801162a:	4631      	mov	r1, r6
 801162c:	bf28      	it	cs
 801162e:	463a      	movcs	r2, r7
 8011630:	f000 faeb 	bl	8011c0a <memcpy>
 8011634:	4631      	mov	r1, r6
 8011636:	4640      	mov	r0, r8
 8011638:	f000 fb20 	bl	8011c7c <_free_r>
 801163c:	e7e1      	b.n	8011602 <_realloc_r+0x1e>
 801163e:	4635      	mov	r5, r6
 8011640:	e7df      	b.n	8011602 <_realloc_r+0x1e>
	...

08011644 <_strtoul_l.constprop.0>:
 8011644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011648:	4f36      	ldr	r7, [pc, #216]	; (8011724 <_strtoul_l.constprop.0+0xe0>)
 801164a:	4686      	mov	lr, r0
 801164c:	460d      	mov	r5, r1
 801164e:	4628      	mov	r0, r5
 8011650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011654:	5d3e      	ldrb	r6, [r7, r4]
 8011656:	f016 0608 	ands.w	r6, r6, #8
 801165a:	d1f8      	bne.n	801164e <_strtoul_l.constprop.0+0xa>
 801165c:	2c2d      	cmp	r4, #45	; 0x2d
 801165e:	d130      	bne.n	80116c2 <_strtoul_l.constprop.0+0x7e>
 8011660:	782c      	ldrb	r4, [r5, #0]
 8011662:	2601      	movs	r6, #1
 8011664:	1c85      	adds	r5, r0, #2
 8011666:	2b00      	cmp	r3, #0
 8011668:	d057      	beq.n	801171a <_strtoul_l.constprop.0+0xd6>
 801166a:	2b10      	cmp	r3, #16
 801166c:	d109      	bne.n	8011682 <_strtoul_l.constprop.0+0x3e>
 801166e:	2c30      	cmp	r4, #48	; 0x30
 8011670:	d107      	bne.n	8011682 <_strtoul_l.constprop.0+0x3e>
 8011672:	7828      	ldrb	r0, [r5, #0]
 8011674:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011678:	2858      	cmp	r0, #88	; 0x58
 801167a:	d149      	bne.n	8011710 <_strtoul_l.constprop.0+0xcc>
 801167c:	786c      	ldrb	r4, [r5, #1]
 801167e:	2310      	movs	r3, #16
 8011680:	3502      	adds	r5, #2
 8011682:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011686:	2700      	movs	r7, #0
 8011688:	fbb8 f8f3 	udiv	r8, r8, r3
 801168c:	fb03 f908 	mul.w	r9, r3, r8
 8011690:	ea6f 0909 	mvn.w	r9, r9
 8011694:	4638      	mov	r0, r7
 8011696:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801169a:	f1bc 0f09 	cmp.w	ip, #9
 801169e:	d815      	bhi.n	80116cc <_strtoul_l.constprop.0+0x88>
 80116a0:	4664      	mov	r4, ip
 80116a2:	42a3      	cmp	r3, r4
 80116a4:	dd23      	ble.n	80116ee <_strtoul_l.constprop.0+0xaa>
 80116a6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80116aa:	d007      	beq.n	80116bc <_strtoul_l.constprop.0+0x78>
 80116ac:	4580      	cmp	r8, r0
 80116ae:	d31b      	bcc.n	80116e8 <_strtoul_l.constprop.0+0xa4>
 80116b0:	d101      	bne.n	80116b6 <_strtoul_l.constprop.0+0x72>
 80116b2:	45a1      	cmp	r9, r4
 80116b4:	db18      	blt.n	80116e8 <_strtoul_l.constprop.0+0xa4>
 80116b6:	fb00 4003 	mla	r0, r0, r3, r4
 80116ba:	2701      	movs	r7, #1
 80116bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116c0:	e7e9      	b.n	8011696 <_strtoul_l.constprop.0+0x52>
 80116c2:	2c2b      	cmp	r4, #43	; 0x2b
 80116c4:	bf04      	itt	eq
 80116c6:	782c      	ldrbeq	r4, [r5, #0]
 80116c8:	1c85      	addeq	r5, r0, #2
 80116ca:	e7cc      	b.n	8011666 <_strtoul_l.constprop.0+0x22>
 80116cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80116d0:	f1bc 0f19 	cmp.w	ip, #25
 80116d4:	d801      	bhi.n	80116da <_strtoul_l.constprop.0+0x96>
 80116d6:	3c37      	subs	r4, #55	; 0x37
 80116d8:	e7e3      	b.n	80116a2 <_strtoul_l.constprop.0+0x5e>
 80116da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80116de:	f1bc 0f19 	cmp.w	ip, #25
 80116e2:	d804      	bhi.n	80116ee <_strtoul_l.constprop.0+0xaa>
 80116e4:	3c57      	subs	r4, #87	; 0x57
 80116e6:	e7dc      	b.n	80116a2 <_strtoul_l.constprop.0+0x5e>
 80116e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80116ec:	e7e6      	b.n	80116bc <_strtoul_l.constprop.0+0x78>
 80116ee:	1c7b      	adds	r3, r7, #1
 80116f0:	d106      	bne.n	8011700 <_strtoul_l.constprop.0+0xbc>
 80116f2:	2322      	movs	r3, #34	; 0x22
 80116f4:	f8ce 3000 	str.w	r3, [lr]
 80116f8:	4638      	mov	r0, r7
 80116fa:	b932      	cbnz	r2, 801170a <_strtoul_l.constprop.0+0xc6>
 80116fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011700:	b106      	cbz	r6, 8011704 <_strtoul_l.constprop.0+0xc0>
 8011702:	4240      	negs	r0, r0
 8011704:	2a00      	cmp	r2, #0
 8011706:	d0f9      	beq.n	80116fc <_strtoul_l.constprop.0+0xb8>
 8011708:	b107      	cbz	r7, 801170c <_strtoul_l.constprop.0+0xc8>
 801170a:	1e69      	subs	r1, r5, #1
 801170c:	6011      	str	r1, [r2, #0]
 801170e:	e7f5      	b.n	80116fc <_strtoul_l.constprop.0+0xb8>
 8011710:	2430      	movs	r4, #48	; 0x30
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1b5      	bne.n	8011682 <_strtoul_l.constprop.0+0x3e>
 8011716:	2308      	movs	r3, #8
 8011718:	e7b3      	b.n	8011682 <_strtoul_l.constprop.0+0x3e>
 801171a:	2c30      	cmp	r4, #48	; 0x30
 801171c:	d0a9      	beq.n	8011672 <_strtoul_l.constprop.0+0x2e>
 801171e:	230a      	movs	r3, #10
 8011720:	e7af      	b.n	8011682 <_strtoul_l.constprop.0+0x3e>
 8011722:	bf00      	nop
 8011724:	08013430 	.word	0x08013430

08011728 <strtoul>:
 8011728:	4613      	mov	r3, r2
 801172a:	460a      	mov	r2, r1
 801172c:	4601      	mov	r1, r0
 801172e:	4802      	ldr	r0, [pc, #8]	; (8011738 <strtoul+0x10>)
 8011730:	6800      	ldr	r0, [r0, #0]
 8011732:	f7ff bf87 	b.w	8011644 <_strtoul_l.constprop.0>
 8011736:	bf00      	nop
 8011738:	20000114 	.word	0x20000114

0801173c <std>:
 801173c:	2300      	movs	r3, #0
 801173e:	b510      	push	{r4, lr}
 8011740:	4604      	mov	r4, r0
 8011742:	e9c0 3300 	strd	r3, r3, [r0]
 8011746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801174a:	6083      	str	r3, [r0, #8]
 801174c:	8181      	strh	r1, [r0, #12]
 801174e:	6643      	str	r3, [r0, #100]	; 0x64
 8011750:	81c2      	strh	r2, [r0, #14]
 8011752:	6183      	str	r3, [r0, #24]
 8011754:	4619      	mov	r1, r3
 8011756:	2208      	movs	r2, #8
 8011758:	305c      	adds	r0, #92	; 0x5c
 801175a:	f000 f98d 	bl	8011a78 <memset>
 801175e:	4b0d      	ldr	r3, [pc, #52]	; (8011794 <std+0x58>)
 8011760:	6263      	str	r3, [r4, #36]	; 0x24
 8011762:	4b0d      	ldr	r3, [pc, #52]	; (8011798 <std+0x5c>)
 8011764:	62a3      	str	r3, [r4, #40]	; 0x28
 8011766:	4b0d      	ldr	r3, [pc, #52]	; (801179c <std+0x60>)
 8011768:	62e3      	str	r3, [r4, #44]	; 0x2c
 801176a:	4b0d      	ldr	r3, [pc, #52]	; (80117a0 <std+0x64>)
 801176c:	6323      	str	r3, [r4, #48]	; 0x30
 801176e:	4b0d      	ldr	r3, [pc, #52]	; (80117a4 <std+0x68>)
 8011770:	6224      	str	r4, [r4, #32]
 8011772:	429c      	cmp	r4, r3
 8011774:	d006      	beq.n	8011784 <std+0x48>
 8011776:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801177a:	4294      	cmp	r4, r2
 801177c:	d002      	beq.n	8011784 <std+0x48>
 801177e:	33d0      	adds	r3, #208	; 0xd0
 8011780:	429c      	cmp	r4, r3
 8011782:	d105      	bne.n	8011790 <std+0x54>
 8011784:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801178c:	f000 ba32 	b.w	8011bf4 <__retarget_lock_init_recursive>
 8011790:	bd10      	pop	{r4, pc}
 8011792:	bf00      	nop
 8011794:	0801194d 	.word	0x0801194d
 8011798:	0801196f 	.word	0x0801196f
 801179c:	080119a7 	.word	0x080119a7
 80117a0:	080119cb 	.word	0x080119cb
 80117a4:	20009308 	.word	0x20009308

080117a8 <stdio_exit_handler>:
 80117a8:	4a02      	ldr	r2, [pc, #8]	; (80117b4 <stdio_exit_handler+0xc>)
 80117aa:	4903      	ldr	r1, [pc, #12]	; (80117b8 <stdio_exit_handler+0x10>)
 80117ac:	4803      	ldr	r0, [pc, #12]	; (80117bc <stdio_exit_handler+0x14>)
 80117ae:	f000 b869 	b.w	8011884 <_fwalk_sglue>
 80117b2:	bf00      	nop
 80117b4:	200000bc 	.word	0x200000bc
 80117b8:	08012689 	.word	0x08012689
 80117bc:	200000c8 	.word	0x200000c8

080117c0 <cleanup_stdio>:
 80117c0:	6841      	ldr	r1, [r0, #4]
 80117c2:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <cleanup_stdio+0x34>)
 80117c4:	4299      	cmp	r1, r3
 80117c6:	b510      	push	{r4, lr}
 80117c8:	4604      	mov	r4, r0
 80117ca:	d001      	beq.n	80117d0 <cleanup_stdio+0x10>
 80117cc:	f000 ff5c 	bl	8012688 <_fflush_r>
 80117d0:	68a1      	ldr	r1, [r4, #8]
 80117d2:	4b09      	ldr	r3, [pc, #36]	; (80117f8 <cleanup_stdio+0x38>)
 80117d4:	4299      	cmp	r1, r3
 80117d6:	d002      	beq.n	80117de <cleanup_stdio+0x1e>
 80117d8:	4620      	mov	r0, r4
 80117da:	f000 ff55 	bl	8012688 <_fflush_r>
 80117de:	68e1      	ldr	r1, [r4, #12]
 80117e0:	4b06      	ldr	r3, [pc, #24]	; (80117fc <cleanup_stdio+0x3c>)
 80117e2:	4299      	cmp	r1, r3
 80117e4:	d004      	beq.n	80117f0 <cleanup_stdio+0x30>
 80117e6:	4620      	mov	r0, r4
 80117e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ec:	f000 bf4c 	b.w	8012688 <_fflush_r>
 80117f0:	bd10      	pop	{r4, pc}
 80117f2:	bf00      	nop
 80117f4:	20009308 	.word	0x20009308
 80117f8:	20009370 	.word	0x20009370
 80117fc:	200093d8 	.word	0x200093d8

08011800 <global_stdio_init.part.0>:
 8011800:	b510      	push	{r4, lr}
 8011802:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <global_stdio_init.part.0+0x30>)
 8011804:	4c0b      	ldr	r4, [pc, #44]	; (8011834 <global_stdio_init.part.0+0x34>)
 8011806:	4a0c      	ldr	r2, [pc, #48]	; (8011838 <global_stdio_init.part.0+0x38>)
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	4620      	mov	r0, r4
 801180c:	2200      	movs	r2, #0
 801180e:	2104      	movs	r1, #4
 8011810:	f7ff ff94 	bl	801173c <std>
 8011814:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011818:	2201      	movs	r2, #1
 801181a:	2109      	movs	r1, #9
 801181c:	f7ff ff8e 	bl	801173c <std>
 8011820:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011824:	2202      	movs	r2, #2
 8011826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801182a:	2112      	movs	r1, #18
 801182c:	f7ff bf86 	b.w	801173c <std>
 8011830:	20009440 	.word	0x20009440
 8011834:	20009308 	.word	0x20009308
 8011838:	080117a9 	.word	0x080117a9

0801183c <__sfp_lock_acquire>:
 801183c:	4801      	ldr	r0, [pc, #4]	; (8011844 <__sfp_lock_acquire+0x8>)
 801183e:	f000 b9da 	b.w	8011bf6 <__retarget_lock_acquire_recursive>
 8011842:	bf00      	nop
 8011844:	2000944a 	.word	0x2000944a

08011848 <__sfp_lock_release>:
 8011848:	4801      	ldr	r0, [pc, #4]	; (8011850 <__sfp_lock_release+0x8>)
 801184a:	f000 b9d5 	b.w	8011bf8 <__retarget_lock_release_recursive>
 801184e:	bf00      	nop
 8011850:	2000944a 	.word	0x2000944a

08011854 <__sinit>:
 8011854:	b510      	push	{r4, lr}
 8011856:	4604      	mov	r4, r0
 8011858:	f7ff fff0 	bl	801183c <__sfp_lock_acquire>
 801185c:	6a23      	ldr	r3, [r4, #32]
 801185e:	b11b      	cbz	r3, 8011868 <__sinit+0x14>
 8011860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011864:	f7ff bff0 	b.w	8011848 <__sfp_lock_release>
 8011868:	4b04      	ldr	r3, [pc, #16]	; (801187c <__sinit+0x28>)
 801186a:	6223      	str	r3, [r4, #32]
 801186c:	4b04      	ldr	r3, [pc, #16]	; (8011880 <__sinit+0x2c>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1f5      	bne.n	8011860 <__sinit+0xc>
 8011874:	f7ff ffc4 	bl	8011800 <global_stdio_init.part.0>
 8011878:	e7f2      	b.n	8011860 <__sinit+0xc>
 801187a:	bf00      	nop
 801187c:	080117c1 	.word	0x080117c1
 8011880:	20009440 	.word	0x20009440

08011884 <_fwalk_sglue>:
 8011884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011888:	4607      	mov	r7, r0
 801188a:	4688      	mov	r8, r1
 801188c:	4614      	mov	r4, r2
 801188e:	2600      	movs	r6, #0
 8011890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011894:	f1b9 0901 	subs.w	r9, r9, #1
 8011898:	d505      	bpl.n	80118a6 <_fwalk_sglue+0x22>
 801189a:	6824      	ldr	r4, [r4, #0]
 801189c:	2c00      	cmp	r4, #0
 801189e:	d1f7      	bne.n	8011890 <_fwalk_sglue+0xc>
 80118a0:	4630      	mov	r0, r6
 80118a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d907      	bls.n	80118bc <_fwalk_sglue+0x38>
 80118ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118b0:	3301      	adds	r3, #1
 80118b2:	d003      	beq.n	80118bc <_fwalk_sglue+0x38>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4638      	mov	r0, r7
 80118b8:	47c0      	blx	r8
 80118ba:	4306      	orrs	r6, r0
 80118bc:	3568      	adds	r5, #104	; 0x68
 80118be:	e7e9      	b.n	8011894 <_fwalk_sglue+0x10>

080118c0 <iprintf>:
 80118c0:	b40f      	push	{r0, r1, r2, r3}
 80118c2:	b507      	push	{r0, r1, r2, lr}
 80118c4:	4906      	ldr	r1, [pc, #24]	; (80118e0 <iprintf+0x20>)
 80118c6:	ab04      	add	r3, sp, #16
 80118c8:	6808      	ldr	r0, [r1, #0]
 80118ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ce:	6881      	ldr	r1, [r0, #8]
 80118d0:	9301      	str	r3, [sp, #4]
 80118d2:	f000 fba9 	bl	8012028 <_vfiprintf_r>
 80118d6:	b003      	add	sp, #12
 80118d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118dc:	b004      	add	sp, #16
 80118de:	4770      	bx	lr
 80118e0:	20000114 	.word	0x20000114

080118e4 <sniprintf>:
 80118e4:	b40c      	push	{r2, r3}
 80118e6:	b530      	push	{r4, r5, lr}
 80118e8:	4b17      	ldr	r3, [pc, #92]	; (8011948 <sniprintf+0x64>)
 80118ea:	1e0c      	subs	r4, r1, #0
 80118ec:	681d      	ldr	r5, [r3, #0]
 80118ee:	b09d      	sub	sp, #116	; 0x74
 80118f0:	da08      	bge.n	8011904 <sniprintf+0x20>
 80118f2:	238b      	movs	r3, #139	; 0x8b
 80118f4:	602b      	str	r3, [r5, #0]
 80118f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118fa:	b01d      	add	sp, #116	; 0x74
 80118fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011900:	b002      	add	sp, #8
 8011902:	4770      	bx	lr
 8011904:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011908:	f8ad 3014 	strh.w	r3, [sp, #20]
 801190c:	bf14      	ite	ne
 801190e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011912:	4623      	moveq	r3, r4
 8011914:	9304      	str	r3, [sp, #16]
 8011916:	9307      	str	r3, [sp, #28]
 8011918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801191c:	9002      	str	r0, [sp, #8]
 801191e:	9006      	str	r0, [sp, #24]
 8011920:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011926:	ab21      	add	r3, sp, #132	; 0x84
 8011928:	a902      	add	r1, sp, #8
 801192a:	4628      	mov	r0, r5
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	f000 fa53 	bl	8011dd8 <_svfiprintf_r>
 8011932:	1c43      	adds	r3, r0, #1
 8011934:	bfbc      	itt	lt
 8011936:	238b      	movlt	r3, #139	; 0x8b
 8011938:	602b      	strlt	r3, [r5, #0]
 801193a:	2c00      	cmp	r4, #0
 801193c:	d0dd      	beq.n	80118fa <sniprintf+0x16>
 801193e:	9b02      	ldr	r3, [sp, #8]
 8011940:	2200      	movs	r2, #0
 8011942:	701a      	strb	r2, [r3, #0]
 8011944:	e7d9      	b.n	80118fa <sniprintf+0x16>
 8011946:	bf00      	nop
 8011948:	20000114 	.word	0x20000114

0801194c <__sread>:
 801194c:	b510      	push	{r4, lr}
 801194e:	460c      	mov	r4, r1
 8011950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011954:	f000 f8f0 	bl	8011b38 <_read_r>
 8011958:	2800      	cmp	r0, #0
 801195a:	bfab      	itete	ge
 801195c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801195e:	89a3      	ldrhlt	r3, [r4, #12]
 8011960:	181b      	addge	r3, r3, r0
 8011962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011966:	bfac      	ite	ge
 8011968:	6563      	strge	r3, [r4, #84]	; 0x54
 801196a:	81a3      	strhlt	r3, [r4, #12]
 801196c:	bd10      	pop	{r4, pc}

0801196e <__swrite>:
 801196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011972:	461f      	mov	r7, r3
 8011974:	898b      	ldrh	r3, [r1, #12]
 8011976:	05db      	lsls	r3, r3, #23
 8011978:	4605      	mov	r5, r0
 801197a:	460c      	mov	r4, r1
 801197c:	4616      	mov	r6, r2
 801197e:	d505      	bpl.n	801198c <__swrite+0x1e>
 8011980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011984:	2302      	movs	r3, #2
 8011986:	2200      	movs	r2, #0
 8011988:	f000 f8c4 	bl	8011b14 <_lseek_r>
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011996:	81a3      	strh	r3, [r4, #12]
 8011998:	4632      	mov	r2, r6
 801199a:	463b      	mov	r3, r7
 801199c:	4628      	mov	r0, r5
 801199e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119a2:	f000 b8eb 	b.w	8011b7c <_write_r>

080119a6 <__sseek>:
 80119a6:	b510      	push	{r4, lr}
 80119a8:	460c      	mov	r4, r1
 80119aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ae:	f000 f8b1 	bl	8011b14 <_lseek_r>
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	89a3      	ldrh	r3, [r4, #12]
 80119b6:	bf15      	itete	ne
 80119b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80119ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119c2:	81a3      	strheq	r3, [r4, #12]
 80119c4:	bf18      	it	ne
 80119c6:	81a3      	strhne	r3, [r4, #12]
 80119c8:	bd10      	pop	{r4, pc}

080119ca <__sclose>:
 80119ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ce:	f000 b891 	b.w	8011af4 <_close_r>

080119d2 <_vsniprintf_r>:
 80119d2:	b530      	push	{r4, r5, lr}
 80119d4:	4614      	mov	r4, r2
 80119d6:	2c00      	cmp	r4, #0
 80119d8:	b09b      	sub	sp, #108	; 0x6c
 80119da:	4605      	mov	r5, r0
 80119dc:	461a      	mov	r2, r3
 80119de:	da05      	bge.n	80119ec <_vsniprintf_r+0x1a>
 80119e0:	238b      	movs	r3, #139	; 0x8b
 80119e2:	6003      	str	r3, [r0, #0]
 80119e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119e8:	b01b      	add	sp, #108	; 0x6c
 80119ea:	bd30      	pop	{r4, r5, pc}
 80119ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80119f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80119f4:	bf14      	ite	ne
 80119f6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80119fa:	4623      	moveq	r3, r4
 80119fc:	9302      	str	r3, [sp, #8]
 80119fe:	9305      	str	r3, [sp, #20]
 8011a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a04:	9100      	str	r1, [sp, #0]
 8011a06:	9104      	str	r1, [sp, #16]
 8011a08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011a0c:	4669      	mov	r1, sp
 8011a0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011a10:	f000 f9e2 	bl	8011dd8 <_svfiprintf_r>
 8011a14:	1c43      	adds	r3, r0, #1
 8011a16:	bfbc      	itt	lt
 8011a18:	238b      	movlt	r3, #139	; 0x8b
 8011a1a:	602b      	strlt	r3, [r5, #0]
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	d0e3      	beq.n	80119e8 <_vsniprintf_r+0x16>
 8011a20:	9b00      	ldr	r3, [sp, #0]
 8011a22:	2200      	movs	r2, #0
 8011a24:	701a      	strb	r2, [r3, #0]
 8011a26:	e7df      	b.n	80119e8 <_vsniprintf_r+0x16>

08011a28 <vsniprintf>:
 8011a28:	b507      	push	{r0, r1, r2, lr}
 8011a2a:	9300      	str	r3, [sp, #0]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	460a      	mov	r2, r1
 8011a30:	4601      	mov	r1, r0
 8011a32:	4803      	ldr	r0, [pc, #12]	; (8011a40 <vsniprintf+0x18>)
 8011a34:	6800      	ldr	r0, [r0, #0]
 8011a36:	f7ff ffcc 	bl	80119d2 <_vsniprintf_r>
 8011a3a:	b003      	add	sp, #12
 8011a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a40:	20000114 	.word	0x20000114

08011a44 <memmove>:
 8011a44:	4288      	cmp	r0, r1
 8011a46:	b510      	push	{r4, lr}
 8011a48:	eb01 0402 	add.w	r4, r1, r2
 8011a4c:	d902      	bls.n	8011a54 <memmove+0x10>
 8011a4e:	4284      	cmp	r4, r0
 8011a50:	4623      	mov	r3, r4
 8011a52:	d807      	bhi.n	8011a64 <memmove+0x20>
 8011a54:	1e43      	subs	r3, r0, #1
 8011a56:	42a1      	cmp	r1, r4
 8011a58:	d008      	beq.n	8011a6c <memmove+0x28>
 8011a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a62:	e7f8      	b.n	8011a56 <memmove+0x12>
 8011a64:	4402      	add	r2, r0
 8011a66:	4601      	mov	r1, r0
 8011a68:	428a      	cmp	r2, r1
 8011a6a:	d100      	bne.n	8011a6e <memmove+0x2a>
 8011a6c:	bd10      	pop	{r4, pc}
 8011a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a76:	e7f7      	b.n	8011a68 <memmove+0x24>

08011a78 <memset>:
 8011a78:	4402      	add	r2, r0
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d100      	bne.n	8011a82 <memset+0xa>
 8011a80:	4770      	bx	lr
 8011a82:	f803 1b01 	strb.w	r1, [r3], #1
 8011a86:	e7f9      	b.n	8011a7c <memset+0x4>

08011a88 <strchr>:
 8011a88:	b2c9      	uxtb	r1, r1
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a90:	b11a      	cbz	r2, 8011a9a <strchr+0x12>
 8011a92:	428a      	cmp	r2, r1
 8011a94:	d1f9      	bne.n	8011a8a <strchr+0x2>
 8011a96:	4618      	mov	r0, r3
 8011a98:	4770      	bx	lr
 8011a9a:	2900      	cmp	r1, #0
 8011a9c:	bf18      	it	ne
 8011a9e:	2300      	movne	r3, #0
 8011aa0:	e7f9      	b.n	8011a96 <strchr+0xe>

08011aa2 <strncmp>:
 8011aa2:	b510      	push	{r4, lr}
 8011aa4:	b16a      	cbz	r2, 8011ac2 <strncmp+0x20>
 8011aa6:	3901      	subs	r1, #1
 8011aa8:	1884      	adds	r4, r0, r2
 8011aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011aae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d103      	bne.n	8011abe <strncmp+0x1c>
 8011ab6:	42a0      	cmp	r0, r4
 8011ab8:	d001      	beq.n	8011abe <strncmp+0x1c>
 8011aba:	2a00      	cmp	r2, #0
 8011abc:	d1f5      	bne.n	8011aaa <strncmp+0x8>
 8011abe:	1ad0      	subs	r0, r2, r3
 8011ac0:	bd10      	pop	{r4, pc}
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	e7fc      	b.n	8011ac0 <strncmp+0x1e>

08011ac6 <strstr>:
 8011ac6:	780a      	ldrb	r2, [r1, #0]
 8011ac8:	b570      	push	{r4, r5, r6, lr}
 8011aca:	b96a      	cbnz	r2, 8011ae8 <strstr+0x22>
 8011acc:	bd70      	pop	{r4, r5, r6, pc}
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d109      	bne.n	8011ae6 <strstr+0x20>
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0f6      	beq.n	8011acc <strstr+0x6>
 8011ade:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011ae2:	429e      	cmp	r6, r3
 8011ae4:	d0f7      	beq.n	8011ad6 <strstr+0x10>
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	7803      	ldrb	r3, [r0, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1ef      	bne.n	8011ace <strstr+0x8>
 8011aee:	4618      	mov	r0, r3
 8011af0:	e7ec      	b.n	8011acc <strstr+0x6>
	...

08011af4 <_close_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d06      	ldr	r5, [pc, #24]	; (8011b10 <_close_r+0x1c>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	602b      	str	r3, [r5, #0]
 8011b00:	f7ef ff99 	bl	8001a36 <_close>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_close_r+0x1a>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_close_r+0x1a>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	20009444 	.word	0x20009444

08011b14 <_lseek_r>:
 8011b14:	b538      	push	{r3, r4, r5, lr}
 8011b16:	4d07      	ldr	r5, [pc, #28]	; (8011b34 <_lseek_r+0x20>)
 8011b18:	4604      	mov	r4, r0
 8011b1a:	4608      	mov	r0, r1
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	2200      	movs	r2, #0
 8011b20:	602a      	str	r2, [r5, #0]
 8011b22:	461a      	mov	r2, r3
 8011b24:	f7ef ffae 	bl	8001a84 <_lseek>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_lseek_r+0x1e>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_lseek_r+0x1e>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	20009444 	.word	0x20009444

08011b38 <_read_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4d07      	ldr	r5, [pc, #28]	; (8011b58 <_read_r+0x20>)
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	4608      	mov	r0, r1
 8011b40:	4611      	mov	r1, r2
 8011b42:	2200      	movs	r2, #0
 8011b44:	602a      	str	r2, [r5, #0]
 8011b46:	461a      	mov	r2, r3
 8011b48:	f7ef ff3c 	bl	80019c4 <_read>
 8011b4c:	1c43      	adds	r3, r0, #1
 8011b4e:	d102      	bne.n	8011b56 <_read_r+0x1e>
 8011b50:	682b      	ldr	r3, [r5, #0]
 8011b52:	b103      	cbz	r3, 8011b56 <_read_r+0x1e>
 8011b54:	6023      	str	r3, [r4, #0]
 8011b56:	bd38      	pop	{r3, r4, r5, pc}
 8011b58:	20009444 	.word	0x20009444

08011b5c <_sbrk_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4d06      	ldr	r5, [pc, #24]	; (8011b78 <_sbrk_r+0x1c>)
 8011b60:	2300      	movs	r3, #0
 8011b62:	4604      	mov	r4, r0
 8011b64:	4608      	mov	r0, r1
 8011b66:	602b      	str	r3, [r5, #0]
 8011b68:	f7ef ff9a 	bl	8001aa0 <_sbrk>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_sbrk_r+0x1a>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_sbrk_r+0x1a>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	20009444 	.word	0x20009444

08011b7c <_write_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	4d07      	ldr	r5, [pc, #28]	; (8011b9c <_write_r+0x20>)
 8011b80:	4604      	mov	r4, r0
 8011b82:	4608      	mov	r0, r1
 8011b84:	4611      	mov	r1, r2
 8011b86:	2200      	movs	r2, #0
 8011b88:	602a      	str	r2, [r5, #0]
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	f7ef ff37 	bl	80019fe <_write>
 8011b90:	1c43      	adds	r3, r0, #1
 8011b92:	d102      	bne.n	8011b9a <_write_r+0x1e>
 8011b94:	682b      	ldr	r3, [r5, #0]
 8011b96:	b103      	cbz	r3, 8011b9a <_write_r+0x1e>
 8011b98:	6023      	str	r3, [r4, #0]
 8011b9a:	bd38      	pop	{r3, r4, r5, pc}
 8011b9c:	20009444 	.word	0x20009444

08011ba0 <__errno>:
 8011ba0:	4b01      	ldr	r3, [pc, #4]	; (8011ba8 <__errno+0x8>)
 8011ba2:	6818      	ldr	r0, [r3, #0]
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	20000114 	.word	0x20000114

08011bac <__libc_init_array>:
 8011bac:	b570      	push	{r4, r5, r6, lr}
 8011bae:	4d0d      	ldr	r5, [pc, #52]	; (8011be4 <__libc_init_array+0x38>)
 8011bb0:	4c0d      	ldr	r4, [pc, #52]	; (8011be8 <__libc_init_array+0x3c>)
 8011bb2:	1b64      	subs	r4, r4, r5
 8011bb4:	10a4      	asrs	r4, r4, #2
 8011bb6:	2600      	movs	r6, #0
 8011bb8:	42a6      	cmp	r6, r4
 8011bba:	d109      	bne.n	8011bd0 <__libc_init_array+0x24>
 8011bbc:	4d0b      	ldr	r5, [pc, #44]	; (8011bec <__libc_init_array+0x40>)
 8011bbe:	4c0c      	ldr	r4, [pc, #48]	; (8011bf0 <__libc_init_array+0x44>)
 8011bc0:	f000 ff02 	bl	80129c8 <_init>
 8011bc4:	1b64      	subs	r4, r4, r5
 8011bc6:	10a4      	asrs	r4, r4, #2
 8011bc8:	2600      	movs	r6, #0
 8011bca:	42a6      	cmp	r6, r4
 8011bcc:	d105      	bne.n	8011bda <__libc_init_array+0x2e>
 8011bce:	bd70      	pop	{r4, r5, r6, pc}
 8011bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bd4:	4798      	blx	r3
 8011bd6:	3601      	adds	r6, #1
 8011bd8:	e7ee      	b.n	8011bb8 <__libc_init_array+0xc>
 8011bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bde:	4798      	blx	r3
 8011be0:	3601      	adds	r6, #1
 8011be2:	e7f2      	b.n	8011bca <__libc_init_array+0x1e>
 8011be4:	080135a8 	.word	0x080135a8
 8011be8:	080135a8 	.word	0x080135a8
 8011bec:	080135a8 	.word	0x080135a8
 8011bf0:	080135ac 	.word	0x080135ac

08011bf4 <__retarget_lock_init_recursive>:
 8011bf4:	4770      	bx	lr

08011bf6 <__retarget_lock_acquire_recursive>:
 8011bf6:	4770      	bx	lr

08011bf8 <__retarget_lock_release_recursive>:
 8011bf8:	4770      	bx	lr

08011bfa <strcpy>:
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c00:	f803 2b01 	strb.w	r2, [r3], #1
 8011c04:	2a00      	cmp	r2, #0
 8011c06:	d1f9      	bne.n	8011bfc <strcpy+0x2>
 8011c08:	4770      	bx	lr

08011c0a <memcpy>:
 8011c0a:	440a      	add	r2, r1
 8011c0c:	4291      	cmp	r1, r2
 8011c0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011c12:	d100      	bne.n	8011c16 <memcpy+0xc>
 8011c14:	4770      	bx	lr
 8011c16:	b510      	push	{r4, lr}
 8011c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c20:	4291      	cmp	r1, r2
 8011c22:	d1f9      	bne.n	8011c18 <memcpy+0xe>
 8011c24:	bd10      	pop	{r4, pc}
	...

08011c28 <__assert_func>:
 8011c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c2a:	4614      	mov	r4, r2
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	4b09      	ldr	r3, [pc, #36]	; (8011c54 <__assert_func+0x2c>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4605      	mov	r5, r0
 8011c34:	68d8      	ldr	r0, [r3, #12]
 8011c36:	b14c      	cbz	r4, 8011c4c <__assert_func+0x24>
 8011c38:	4b07      	ldr	r3, [pc, #28]	; (8011c58 <__assert_func+0x30>)
 8011c3a:	9100      	str	r1, [sp, #0]
 8011c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c40:	4906      	ldr	r1, [pc, #24]	; (8011c5c <__assert_func+0x34>)
 8011c42:	462b      	mov	r3, r5
 8011c44:	f000 fd48 	bl	80126d8 <fiprintf>
 8011c48:	f000 fdee 	bl	8012828 <abort>
 8011c4c:	4b04      	ldr	r3, [pc, #16]	; (8011c60 <__assert_func+0x38>)
 8011c4e:	461c      	mov	r4, r3
 8011c50:	e7f3      	b.n	8011c3a <__assert_func+0x12>
 8011c52:	bf00      	nop
 8011c54:	20000114 	.word	0x20000114
 8011c58:	08013530 	.word	0x08013530
 8011c5c:	0801353d 	.word	0x0801353d
 8011c60:	0801356b 	.word	0x0801356b

08011c64 <__env_lock>:
 8011c64:	4801      	ldr	r0, [pc, #4]	; (8011c6c <__env_lock+0x8>)
 8011c66:	f7ff bfc6 	b.w	8011bf6 <__retarget_lock_acquire_recursive>
 8011c6a:	bf00      	nop
 8011c6c:	20009448 	.word	0x20009448

08011c70 <__env_unlock>:
 8011c70:	4801      	ldr	r0, [pc, #4]	; (8011c78 <__env_unlock+0x8>)
 8011c72:	f7ff bfc1 	b.w	8011bf8 <__retarget_lock_release_recursive>
 8011c76:	bf00      	nop
 8011c78:	20009448 	.word	0x20009448

08011c7c <_free_r>:
 8011c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c7e:	2900      	cmp	r1, #0
 8011c80:	d044      	beq.n	8011d0c <_free_r+0x90>
 8011c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c86:	9001      	str	r0, [sp, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8011c8e:	bfb8      	it	lt
 8011c90:	18e4      	addlt	r4, r4, r3
 8011c92:	f7ff fc27 	bl	80114e4 <__malloc_lock>
 8011c96:	4a1e      	ldr	r2, [pc, #120]	; (8011d10 <_free_r+0x94>)
 8011c98:	9801      	ldr	r0, [sp, #4]
 8011c9a:	6813      	ldr	r3, [r2, #0]
 8011c9c:	b933      	cbnz	r3, 8011cac <_free_r+0x30>
 8011c9e:	6063      	str	r3, [r4, #4]
 8011ca0:	6014      	str	r4, [r2, #0]
 8011ca2:	b003      	add	sp, #12
 8011ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ca8:	f7ff bc22 	b.w	80114f0 <__malloc_unlock>
 8011cac:	42a3      	cmp	r3, r4
 8011cae:	d908      	bls.n	8011cc2 <_free_r+0x46>
 8011cb0:	6825      	ldr	r5, [r4, #0]
 8011cb2:	1961      	adds	r1, r4, r5
 8011cb4:	428b      	cmp	r3, r1
 8011cb6:	bf01      	itttt	eq
 8011cb8:	6819      	ldreq	r1, [r3, #0]
 8011cba:	685b      	ldreq	r3, [r3, #4]
 8011cbc:	1949      	addeq	r1, r1, r5
 8011cbe:	6021      	streq	r1, [r4, #0]
 8011cc0:	e7ed      	b.n	8011c9e <_free_r+0x22>
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	b10b      	cbz	r3, 8011ccc <_free_r+0x50>
 8011cc8:	42a3      	cmp	r3, r4
 8011cca:	d9fa      	bls.n	8011cc2 <_free_r+0x46>
 8011ccc:	6811      	ldr	r1, [r2, #0]
 8011cce:	1855      	adds	r5, r2, r1
 8011cd0:	42a5      	cmp	r5, r4
 8011cd2:	d10b      	bne.n	8011cec <_free_r+0x70>
 8011cd4:	6824      	ldr	r4, [r4, #0]
 8011cd6:	4421      	add	r1, r4
 8011cd8:	1854      	adds	r4, r2, r1
 8011cda:	42a3      	cmp	r3, r4
 8011cdc:	6011      	str	r1, [r2, #0]
 8011cde:	d1e0      	bne.n	8011ca2 <_free_r+0x26>
 8011ce0:	681c      	ldr	r4, [r3, #0]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	6053      	str	r3, [r2, #4]
 8011ce6:	440c      	add	r4, r1
 8011ce8:	6014      	str	r4, [r2, #0]
 8011cea:	e7da      	b.n	8011ca2 <_free_r+0x26>
 8011cec:	d902      	bls.n	8011cf4 <_free_r+0x78>
 8011cee:	230c      	movs	r3, #12
 8011cf0:	6003      	str	r3, [r0, #0]
 8011cf2:	e7d6      	b.n	8011ca2 <_free_r+0x26>
 8011cf4:	6825      	ldr	r5, [r4, #0]
 8011cf6:	1961      	adds	r1, r4, r5
 8011cf8:	428b      	cmp	r3, r1
 8011cfa:	bf04      	itt	eq
 8011cfc:	6819      	ldreq	r1, [r3, #0]
 8011cfe:	685b      	ldreq	r3, [r3, #4]
 8011d00:	6063      	str	r3, [r4, #4]
 8011d02:	bf04      	itt	eq
 8011d04:	1949      	addeq	r1, r1, r5
 8011d06:	6021      	streq	r1, [r4, #0]
 8011d08:	6054      	str	r4, [r2, #4]
 8011d0a:	e7ca      	b.n	8011ca2 <_free_r+0x26>
 8011d0c:	b003      	add	sp, #12
 8011d0e:	bd30      	pop	{r4, r5, pc}
 8011d10:	20009300 	.word	0x20009300

08011d14 <_malloc_usable_size_r>:
 8011d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d18:	1f18      	subs	r0, r3, #4
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	bfbc      	itt	lt
 8011d1e:	580b      	ldrlt	r3, [r1, r0]
 8011d20:	18c0      	addlt	r0, r0, r3
 8011d22:	4770      	bx	lr

08011d24 <__ssputs_r>:
 8011d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d28:	688e      	ldr	r6, [r1, #8]
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	42be      	cmp	r6, r7
 8011d2e:	680b      	ldr	r3, [r1, #0]
 8011d30:	4682      	mov	sl, r0
 8011d32:	460c      	mov	r4, r1
 8011d34:	4690      	mov	r8, r2
 8011d36:	d82c      	bhi.n	8011d92 <__ssputs_r+0x6e>
 8011d38:	898a      	ldrh	r2, [r1, #12]
 8011d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d3e:	d026      	beq.n	8011d8e <__ssputs_r+0x6a>
 8011d40:	6965      	ldr	r5, [r4, #20]
 8011d42:	6909      	ldr	r1, [r1, #16]
 8011d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d48:	eba3 0901 	sub.w	r9, r3, r1
 8011d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d50:	1c7b      	adds	r3, r7, #1
 8011d52:	444b      	add	r3, r9
 8011d54:	106d      	asrs	r5, r5, #1
 8011d56:	429d      	cmp	r5, r3
 8011d58:	bf38      	it	cc
 8011d5a:	461d      	movcc	r5, r3
 8011d5c:	0553      	lsls	r3, r2, #21
 8011d5e:	d527      	bpl.n	8011db0 <__ssputs_r+0x8c>
 8011d60:	4629      	mov	r1, r5
 8011d62:	f7ff fb3f 	bl	80113e4 <_malloc_r>
 8011d66:	4606      	mov	r6, r0
 8011d68:	b360      	cbz	r0, 8011dc4 <__ssputs_r+0xa0>
 8011d6a:	6921      	ldr	r1, [r4, #16]
 8011d6c:	464a      	mov	r2, r9
 8011d6e:	f7ff ff4c 	bl	8011c0a <memcpy>
 8011d72:	89a3      	ldrh	r3, [r4, #12]
 8011d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7c:	81a3      	strh	r3, [r4, #12]
 8011d7e:	6126      	str	r6, [r4, #16]
 8011d80:	6165      	str	r5, [r4, #20]
 8011d82:	444e      	add	r6, r9
 8011d84:	eba5 0509 	sub.w	r5, r5, r9
 8011d88:	6026      	str	r6, [r4, #0]
 8011d8a:	60a5      	str	r5, [r4, #8]
 8011d8c:	463e      	mov	r6, r7
 8011d8e:	42be      	cmp	r6, r7
 8011d90:	d900      	bls.n	8011d94 <__ssputs_r+0x70>
 8011d92:	463e      	mov	r6, r7
 8011d94:	6820      	ldr	r0, [r4, #0]
 8011d96:	4632      	mov	r2, r6
 8011d98:	4641      	mov	r1, r8
 8011d9a:	f7ff fe53 	bl	8011a44 <memmove>
 8011d9e:	68a3      	ldr	r3, [r4, #8]
 8011da0:	1b9b      	subs	r3, r3, r6
 8011da2:	60a3      	str	r3, [r4, #8]
 8011da4:	6823      	ldr	r3, [r4, #0]
 8011da6:	4433      	add	r3, r6
 8011da8:	6023      	str	r3, [r4, #0]
 8011daa:	2000      	movs	r0, #0
 8011dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db0:	462a      	mov	r2, r5
 8011db2:	f7ff fc17 	bl	80115e4 <_realloc_r>
 8011db6:	4606      	mov	r6, r0
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d1e0      	bne.n	8011d7e <__ssputs_r+0x5a>
 8011dbc:	6921      	ldr	r1, [r4, #16]
 8011dbe:	4650      	mov	r0, sl
 8011dc0:	f7ff ff5c 	bl	8011c7c <_free_r>
 8011dc4:	230c      	movs	r3, #12
 8011dc6:	f8ca 3000 	str.w	r3, [sl]
 8011dca:	89a3      	ldrh	r3, [r4, #12]
 8011dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dd6:	e7e9      	b.n	8011dac <__ssputs_r+0x88>

08011dd8 <_svfiprintf_r>:
 8011dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	4698      	mov	r8, r3
 8011dde:	898b      	ldrh	r3, [r1, #12]
 8011de0:	061b      	lsls	r3, r3, #24
 8011de2:	b09d      	sub	sp, #116	; 0x74
 8011de4:	4607      	mov	r7, r0
 8011de6:	460d      	mov	r5, r1
 8011de8:	4614      	mov	r4, r2
 8011dea:	d50e      	bpl.n	8011e0a <_svfiprintf_r+0x32>
 8011dec:	690b      	ldr	r3, [r1, #16]
 8011dee:	b963      	cbnz	r3, 8011e0a <_svfiprintf_r+0x32>
 8011df0:	2140      	movs	r1, #64	; 0x40
 8011df2:	f7ff faf7 	bl	80113e4 <_malloc_r>
 8011df6:	6028      	str	r0, [r5, #0]
 8011df8:	6128      	str	r0, [r5, #16]
 8011dfa:	b920      	cbnz	r0, 8011e06 <_svfiprintf_r+0x2e>
 8011dfc:	230c      	movs	r3, #12
 8011dfe:	603b      	str	r3, [r7, #0]
 8011e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e04:	e0d0      	b.n	8011fa8 <_svfiprintf_r+0x1d0>
 8011e06:	2340      	movs	r3, #64	; 0x40
 8011e08:	616b      	str	r3, [r5, #20]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e0e:	2320      	movs	r3, #32
 8011e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e18:	2330      	movs	r3, #48	; 0x30
 8011e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011fc0 <_svfiprintf_r+0x1e8>
 8011e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e22:	f04f 0901 	mov.w	r9, #1
 8011e26:	4623      	mov	r3, r4
 8011e28:	469a      	mov	sl, r3
 8011e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e2e:	b10a      	cbz	r2, 8011e34 <_svfiprintf_r+0x5c>
 8011e30:	2a25      	cmp	r2, #37	; 0x25
 8011e32:	d1f9      	bne.n	8011e28 <_svfiprintf_r+0x50>
 8011e34:	ebba 0b04 	subs.w	fp, sl, r4
 8011e38:	d00b      	beq.n	8011e52 <_svfiprintf_r+0x7a>
 8011e3a:	465b      	mov	r3, fp
 8011e3c:	4622      	mov	r2, r4
 8011e3e:	4629      	mov	r1, r5
 8011e40:	4638      	mov	r0, r7
 8011e42:	f7ff ff6f 	bl	8011d24 <__ssputs_r>
 8011e46:	3001      	adds	r0, #1
 8011e48:	f000 80a9 	beq.w	8011f9e <_svfiprintf_r+0x1c6>
 8011e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e4e:	445a      	add	r2, fp
 8011e50:	9209      	str	r2, [sp, #36]	; 0x24
 8011e52:	f89a 3000 	ldrb.w	r3, [sl]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	f000 80a1 	beq.w	8011f9e <_svfiprintf_r+0x1c6>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e66:	f10a 0a01 	add.w	sl, sl, #1
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	9307      	str	r3, [sp, #28]
 8011e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e72:	931a      	str	r3, [sp, #104]	; 0x68
 8011e74:	4654      	mov	r4, sl
 8011e76:	2205      	movs	r2, #5
 8011e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e7c:	4850      	ldr	r0, [pc, #320]	; (8011fc0 <_svfiprintf_r+0x1e8>)
 8011e7e:	f7ee f9df 	bl	8000240 <memchr>
 8011e82:	9a04      	ldr	r2, [sp, #16]
 8011e84:	b9d8      	cbnz	r0, 8011ebe <_svfiprintf_r+0xe6>
 8011e86:	06d0      	lsls	r0, r2, #27
 8011e88:	bf44      	itt	mi
 8011e8a:	2320      	movmi	r3, #32
 8011e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e90:	0711      	lsls	r1, r2, #28
 8011e92:	bf44      	itt	mi
 8011e94:	232b      	movmi	r3, #43	; 0x2b
 8011e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8011e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8011ea0:	d015      	beq.n	8011ece <_svfiprintf_r+0xf6>
 8011ea2:	9a07      	ldr	r2, [sp, #28]
 8011ea4:	4654      	mov	r4, sl
 8011ea6:	2000      	movs	r0, #0
 8011ea8:	f04f 0c0a 	mov.w	ip, #10
 8011eac:	4621      	mov	r1, r4
 8011eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eb2:	3b30      	subs	r3, #48	; 0x30
 8011eb4:	2b09      	cmp	r3, #9
 8011eb6:	d94d      	bls.n	8011f54 <_svfiprintf_r+0x17c>
 8011eb8:	b1b0      	cbz	r0, 8011ee8 <_svfiprintf_r+0x110>
 8011eba:	9207      	str	r2, [sp, #28]
 8011ebc:	e014      	b.n	8011ee8 <_svfiprintf_r+0x110>
 8011ebe:	eba0 0308 	sub.w	r3, r0, r8
 8011ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8011ec6:	4313      	orrs	r3, r2
 8011ec8:	9304      	str	r3, [sp, #16]
 8011eca:	46a2      	mov	sl, r4
 8011ecc:	e7d2      	b.n	8011e74 <_svfiprintf_r+0x9c>
 8011ece:	9b03      	ldr	r3, [sp, #12]
 8011ed0:	1d19      	adds	r1, r3, #4
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	9103      	str	r1, [sp, #12]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	bfbb      	ittet	lt
 8011eda:	425b      	neglt	r3, r3
 8011edc:	f042 0202 	orrlt.w	r2, r2, #2
 8011ee0:	9307      	strge	r3, [sp, #28]
 8011ee2:	9307      	strlt	r3, [sp, #28]
 8011ee4:	bfb8      	it	lt
 8011ee6:	9204      	strlt	r2, [sp, #16]
 8011ee8:	7823      	ldrb	r3, [r4, #0]
 8011eea:	2b2e      	cmp	r3, #46	; 0x2e
 8011eec:	d10c      	bne.n	8011f08 <_svfiprintf_r+0x130>
 8011eee:	7863      	ldrb	r3, [r4, #1]
 8011ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef2:	d134      	bne.n	8011f5e <_svfiprintf_r+0x186>
 8011ef4:	9b03      	ldr	r3, [sp, #12]
 8011ef6:	1d1a      	adds	r2, r3, #4
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	9203      	str	r2, [sp, #12]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	bfb8      	it	lt
 8011f00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011f04:	3402      	adds	r4, #2
 8011f06:	9305      	str	r3, [sp, #20]
 8011f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011fd0 <_svfiprintf_r+0x1f8>
 8011f0c:	7821      	ldrb	r1, [r4, #0]
 8011f0e:	2203      	movs	r2, #3
 8011f10:	4650      	mov	r0, sl
 8011f12:	f7ee f995 	bl	8000240 <memchr>
 8011f16:	b138      	cbz	r0, 8011f28 <_svfiprintf_r+0x150>
 8011f18:	9b04      	ldr	r3, [sp, #16]
 8011f1a:	eba0 000a 	sub.w	r0, r0, sl
 8011f1e:	2240      	movs	r2, #64	; 0x40
 8011f20:	4082      	lsls	r2, r0
 8011f22:	4313      	orrs	r3, r2
 8011f24:	3401      	adds	r4, #1
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f2c:	4825      	ldr	r0, [pc, #148]	; (8011fc4 <_svfiprintf_r+0x1ec>)
 8011f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f32:	2206      	movs	r2, #6
 8011f34:	f7ee f984 	bl	8000240 <memchr>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d038      	beq.n	8011fae <_svfiprintf_r+0x1d6>
 8011f3c:	4b22      	ldr	r3, [pc, #136]	; (8011fc8 <_svfiprintf_r+0x1f0>)
 8011f3e:	bb1b      	cbnz	r3, 8011f88 <_svfiprintf_r+0x1b0>
 8011f40:	9b03      	ldr	r3, [sp, #12]
 8011f42:	3307      	adds	r3, #7
 8011f44:	f023 0307 	bic.w	r3, r3, #7
 8011f48:	3308      	adds	r3, #8
 8011f4a:	9303      	str	r3, [sp, #12]
 8011f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f4e:	4433      	add	r3, r6
 8011f50:	9309      	str	r3, [sp, #36]	; 0x24
 8011f52:	e768      	b.n	8011e26 <_svfiprintf_r+0x4e>
 8011f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f58:	460c      	mov	r4, r1
 8011f5a:	2001      	movs	r0, #1
 8011f5c:	e7a6      	b.n	8011eac <_svfiprintf_r+0xd4>
 8011f5e:	2300      	movs	r3, #0
 8011f60:	3401      	adds	r4, #1
 8011f62:	9305      	str	r3, [sp, #20]
 8011f64:	4619      	mov	r1, r3
 8011f66:	f04f 0c0a 	mov.w	ip, #10
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f70:	3a30      	subs	r2, #48	; 0x30
 8011f72:	2a09      	cmp	r2, #9
 8011f74:	d903      	bls.n	8011f7e <_svfiprintf_r+0x1a6>
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d0c6      	beq.n	8011f08 <_svfiprintf_r+0x130>
 8011f7a:	9105      	str	r1, [sp, #20]
 8011f7c:	e7c4      	b.n	8011f08 <_svfiprintf_r+0x130>
 8011f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f82:	4604      	mov	r4, r0
 8011f84:	2301      	movs	r3, #1
 8011f86:	e7f0      	b.n	8011f6a <_svfiprintf_r+0x192>
 8011f88:	ab03      	add	r3, sp, #12
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	462a      	mov	r2, r5
 8011f8e:	4b0f      	ldr	r3, [pc, #60]	; (8011fcc <_svfiprintf_r+0x1f4>)
 8011f90:	a904      	add	r1, sp, #16
 8011f92:	4638      	mov	r0, r7
 8011f94:	f3af 8000 	nop.w
 8011f98:	1c42      	adds	r2, r0, #1
 8011f9a:	4606      	mov	r6, r0
 8011f9c:	d1d6      	bne.n	8011f4c <_svfiprintf_r+0x174>
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	065b      	lsls	r3, r3, #25
 8011fa2:	f53f af2d 	bmi.w	8011e00 <_svfiprintf_r+0x28>
 8011fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fa8:	b01d      	add	sp, #116	; 0x74
 8011faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fae:	ab03      	add	r3, sp, #12
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4b05      	ldr	r3, [pc, #20]	; (8011fcc <_svfiprintf_r+0x1f4>)
 8011fb6:	a904      	add	r1, sp, #16
 8011fb8:	4638      	mov	r0, r7
 8011fba:	f000 f9bd 	bl	8012338 <_printf_i>
 8011fbe:	e7eb      	b.n	8011f98 <_svfiprintf_r+0x1c0>
 8011fc0:	0801356c 	.word	0x0801356c
 8011fc4:	08013576 	.word	0x08013576
 8011fc8:	00000000 	.word	0x00000000
 8011fcc:	08011d25 	.word	0x08011d25
 8011fd0:	08013572 	.word	0x08013572

08011fd4 <__sfputc_r>:
 8011fd4:	6893      	ldr	r3, [r2, #8]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	b410      	push	{r4}
 8011fdc:	6093      	str	r3, [r2, #8]
 8011fde:	da08      	bge.n	8011ff2 <__sfputc_r+0x1e>
 8011fe0:	6994      	ldr	r4, [r2, #24]
 8011fe2:	42a3      	cmp	r3, r4
 8011fe4:	db01      	blt.n	8011fea <__sfputc_r+0x16>
 8011fe6:	290a      	cmp	r1, #10
 8011fe8:	d103      	bne.n	8011ff2 <__sfputc_r+0x1e>
 8011fea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fee:	f000 bb85 	b.w	80126fc <__swbuf_r>
 8011ff2:	6813      	ldr	r3, [r2, #0]
 8011ff4:	1c58      	adds	r0, r3, #1
 8011ff6:	6010      	str	r0, [r2, #0]
 8011ff8:	7019      	strb	r1, [r3, #0]
 8011ffa:	4608      	mov	r0, r1
 8011ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012000:	4770      	bx	lr

08012002 <__sfputs_r>:
 8012002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012004:	4606      	mov	r6, r0
 8012006:	460f      	mov	r7, r1
 8012008:	4614      	mov	r4, r2
 801200a:	18d5      	adds	r5, r2, r3
 801200c:	42ac      	cmp	r4, r5
 801200e:	d101      	bne.n	8012014 <__sfputs_r+0x12>
 8012010:	2000      	movs	r0, #0
 8012012:	e007      	b.n	8012024 <__sfputs_r+0x22>
 8012014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012018:	463a      	mov	r2, r7
 801201a:	4630      	mov	r0, r6
 801201c:	f7ff ffda 	bl	8011fd4 <__sfputc_r>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d1f3      	bne.n	801200c <__sfputs_r+0xa>
 8012024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012028 <_vfiprintf_r>:
 8012028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202c:	460d      	mov	r5, r1
 801202e:	b09d      	sub	sp, #116	; 0x74
 8012030:	4614      	mov	r4, r2
 8012032:	4698      	mov	r8, r3
 8012034:	4606      	mov	r6, r0
 8012036:	b118      	cbz	r0, 8012040 <_vfiprintf_r+0x18>
 8012038:	6a03      	ldr	r3, [r0, #32]
 801203a:	b90b      	cbnz	r3, 8012040 <_vfiprintf_r+0x18>
 801203c:	f7ff fc0a 	bl	8011854 <__sinit>
 8012040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012042:	07d9      	lsls	r1, r3, #31
 8012044:	d405      	bmi.n	8012052 <_vfiprintf_r+0x2a>
 8012046:	89ab      	ldrh	r3, [r5, #12]
 8012048:	059a      	lsls	r2, r3, #22
 801204a:	d402      	bmi.n	8012052 <_vfiprintf_r+0x2a>
 801204c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801204e:	f7ff fdd2 	bl	8011bf6 <__retarget_lock_acquire_recursive>
 8012052:	89ab      	ldrh	r3, [r5, #12]
 8012054:	071b      	lsls	r3, r3, #28
 8012056:	d501      	bpl.n	801205c <_vfiprintf_r+0x34>
 8012058:	692b      	ldr	r3, [r5, #16]
 801205a:	b99b      	cbnz	r3, 8012084 <_vfiprintf_r+0x5c>
 801205c:	4629      	mov	r1, r5
 801205e:	4630      	mov	r0, r6
 8012060:	f000 fb8a 	bl	8012778 <__swsetup_r>
 8012064:	b170      	cbz	r0, 8012084 <_vfiprintf_r+0x5c>
 8012066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012068:	07dc      	lsls	r4, r3, #31
 801206a:	d504      	bpl.n	8012076 <_vfiprintf_r+0x4e>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012070:	b01d      	add	sp, #116	; 0x74
 8012072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012076:	89ab      	ldrh	r3, [r5, #12]
 8012078:	0598      	lsls	r0, r3, #22
 801207a:	d4f7      	bmi.n	801206c <_vfiprintf_r+0x44>
 801207c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801207e:	f7ff fdbb 	bl	8011bf8 <__retarget_lock_release_recursive>
 8012082:	e7f3      	b.n	801206c <_vfiprintf_r+0x44>
 8012084:	2300      	movs	r3, #0
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	2320      	movs	r3, #32
 801208a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801208e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012092:	2330      	movs	r3, #48	; 0x30
 8012094:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012248 <_vfiprintf_r+0x220>
 8012098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801209c:	f04f 0901 	mov.w	r9, #1
 80120a0:	4623      	mov	r3, r4
 80120a2:	469a      	mov	sl, r3
 80120a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a8:	b10a      	cbz	r2, 80120ae <_vfiprintf_r+0x86>
 80120aa:	2a25      	cmp	r2, #37	; 0x25
 80120ac:	d1f9      	bne.n	80120a2 <_vfiprintf_r+0x7a>
 80120ae:	ebba 0b04 	subs.w	fp, sl, r4
 80120b2:	d00b      	beq.n	80120cc <_vfiprintf_r+0xa4>
 80120b4:	465b      	mov	r3, fp
 80120b6:	4622      	mov	r2, r4
 80120b8:	4629      	mov	r1, r5
 80120ba:	4630      	mov	r0, r6
 80120bc:	f7ff ffa1 	bl	8012002 <__sfputs_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	f000 80a9 	beq.w	8012218 <_vfiprintf_r+0x1f0>
 80120c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120c8:	445a      	add	r2, fp
 80120ca:	9209      	str	r2, [sp, #36]	; 0x24
 80120cc:	f89a 3000 	ldrb.w	r3, [sl]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 80a1 	beq.w	8012218 <_vfiprintf_r+0x1f0>
 80120d6:	2300      	movs	r3, #0
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120e0:	f10a 0a01 	add.w	sl, sl, #1
 80120e4:	9304      	str	r3, [sp, #16]
 80120e6:	9307      	str	r3, [sp, #28]
 80120e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ec:	931a      	str	r3, [sp, #104]	; 0x68
 80120ee:	4654      	mov	r4, sl
 80120f0:	2205      	movs	r2, #5
 80120f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120f6:	4854      	ldr	r0, [pc, #336]	; (8012248 <_vfiprintf_r+0x220>)
 80120f8:	f7ee f8a2 	bl	8000240 <memchr>
 80120fc:	9a04      	ldr	r2, [sp, #16]
 80120fe:	b9d8      	cbnz	r0, 8012138 <_vfiprintf_r+0x110>
 8012100:	06d1      	lsls	r1, r2, #27
 8012102:	bf44      	itt	mi
 8012104:	2320      	movmi	r3, #32
 8012106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801210a:	0713      	lsls	r3, r2, #28
 801210c:	bf44      	itt	mi
 801210e:	232b      	movmi	r3, #43	; 0x2b
 8012110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012114:	f89a 3000 	ldrb.w	r3, [sl]
 8012118:	2b2a      	cmp	r3, #42	; 0x2a
 801211a:	d015      	beq.n	8012148 <_vfiprintf_r+0x120>
 801211c:	9a07      	ldr	r2, [sp, #28]
 801211e:	4654      	mov	r4, sl
 8012120:	2000      	movs	r0, #0
 8012122:	f04f 0c0a 	mov.w	ip, #10
 8012126:	4621      	mov	r1, r4
 8012128:	f811 3b01 	ldrb.w	r3, [r1], #1
 801212c:	3b30      	subs	r3, #48	; 0x30
 801212e:	2b09      	cmp	r3, #9
 8012130:	d94d      	bls.n	80121ce <_vfiprintf_r+0x1a6>
 8012132:	b1b0      	cbz	r0, 8012162 <_vfiprintf_r+0x13a>
 8012134:	9207      	str	r2, [sp, #28]
 8012136:	e014      	b.n	8012162 <_vfiprintf_r+0x13a>
 8012138:	eba0 0308 	sub.w	r3, r0, r8
 801213c:	fa09 f303 	lsl.w	r3, r9, r3
 8012140:	4313      	orrs	r3, r2
 8012142:	9304      	str	r3, [sp, #16]
 8012144:	46a2      	mov	sl, r4
 8012146:	e7d2      	b.n	80120ee <_vfiprintf_r+0xc6>
 8012148:	9b03      	ldr	r3, [sp, #12]
 801214a:	1d19      	adds	r1, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	9103      	str	r1, [sp, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	bfbb      	ittet	lt
 8012154:	425b      	neglt	r3, r3
 8012156:	f042 0202 	orrlt.w	r2, r2, #2
 801215a:	9307      	strge	r3, [sp, #28]
 801215c:	9307      	strlt	r3, [sp, #28]
 801215e:	bfb8      	it	lt
 8012160:	9204      	strlt	r2, [sp, #16]
 8012162:	7823      	ldrb	r3, [r4, #0]
 8012164:	2b2e      	cmp	r3, #46	; 0x2e
 8012166:	d10c      	bne.n	8012182 <_vfiprintf_r+0x15a>
 8012168:	7863      	ldrb	r3, [r4, #1]
 801216a:	2b2a      	cmp	r3, #42	; 0x2a
 801216c:	d134      	bne.n	80121d8 <_vfiprintf_r+0x1b0>
 801216e:	9b03      	ldr	r3, [sp, #12]
 8012170:	1d1a      	adds	r2, r3, #4
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	9203      	str	r2, [sp, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfb8      	it	lt
 801217a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801217e:	3402      	adds	r4, #2
 8012180:	9305      	str	r3, [sp, #20]
 8012182:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012258 <_vfiprintf_r+0x230>
 8012186:	7821      	ldrb	r1, [r4, #0]
 8012188:	2203      	movs	r2, #3
 801218a:	4650      	mov	r0, sl
 801218c:	f7ee f858 	bl	8000240 <memchr>
 8012190:	b138      	cbz	r0, 80121a2 <_vfiprintf_r+0x17a>
 8012192:	9b04      	ldr	r3, [sp, #16]
 8012194:	eba0 000a 	sub.w	r0, r0, sl
 8012198:	2240      	movs	r2, #64	; 0x40
 801219a:	4082      	lsls	r2, r0
 801219c:	4313      	orrs	r3, r2
 801219e:	3401      	adds	r4, #1
 80121a0:	9304      	str	r3, [sp, #16]
 80121a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a6:	4829      	ldr	r0, [pc, #164]	; (801224c <_vfiprintf_r+0x224>)
 80121a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121ac:	2206      	movs	r2, #6
 80121ae:	f7ee f847 	bl	8000240 <memchr>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d03f      	beq.n	8012236 <_vfiprintf_r+0x20e>
 80121b6:	4b26      	ldr	r3, [pc, #152]	; (8012250 <_vfiprintf_r+0x228>)
 80121b8:	bb1b      	cbnz	r3, 8012202 <_vfiprintf_r+0x1da>
 80121ba:	9b03      	ldr	r3, [sp, #12]
 80121bc:	3307      	adds	r3, #7
 80121be:	f023 0307 	bic.w	r3, r3, #7
 80121c2:	3308      	adds	r3, #8
 80121c4:	9303      	str	r3, [sp, #12]
 80121c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c8:	443b      	add	r3, r7
 80121ca:	9309      	str	r3, [sp, #36]	; 0x24
 80121cc:	e768      	b.n	80120a0 <_vfiprintf_r+0x78>
 80121ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80121d2:	460c      	mov	r4, r1
 80121d4:	2001      	movs	r0, #1
 80121d6:	e7a6      	b.n	8012126 <_vfiprintf_r+0xfe>
 80121d8:	2300      	movs	r3, #0
 80121da:	3401      	adds	r4, #1
 80121dc:	9305      	str	r3, [sp, #20]
 80121de:	4619      	mov	r1, r3
 80121e0:	f04f 0c0a 	mov.w	ip, #10
 80121e4:	4620      	mov	r0, r4
 80121e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ea:	3a30      	subs	r2, #48	; 0x30
 80121ec:	2a09      	cmp	r2, #9
 80121ee:	d903      	bls.n	80121f8 <_vfiprintf_r+0x1d0>
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d0c6      	beq.n	8012182 <_vfiprintf_r+0x15a>
 80121f4:	9105      	str	r1, [sp, #20]
 80121f6:	e7c4      	b.n	8012182 <_vfiprintf_r+0x15a>
 80121f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80121fc:	4604      	mov	r4, r0
 80121fe:	2301      	movs	r3, #1
 8012200:	e7f0      	b.n	80121e4 <_vfiprintf_r+0x1bc>
 8012202:	ab03      	add	r3, sp, #12
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	462a      	mov	r2, r5
 8012208:	4b12      	ldr	r3, [pc, #72]	; (8012254 <_vfiprintf_r+0x22c>)
 801220a:	a904      	add	r1, sp, #16
 801220c:	4630      	mov	r0, r6
 801220e:	f3af 8000 	nop.w
 8012212:	4607      	mov	r7, r0
 8012214:	1c78      	adds	r0, r7, #1
 8012216:	d1d6      	bne.n	80121c6 <_vfiprintf_r+0x19e>
 8012218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801221a:	07d9      	lsls	r1, r3, #31
 801221c:	d405      	bmi.n	801222a <_vfiprintf_r+0x202>
 801221e:	89ab      	ldrh	r3, [r5, #12]
 8012220:	059a      	lsls	r2, r3, #22
 8012222:	d402      	bmi.n	801222a <_vfiprintf_r+0x202>
 8012224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012226:	f7ff fce7 	bl	8011bf8 <__retarget_lock_release_recursive>
 801222a:	89ab      	ldrh	r3, [r5, #12]
 801222c:	065b      	lsls	r3, r3, #25
 801222e:	f53f af1d 	bmi.w	801206c <_vfiprintf_r+0x44>
 8012232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012234:	e71c      	b.n	8012070 <_vfiprintf_r+0x48>
 8012236:	ab03      	add	r3, sp, #12
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	462a      	mov	r2, r5
 801223c:	4b05      	ldr	r3, [pc, #20]	; (8012254 <_vfiprintf_r+0x22c>)
 801223e:	a904      	add	r1, sp, #16
 8012240:	4630      	mov	r0, r6
 8012242:	f000 f879 	bl	8012338 <_printf_i>
 8012246:	e7e4      	b.n	8012212 <_vfiprintf_r+0x1ea>
 8012248:	0801356c 	.word	0x0801356c
 801224c:	08013576 	.word	0x08013576
 8012250:	00000000 	.word	0x00000000
 8012254:	08012003 	.word	0x08012003
 8012258:	08013572 	.word	0x08013572

0801225c <_printf_common>:
 801225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012260:	4616      	mov	r6, r2
 8012262:	4699      	mov	r9, r3
 8012264:	688a      	ldr	r2, [r1, #8]
 8012266:	690b      	ldr	r3, [r1, #16]
 8012268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801226c:	4293      	cmp	r3, r2
 801226e:	bfb8      	it	lt
 8012270:	4613      	movlt	r3, r2
 8012272:	6033      	str	r3, [r6, #0]
 8012274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012278:	4607      	mov	r7, r0
 801227a:	460c      	mov	r4, r1
 801227c:	b10a      	cbz	r2, 8012282 <_printf_common+0x26>
 801227e:	3301      	adds	r3, #1
 8012280:	6033      	str	r3, [r6, #0]
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	0699      	lsls	r1, r3, #26
 8012286:	bf42      	ittt	mi
 8012288:	6833      	ldrmi	r3, [r6, #0]
 801228a:	3302      	addmi	r3, #2
 801228c:	6033      	strmi	r3, [r6, #0]
 801228e:	6825      	ldr	r5, [r4, #0]
 8012290:	f015 0506 	ands.w	r5, r5, #6
 8012294:	d106      	bne.n	80122a4 <_printf_common+0x48>
 8012296:	f104 0a19 	add.w	sl, r4, #25
 801229a:	68e3      	ldr	r3, [r4, #12]
 801229c:	6832      	ldr	r2, [r6, #0]
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	42ab      	cmp	r3, r5
 80122a2:	dc26      	bgt.n	80122f2 <_printf_common+0x96>
 80122a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122a8:	1e13      	subs	r3, r2, #0
 80122aa:	6822      	ldr	r2, [r4, #0]
 80122ac:	bf18      	it	ne
 80122ae:	2301      	movne	r3, #1
 80122b0:	0692      	lsls	r2, r2, #26
 80122b2:	d42b      	bmi.n	801230c <_printf_common+0xb0>
 80122b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80122b8:	4649      	mov	r1, r9
 80122ba:	4638      	mov	r0, r7
 80122bc:	47c0      	blx	r8
 80122be:	3001      	adds	r0, #1
 80122c0:	d01e      	beq.n	8012300 <_printf_common+0xa4>
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	6922      	ldr	r2, [r4, #16]
 80122c6:	f003 0306 	and.w	r3, r3, #6
 80122ca:	2b04      	cmp	r3, #4
 80122cc:	bf02      	ittt	eq
 80122ce:	68e5      	ldreq	r5, [r4, #12]
 80122d0:	6833      	ldreq	r3, [r6, #0]
 80122d2:	1aed      	subeq	r5, r5, r3
 80122d4:	68a3      	ldr	r3, [r4, #8]
 80122d6:	bf0c      	ite	eq
 80122d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122dc:	2500      	movne	r5, #0
 80122de:	4293      	cmp	r3, r2
 80122e0:	bfc4      	itt	gt
 80122e2:	1a9b      	subgt	r3, r3, r2
 80122e4:	18ed      	addgt	r5, r5, r3
 80122e6:	2600      	movs	r6, #0
 80122e8:	341a      	adds	r4, #26
 80122ea:	42b5      	cmp	r5, r6
 80122ec:	d11a      	bne.n	8012324 <_printf_common+0xc8>
 80122ee:	2000      	movs	r0, #0
 80122f0:	e008      	b.n	8012304 <_printf_common+0xa8>
 80122f2:	2301      	movs	r3, #1
 80122f4:	4652      	mov	r2, sl
 80122f6:	4649      	mov	r1, r9
 80122f8:	4638      	mov	r0, r7
 80122fa:	47c0      	blx	r8
 80122fc:	3001      	adds	r0, #1
 80122fe:	d103      	bne.n	8012308 <_printf_common+0xac>
 8012300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	3501      	adds	r5, #1
 801230a:	e7c6      	b.n	801229a <_printf_common+0x3e>
 801230c:	18e1      	adds	r1, r4, r3
 801230e:	1c5a      	adds	r2, r3, #1
 8012310:	2030      	movs	r0, #48	; 0x30
 8012312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012316:	4422      	add	r2, r4
 8012318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801231c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012320:	3302      	adds	r3, #2
 8012322:	e7c7      	b.n	80122b4 <_printf_common+0x58>
 8012324:	2301      	movs	r3, #1
 8012326:	4622      	mov	r2, r4
 8012328:	4649      	mov	r1, r9
 801232a:	4638      	mov	r0, r7
 801232c:	47c0      	blx	r8
 801232e:	3001      	adds	r0, #1
 8012330:	d0e6      	beq.n	8012300 <_printf_common+0xa4>
 8012332:	3601      	adds	r6, #1
 8012334:	e7d9      	b.n	80122ea <_printf_common+0x8e>
	...

08012338 <_printf_i>:
 8012338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801233c:	7e0f      	ldrb	r7, [r1, #24]
 801233e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012340:	2f78      	cmp	r7, #120	; 0x78
 8012342:	4691      	mov	r9, r2
 8012344:	4680      	mov	r8, r0
 8012346:	460c      	mov	r4, r1
 8012348:	469a      	mov	sl, r3
 801234a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801234e:	d807      	bhi.n	8012360 <_printf_i+0x28>
 8012350:	2f62      	cmp	r7, #98	; 0x62
 8012352:	d80a      	bhi.n	801236a <_printf_i+0x32>
 8012354:	2f00      	cmp	r7, #0
 8012356:	f000 80d4 	beq.w	8012502 <_printf_i+0x1ca>
 801235a:	2f58      	cmp	r7, #88	; 0x58
 801235c:	f000 80c0 	beq.w	80124e0 <_printf_i+0x1a8>
 8012360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012368:	e03a      	b.n	80123e0 <_printf_i+0xa8>
 801236a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801236e:	2b15      	cmp	r3, #21
 8012370:	d8f6      	bhi.n	8012360 <_printf_i+0x28>
 8012372:	a101      	add	r1, pc, #4	; (adr r1, 8012378 <_printf_i+0x40>)
 8012374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012378:	080123d1 	.word	0x080123d1
 801237c:	080123e5 	.word	0x080123e5
 8012380:	08012361 	.word	0x08012361
 8012384:	08012361 	.word	0x08012361
 8012388:	08012361 	.word	0x08012361
 801238c:	08012361 	.word	0x08012361
 8012390:	080123e5 	.word	0x080123e5
 8012394:	08012361 	.word	0x08012361
 8012398:	08012361 	.word	0x08012361
 801239c:	08012361 	.word	0x08012361
 80123a0:	08012361 	.word	0x08012361
 80123a4:	080124e9 	.word	0x080124e9
 80123a8:	08012411 	.word	0x08012411
 80123ac:	080124a3 	.word	0x080124a3
 80123b0:	08012361 	.word	0x08012361
 80123b4:	08012361 	.word	0x08012361
 80123b8:	0801250b 	.word	0x0801250b
 80123bc:	08012361 	.word	0x08012361
 80123c0:	08012411 	.word	0x08012411
 80123c4:	08012361 	.word	0x08012361
 80123c8:	08012361 	.word	0x08012361
 80123cc:	080124ab 	.word	0x080124ab
 80123d0:	682b      	ldr	r3, [r5, #0]
 80123d2:	1d1a      	adds	r2, r3, #4
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	602a      	str	r2, [r5, #0]
 80123d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123e0:	2301      	movs	r3, #1
 80123e2:	e09f      	b.n	8012524 <_printf_i+0x1ec>
 80123e4:	6820      	ldr	r0, [r4, #0]
 80123e6:	682b      	ldr	r3, [r5, #0]
 80123e8:	0607      	lsls	r7, r0, #24
 80123ea:	f103 0104 	add.w	r1, r3, #4
 80123ee:	6029      	str	r1, [r5, #0]
 80123f0:	d501      	bpl.n	80123f6 <_printf_i+0xbe>
 80123f2:	681e      	ldr	r6, [r3, #0]
 80123f4:	e003      	b.n	80123fe <_printf_i+0xc6>
 80123f6:	0646      	lsls	r6, r0, #25
 80123f8:	d5fb      	bpl.n	80123f2 <_printf_i+0xba>
 80123fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80123fe:	2e00      	cmp	r6, #0
 8012400:	da03      	bge.n	801240a <_printf_i+0xd2>
 8012402:	232d      	movs	r3, #45	; 0x2d
 8012404:	4276      	negs	r6, r6
 8012406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801240a:	485a      	ldr	r0, [pc, #360]	; (8012574 <_printf_i+0x23c>)
 801240c:	230a      	movs	r3, #10
 801240e:	e012      	b.n	8012436 <_printf_i+0xfe>
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	6820      	ldr	r0, [r4, #0]
 8012414:	1d19      	adds	r1, r3, #4
 8012416:	6029      	str	r1, [r5, #0]
 8012418:	0605      	lsls	r5, r0, #24
 801241a:	d501      	bpl.n	8012420 <_printf_i+0xe8>
 801241c:	681e      	ldr	r6, [r3, #0]
 801241e:	e002      	b.n	8012426 <_printf_i+0xee>
 8012420:	0641      	lsls	r1, r0, #25
 8012422:	d5fb      	bpl.n	801241c <_printf_i+0xe4>
 8012424:	881e      	ldrh	r6, [r3, #0]
 8012426:	4853      	ldr	r0, [pc, #332]	; (8012574 <_printf_i+0x23c>)
 8012428:	2f6f      	cmp	r7, #111	; 0x6f
 801242a:	bf0c      	ite	eq
 801242c:	2308      	moveq	r3, #8
 801242e:	230a      	movne	r3, #10
 8012430:	2100      	movs	r1, #0
 8012432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012436:	6865      	ldr	r5, [r4, #4]
 8012438:	60a5      	str	r5, [r4, #8]
 801243a:	2d00      	cmp	r5, #0
 801243c:	bfa2      	ittt	ge
 801243e:	6821      	ldrge	r1, [r4, #0]
 8012440:	f021 0104 	bicge.w	r1, r1, #4
 8012444:	6021      	strge	r1, [r4, #0]
 8012446:	b90e      	cbnz	r6, 801244c <_printf_i+0x114>
 8012448:	2d00      	cmp	r5, #0
 801244a:	d04b      	beq.n	80124e4 <_printf_i+0x1ac>
 801244c:	4615      	mov	r5, r2
 801244e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012452:	fb03 6711 	mls	r7, r3, r1, r6
 8012456:	5dc7      	ldrb	r7, [r0, r7]
 8012458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801245c:	4637      	mov	r7, r6
 801245e:	42bb      	cmp	r3, r7
 8012460:	460e      	mov	r6, r1
 8012462:	d9f4      	bls.n	801244e <_printf_i+0x116>
 8012464:	2b08      	cmp	r3, #8
 8012466:	d10b      	bne.n	8012480 <_printf_i+0x148>
 8012468:	6823      	ldr	r3, [r4, #0]
 801246a:	07de      	lsls	r6, r3, #31
 801246c:	d508      	bpl.n	8012480 <_printf_i+0x148>
 801246e:	6923      	ldr	r3, [r4, #16]
 8012470:	6861      	ldr	r1, [r4, #4]
 8012472:	4299      	cmp	r1, r3
 8012474:	bfde      	ittt	le
 8012476:	2330      	movle	r3, #48	; 0x30
 8012478:	f805 3c01 	strble.w	r3, [r5, #-1]
 801247c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012480:	1b52      	subs	r2, r2, r5
 8012482:	6122      	str	r2, [r4, #16]
 8012484:	f8cd a000 	str.w	sl, [sp]
 8012488:	464b      	mov	r3, r9
 801248a:	aa03      	add	r2, sp, #12
 801248c:	4621      	mov	r1, r4
 801248e:	4640      	mov	r0, r8
 8012490:	f7ff fee4 	bl	801225c <_printf_common>
 8012494:	3001      	adds	r0, #1
 8012496:	d14a      	bne.n	801252e <_printf_i+0x1f6>
 8012498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801249c:	b004      	add	sp, #16
 801249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a2:	6823      	ldr	r3, [r4, #0]
 80124a4:	f043 0320 	orr.w	r3, r3, #32
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	4833      	ldr	r0, [pc, #204]	; (8012578 <_printf_i+0x240>)
 80124ac:	2778      	movs	r7, #120	; 0x78
 80124ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124b2:	6823      	ldr	r3, [r4, #0]
 80124b4:	6829      	ldr	r1, [r5, #0]
 80124b6:	061f      	lsls	r7, r3, #24
 80124b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80124bc:	d402      	bmi.n	80124c4 <_printf_i+0x18c>
 80124be:	065f      	lsls	r7, r3, #25
 80124c0:	bf48      	it	mi
 80124c2:	b2b6      	uxthmi	r6, r6
 80124c4:	07df      	lsls	r7, r3, #31
 80124c6:	bf48      	it	mi
 80124c8:	f043 0320 	orrmi.w	r3, r3, #32
 80124cc:	6029      	str	r1, [r5, #0]
 80124ce:	bf48      	it	mi
 80124d0:	6023      	strmi	r3, [r4, #0]
 80124d2:	b91e      	cbnz	r6, 80124dc <_printf_i+0x1a4>
 80124d4:	6823      	ldr	r3, [r4, #0]
 80124d6:	f023 0320 	bic.w	r3, r3, #32
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	2310      	movs	r3, #16
 80124de:	e7a7      	b.n	8012430 <_printf_i+0xf8>
 80124e0:	4824      	ldr	r0, [pc, #144]	; (8012574 <_printf_i+0x23c>)
 80124e2:	e7e4      	b.n	80124ae <_printf_i+0x176>
 80124e4:	4615      	mov	r5, r2
 80124e6:	e7bd      	b.n	8012464 <_printf_i+0x12c>
 80124e8:	682b      	ldr	r3, [r5, #0]
 80124ea:	6826      	ldr	r6, [r4, #0]
 80124ec:	6961      	ldr	r1, [r4, #20]
 80124ee:	1d18      	adds	r0, r3, #4
 80124f0:	6028      	str	r0, [r5, #0]
 80124f2:	0635      	lsls	r5, r6, #24
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	d501      	bpl.n	80124fc <_printf_i+0x1c4>
 80124f8:	6019      	str	r1, [r3, #0]
 80124fa:	e002      	b.n	8012502 <_printf_i+0x1ca>
 80124fc:	0670      	lsls	r0, r6, #25
 80124fe:	d5fb      	bpl.n	80124f8 <_printf_i+0x1c0>
 8012500:	8019      	strh	r1, [r3, #0]
 8012502:	2300      	movs	r3, #0
 8012504:	6123      	str	r3, [r4, #16]
 8012506:	4615      	mov	r5, r2
 8012508:	e7bc      	b.n	8012484 <_printf_i+0x14c>
 801250a:	682b      	ldr	r3, [r5, #0]
 801250c:	1d1a      	adds	r2, r3, #4
 801250e:	602a      	str	r2, [r5, #0]
 8012510:	681d      	ldr	r5, [r3, #0]
 8012512:	6862      	ldr	r2, [r4, #4]
 8012514:	2100      	movs	r1, #0
 8012516:	4628      	mov	r0, r5
 8012518:	f7ed fe92 	bl	8000240 <memchr>
 801251c:	b108      	cbz	r0, 8012522 <_printf_i+0x1ea>
 801251e:	1b40      	subs	r0, r0, r5
 8012520:	6060      	str	r0, [r4, #4]
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	2300      	movs	r3, #0
 8012528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801252c:	e7aa      	b.n	8012484 <_printf_i+0x14c>
 801252e:	6923      	ldr	r3, [r4, #16]
 8012530:	462a      	mov	r2, r5
 8012532:	4649      	mov	r1, r9
 8012534:	4640      	mov	r0, r8
 8012536:	47d0      	blx	sl
 8012538:	3001      	adds	r0, #1
 801253a:	d0ad      	beq.n	8012498 <_printf_i+0x160>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	079b      	lsls	r3, r3, #30
 8012540:	d413      	bmi.n	801256a <_printf_i+0x232>
 8012542:	68e0      	ldr	r0, [r4, #12]
 8012544:	9b03      	ldr	r3, [sp, #12]
 8012546:	4298      	cmp	r0, r3
 8012548:	bfb8      	it	lt
 801254a:	4618      	movlt	r0, r3
 801254c:	e7a6      	b.n	801249c <_printf_i+0x164>
 801254e:	2301      	movs	r3, #1
 8012550:	4632      	mov	r2, r6
 8012552:	4649      	mov	r1, r9
 8012554:	4640      	mov	r0, r8
 8012556:	47d0      	blx	sl
 8012558:	3001      	adds	r0, #1
 801255a:	d09d      	beq.n	8012498 <_printf_i+0x160>
 801255c:	3501      	adds	r5, #1
 801255e:	68e3      	ldr	r3, [r4, #12]
 8012560:	9903      	ldr	r1, [sp, #12]
 8012562:	1a5b      	subs	r3, r3, r1
 8012564:	42ab      	cmp	r3, r5
 8012566:	dcf2      	bgt.n	801254e <_printf_i+0x216>
 8012568:	e7eb      	b.n	8012542 <_printf_i+0x20a>
 801256a:	2500      	movs	r5, #0
 801256c:	f104 0619 	add.w	r6, r4, #25
 8012570:	e7f5      	b.n	801255e <_printf_i+0x226>
 8012572:	bf00      	nop
 8012574:	0801357d 	.word	0x0801357d
 8012578:	0801358e 	.word	0x0801358e

0801257c <__sflush_r>:
 801257c:	898a      	ldrh	r2, [r1, #12]
 801257e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012582:	4605      	mov	r5, r0
 8012584:	0710      	lsls	r0, r2, #28
 8012586:	460c      	mov	r4, r1
 8012588:	d458      	bmi.n	801263c <__sflush_r+0xc0>
 801258a:	684b      	ldr	r3, [r1, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	dc05      	bgt.n	801259c <__sflush_r+0x20>
 8012590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012592:	2b00      	cmp	r3, #0
 8012594:	dc02      	bgt.n	801259c <__sflush_r+0x20>
 8012596:	2000      	movs	r0, #0
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801259e:	2e00      	cmp	r6, #0
 80125a0:	d0f9      	beq.n	8012596 <__sflush_r+0x1a>
 80125a2:	2300      	movs	r3, #0
 80125a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125a8:	682f      	ldr	r7, [r5, #0]
 80125aa:	6a21      	ldr	r1, [r4, #32]
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	d032      	beq.n	8012616 <__sflush_r+0x9a>
 80125b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	075a      	lsls	r2, r3, #29
 80125b6:	d505      	bpl.n	80125c4 <__sflush_r+0x48>
 80125b8:	6863      	ldr	r3, [r4, #4]
 80125ba:	1ac0      	subs	r0, r0, r3
 80125bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125be:	b10b      	cbz	r3, 80125c4 <__sflush_r+0x48>
 80125c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125c2:	1ac0      	subs	r0, r0, r3
 80125c4:	2300      	movs	r3, #0
 80125c6:	4602      	mov	r2, r0
 80125c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125ca:	6a21      	ldr	r1, [r4, #32]
 80125cc:	4628      	mov	r0, r5
 80125ce:	47b0      	blx	r6
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	89a3      	ldrh	r3, [r4, #12]
 80125d4:	d106      	bne.n	80125e4 <__sflush_r+0x68>
 80125d6:	6829      	ldr	r1, [r5, #0]
 80125d8:	291d      	cmp	r1, #29
 80125da:	d82b      	bhi.n	8012634 <__sflush_r+0xb8>
 80125dc:	4a29      	ldr	r2, [pc, #164]	; (8012684 <__sflush_r+0x108>)
 80125de:	410a      	asrs	r2, r1
 80125e0:	07d6      	lsls	r6, r2, #31
 80125e2:	d427      	bmi.n	8012634 <__sflush_r+0xb8>
 80125e4:	2200      	movs	r2, #0
 80125e6:	6062      	str	r2, [r4, #4]
 80125e8:	04d9      	lsls	r1, r3, #19
 80125ea:	6922      	ldr	r2, [r4, #16]
 80125ec:	6022      	str	r2, [r4, #0]
 80125ee:	d504      	bpl.n	80125fa <__sflush_r+0x7e>
 80125f0:	1c42      	adds	r2, r0, #1
 80125f2:	d101      	bne.n	80125f8 <__sflush_r+0x7c>
 80125f4:	682b      	ldr	r3, [r5, #0]
 80125f6:	b903      	cbnz	r3, 80125fa <__sflush_r+0x7e>
 80125f8:	6560      	str	r0, [r4, #84]	; 0x54
 80125fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125fc:	602f      	str	r7, [r5, #0]
 80125fe:	2900      	cmp	r1, #0
 8012600:	d0c9      	beq.n	8012596 <__sflush_r+0x1a>
 8012602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012606:	4299      	cmp	r1, r3
 8012608:	d002      	beq.n	8012610 <__sflush_r+0x94>
 801260a:	4628      	mov	r0, r5
 801260c:	f7ff fb36 	bl	8011c7c <_free_r>
 8012610:	2000      	movs	r0, #0
 8012612:	6360      	str	r0, [r4, #52]	; 0x34
 8012614:	e7c0      	b.n	8012598 <__sflush_r+0x1c>
 8012616:	2301      	movs	r3, #1
 8012618:	4628      	mov	r0, r5
 801261a:	47b0      	blx	r6
 801261c:	1c41      	adds	r1, r0, #1
 801261e:	d1c8      	bne.n	80125b2 <__sflush_r+0x36>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d0c5      	beq.n	80125b2 <__sflush_r+0x36>
 8012626:	2b1d      	cmp	r3, #29
 8012628:	d001      	beq.n	801262e <__sflush_r+0xb2>
 801262a:	2b16      	cmp	r3, #22
 801262c:	d101      	bne.n	8012632 <__sflush_r+0xb6>
 801262e:	602f      	str	r7, [r5, #0]
 8012630:	e7b1      	b.n	8012596 <__sflush_r+0x1a>
 8012632:	89a3      	ldrh	r3, [r4, #12]
 8012634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012638:	81a3      	strh	r3, [r4, #12]
 801263a:	e7ad      	b.n	8012598 <__sflush_r+0x1c>
 801263c:	690f      	ldr	r7, [r1, #16]
 801263e:	2f00      	cmp	r7, #0
 8012640:	d0a9      	beq.n	8012596 <__sflush_r+0x1a>
 8012642:	0793      	lsls	r3, r2, #30
 8012644:	680e      	ldr	r6, [r1, #0]
 8012646:	bf08      	it	eq
 8012648:	694b      	ldreq	r3, [r1, #20]
 801264a:	600f      	str	r7, [r1, #0]
 801264c:	bf18      	it	ne
 801264e:	2300      	movne	r3, #0
 8012650:	eba6 0807 	sub.w	r8, r6, r7
 8012654:	608b      	str	r3, [r1, #8]
 8012656:	f1b8 0f00 	cmp.w	r8, #0
 801265a:	dd9c      	ble.n	8012596 <__sflush_r+0x1a>
 801265c:	6a21      	ldr	r1, [r4, #32]
 801265e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012660:	4643      	mov	r3, r8
 8012662:	463a      	mov	r2, r7
 8012664:	4628      	mov	r0, r5
 8012666:	47b0      	blx	r6
 8012668:	2800      	cmp	r0, #0
 801266a:	dc06      	bgt.n	801267a <__sflush_r+0xfe>
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012672:	81a3      	strh	r3, [r4, #12]
 8012674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012678:	e78e      	b.n	8012598 <__sflush_r+0x1c>
 801267a:	4407      	add	r7, r0
 801267c:	eba8 0800 	sub.w	r8, r8, r0
 8012680:	e7e9      	b.n	8012656 <__sflush_r+0xda>
 8012682:	bf00      	nop
 8012684:	dfbffffe 	.word	0xdfbffffe

08012688 <_fflush_r>:
 8012688:	b538      	push	{r3, r4, r5, lr}
 801268a:	690b      	ldr	r3, [r1, #16]
 801268c:	4605      	mov	r5, r0
 801268e:	460c      	mov	r4, r1
 8012690:	b913      	cbnz	r3, 8012698 <_fflush_r+0x10>
 8012692:	2500      	movs	r5, #0
 8012694:	4628      	mov	r0, r5
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	b118      	cbz	r0, 80126a2 <_fflush_r+0x1a>
 801269a:	6a03      	ldr	r3, [r0, #32]
 801269c:	b90b      	cbnz	r3, 80126a2 <_fflush_r+0x1a>
 801269e:	f7ff f8d9 	bl	8011854 <__sinit>
 80126a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0f3      	beq.n	8012692 <_fflush_r+0xa>
 80126aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80126ac:	07d0      	lsls	r0, r2, #31
 80126ae:	d404      	bmi.n	80126ba <_fflush_r+0x32>
 80126b0:	0599      	lsls	r1, r3, #22
 80126b2:	d402      	bmi.n	80126ba <_fflush_r+0x32>
 80126b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126b6:	f7ff fa9e 	bl	8011bf6 <__retarget_lock_acquire_recursive>
 80126ba:	4628      	mov	r0, r5
 80126bc:	4621      	mov	r1, r4
 80126be:	f7ff ff5d 	bl	801257c <__sflush_r>
 80126c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126c4:	07da      	lsls	r2, r3, #31
 80126c6:	4605      	mov	r5, r0
 80126c8:	d4e4      	bmi.n	8012694 <_fflush_r+0xc>
 80126ca:	89a3      	ldrh	r3, [r4, #12]
 80126cc:	059b      	lsls	r3, r3, #22
 80126ce:	d4e1      	bmi.n	8012694 <_fflush_r+0xc>
 80126d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126d2:	f7ff fa91 	bl	8011bf8 <__retarget_lock_release_recursive>
 80126d6:	e7dd      	b.n	8012694 <_fflush_r+0xc>

080126d8 <fiprintf>:
 80126d8:	b40e      	push	{r1, r2, r3}
 80126da:	b503      	push	{r0, r1, lr}
 80126dc:	4601      	mov	r1, r0
 80126de:	ab03      	add	r3, sp, #12
 80126e0:	4805      	ldr	r0, [pc, #20]	; (80126f8 <fiprintf+0x20>)
 80126e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80126e6:	6800      	ldr	r0, [r0, #0]
 80126e8:	9301      	str	r3, [sp, #4]
 80126ea:	f7ff fc9d 	bl	8012028 <_vfiprintf_r>
 80126ee:	b002      	add	sp, #8
 80126f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80126f4:	b003      	add	sp, #12
 80126f6:	4770      	bx	lr
 80126f8:	20000114 	.word	0x20000114

080126fc <__swbuf_r>:
 80126fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fe:	460e      	mov	r6, r1
 8012700:	4614      	mov	r4, r2
 8012702:	4605      	mov	r5, r0
 8012704:	b118      	cbz	r0, 801270e <__swbuf_r+0x12>
 8012706:	6a03      	ldr	r3, [r0, #32]
 8012708:	b90b      	cbnz	r3, 801270e <__swbuf_r+0x12>
 801270a:	f7ff f8a3 	bl	8011854 <__sinit>
 801270e:	69a3      	ldr	r3, [r4, #24]
 8012710:	60a3      	str	r3, [r4, #8]
 8012712:	89a3      	ldrh	r3, [r4, #12]
 8012714:	071a      	lsls	r2, r3, #28
 8012716:	d525      	bpl.n	8012764 <__swbuf_r+0x68>
 8012718:	6923      	ldr	r3, [r4, #16]
 801271a:	b31b      	cbz	r3, 8012764 <__swbuf_r+0x68>
 801271c:	6823      	ldr	r3, [r4, #0]
 801271e:	6922      	ldr	r2, [r4, #16]
 8012720:	1a98      	subs	r0, r3, r2
 8012722:	6963      	ldr	r3, [r4, #20]
 8012724:	b2f6      	uxtb	r6, r6
 8012726:	4283      	cmp	r3, r0
 8012728:	4637      	mov	r7, r6
 801272a:	dc04      	bgt.n	8012736 <__swbuf_r+0x3a>
 801272c:	4621      	mov	r1, r4
 801272e:	4628      	mov	r0, r5
 8012730:	f7ff ffaa 	bl	8012688 <_fflush_r>
 8012734:	b9e0      	cbnz	r0, 8012770 <__swbuf_r+0x74>
 8012736:	68a3      	ldr	r3, [r4, #8]
 8012738:	3b01      	subs	r3, #1
 801273a:	60a3      	str	r3, [r4, #8]
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	1c5a      	adds	r2, r3, #1
 8012740:	6022      	str	r2, [r4, #0]
 8012742:	701e      	strb	r6, [r3, #0]
 8012744:	6962      	ldr	r2, [r4, #20]
 8012746:	1c43      	adds	r3, r0, #1
 8012748:	429a      	cmp	r2, r3
 801274a:	d004      	beq.n	8012756 <__swbuf_r+0x5a>
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	07db      	lsls	r3, r3, #31
 8012750:	d506      	bpl.n	8012760 <__swbuf_r+0x64>
 8012752:	2e0a      	cmp	r6, #10
 8012754:	d104      	bne.n	8012760 <__swbuf_r+0x64>
 8012756:	4621      	mov	r1, r4
 8012758:	4628      	mov	r0, r5
 801275a:	f7ff ff95 	bl	8012688 <_fflush_r>
 801275e:	b938      	cbnz	r0, 8012770 <__swbuf_r+0x74>
 8012760:	4638      	mov	r0, r7
 8012762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012764:	4621      	mov	r1, r4
 8012766:	4628      	mov	r0, r5
 8012768:	f000 f806 	bl	8012778 <__swsetup_r>
 801276c:	2800      	cmp	r0, #0
 801276e:	d0d5      	beq.n	801271c <__swbuf_r+0x20>
 8012770:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012774:	e7f4      	b.n	8012760 <__swbuf_r+0x64>
	...

08012778 <__swsetup_r>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	4b2a      	ldr	r3, [pc, #168]	; (8012824 <__swsetup_r+0xac>)
 801277c:	4605      	mov	r5, r0
 801277e:	6818      	ldr	r0, [r3, #0]
 8012780:	460c      	mov	r4, r1
 8012782:	b118      	cbz	r0, 801278c <__swsetup_r+0x14>
 8012784:	6a03      	ldr	r3, [r0, #32]
 8012786:	b90b      	cbnz	r3, 801278c <__swsetup_r+0x14>
 8012788:	f7ff f864 	bl	8011854 <__sinit>
 801278c:	89a3      	ldrh	r3, [r4, #12]
 801278e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012792:	0718      	lsls	r0, r3, #28
 8012794:	d422      	bmi.n	80127dc <__swsetup_r+0x64>
 8012796:	06d9      	lsls	r1, r3, #27
 8012798:	d407      	bmi.n	80127aa <__swsetup_r+0x32>
 801279a:	2309      	movs	r3, #9
 801279c:	602b      	str	r3, [r5, #0]
 801279e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127a2:	81a3      	strh	r3, [r4, #12]
 80127a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127a8:	e034      	b.n	8012814 <__swsetup_r+0x9c>
 80127aa:	0758      	lsls	r0, r3, #29
 80127ac:	d512      	bpl.n	80127d4 <__swsetup_r+0x5c>
 80127ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127b0:	b141      	cbz	r1, 80127c4 <__swsetup_r+0x4c>
 80127b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127b6:	4299      	cmp	r1, r3
 80127b8:	d002      	beq.n	80127c0 <__swsetup_r+0x48>
 80127ba:	4628      	mov	r0, r5
 80127bc:	f7ff fa5e 	bl	8011c7c <_free_r>
 80127c0:	2300      	movs	r3, #0
 80127c2:	6363      	str	r3, [r4, #52]	; 0x34
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127ca:	81a3      	strh	r3, [r4, #12]
 80127cc:	2300      	movs	r3, #0
 80127ce:	6063      	str	r3, [r4, #4]
 80127d0:	6923      	ldr	r3, [r4, #16]
 80127d2:	6023      	str	r3, [r4, #0]
 80127d4:	89a3      	ldrh	r3, [r4, #12]
 80127d6:	f043 0308 	orr.w	r3, r3, #8
 80127da:	81a3      	strh	r3, [r4, #12]
 80127dc:	6923      	ldr	r3, [r4, #16]
 80127de:	b94b      	cbnz	r3, 80127f4 <__swsetup_r+0x7c>
 80127e0:	89a3      	ldrh	r3, [r4, #12]
 80127e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127ea:	d003      	beq.n	80127f4 <__swsetup_r+0x7c>
 80127ec:	4621      	mov	r1, r4
 80127ee:	4628      	mov	r0, r5
 80127f0:	f000 f847 	bl	8012882 <__smakebuf_r>
 80127f4:	89a0      	ldrh	r0, [r4, #12]
 80127f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127fa:	f010 0301 	ands.w	r3, r0, #1
 80127fe:	d00a      	beq.n	8012816 <__swsetup_r+0x9e>
 8012800:	2300      	movs	r3, #0
 8012802:	60a3      	str	r3, [r4, #8]
 8012804:	6963      	ldr	r3, [r4, #20]
 8012806:	425b      	negs	r3, r3
 8012808:	61a3      	str	r3, [r4, #24]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	b943      	cbnz	r3, 8012820 <__swsetup_r+0xa8>
 801280e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012812:	d1c4      	bne.n	801279e <__swsetup_r+0x26>
 8012814:	bd38      	pop	{r3, r4, r5, pc}
 8012816:	0781      	lsls	r1, r0, #30
 8012818:	bf58      	it	pl
 801281a:	6963      	ldrpl	r3, [r4, #20]
 801281c:	60a3      	str	r3, [r4, #8]
 801281e:	e7f4      	b.n	801280a <__swsetup_r+0x92>
 8012820:	2000      	movs	r0, #0
 8012822:	e7f7      	b.n	8012814 <__swsetup_r+0x9c>
 8012824:	20000114 	.word	0x20000114

08012828 <abort>:
 8012828:	b508      	push	{r3, lr}
 801282a:	2006      	movs	r0, #6
 801282c:	f000 f88e 	bl	801294c <raise>
 8012830:	2001      	movs	r0, #1
 8012832:	f7ef f8bd 	bl	80019b0 <_exit>

08012836 <__swhatbuf_r>:
 8012836:	b570      	push	{r4, r5, r6, lr}
 8012838:	460c      	mov	r4, r1
 801283a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801283e:	2900      	cmp	r1, #0
 8012840:	b096      	sub	sp, #88	; 0x58
 8012842:	4615      	mov	r5, r2
 8012844:	461e      	mov	r6, r3
 8012846:	da0d      	bge.n	8012864 <__swhatbuf_r+0x2e>
 8012848:	89a3      	ldrh	r3, [r4, #12]
 801284a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801284e:	f04f 0100 	mov.w	r1, #0
 8012852:	bf0c      	ite	eq
 8012854:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012858:	2340      	movne	r3, #64	; 0x40
 801285a:	2000      	movs	r0, #0
 801285c:	6031      	str	r1, [r6, #0]
 801285e:	602b      	str	r3, [r5, #0]
 8012860:	b016      	add	sp, #88	; 0x58
 8012862:	bd70      	pop	{r4, r5, r6, pc}
 8012864:	466a      	mov	r2, sp
 8012866:	f000 f879 	bl	801295c <_fstat_r>
 801286a:	2800      	cmp	r0, #0
 801286c:	dbec      	blt.n	8012848 <__swhatbuf_r+0x12>
 801286e:	9901      	ldr	r1, [sp, #4]
 8012870:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012874:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012878:	4259      	negs	r1, r3
 801287a:	4159      	adcs	r1, r3
 801287c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012880:	e7eb      	b.n	801285a <__swhatbuf_r+0x24>

08012882 <__smakebuf_r>:
 8012882:	898b      	ldrh	r3, [r1, #12]
 8012884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012886:	079d      	lsls	r5, r3, #30
 8012888:	4606      	mov	r6, r0
 801288a:	460c      	mov	r4, r1
 801288c:	d507      	bpl.n	801289e <__smakebuf_r+0x1c>
 801288e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012892:	6023      	str	r3, [r4, #0]
 8012894:	6123      	str	r3, [r4, #16]
 8012896:	2301      	movs	r3, #1
 8012898:	6163      	str	r3, [r4, #20]
 801289a:	b002      	add	sp, #8
 801289c:	bd70      	pop	{r4, r5, r6, pc}
 801289e:	ab01      	add	r3, sp, #4
 80128a0:	466a      	mov	r2, sp
 80128a2:	f7ff ffc8 	bl	8012836 <__swhatbuf_r>
 80128a6:	9900      	ldr	r1, [sp, #0]
 80128a8:	4605      	mov	r5, r0
 80128aa:	4630      	mov	r0, r6
 80128ac:	f7fe fd9a 	bl	80113e4 <_malloc_r>
 80128b0:	b948      	cbnz	r0, 80128c6 <__smakebuf_r+0x44>
 80128b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128b6:	059a      	lsls	r2, r3, #22
 80128b8:	d4ef      	bmi.n	801289a <__smakebuf_r+0x18>
 80128ba:	f023 0303 	bic.w	r3, r3, #3
 80128be:	f043 0302 	orr.w	r3, r3, #2
 80128c2:	81a3      	strh	r3, [r4, #12]
 80128c4:	e7e3      	b.n	801288e <__smakebuf_r+0xc>
 80128c6:	89a3      	ldrh	r3, [r4, #12]
 80128c8:	6020      	str	r0, [r4, #0]
 80128ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ce:	81a3      	strh	r3, [r4, #12]
 80128d0:	9b00      	ldr	r3, [sp, #0]
 80128d2:	6163      	str	r3, [r4, #20]
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	6120      	str	r0, [r4, #16]
 80128d8:	b15b      	cbz	r3, 80128f2 <__smakebuf_r+0x70>
 80128da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128de:	4630      	mov	r0, r6
 80128e0:	f000 f84e 	bl	8012980 <_isatty_r>
 80128e4:	b128      	cbz	r0, 80128f2 <__smakebuf_r+0x70>
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	f023 0303 	bic.w	r3, r3, #3
 80128ec:	f043 0301 	orr.w	r3, r3, #1
 80128f0:	81a3      	strh	r3, [r4, #12]
 80128f2:	89a3      	ldrh	r3, [r4, #12]
 80128f4:	431d      	orrs	r5, r3
 80128f6:	81a5      	strh	r5, [r4, #12]
 80128f8:	e7cf      	b.n	801289a <__smakebuf_r+0x18>

080128fa <_raise_r>:
 80128fa:	291f      	cmp	r1, #31
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	4604      	mov	r4, r0
 8012900:	460d      	mov	r5, r1
 8012902:	d904      	bls.n	801290e <_raise_r+0x14>
 8012904:	2316      	movs	r3, #22
 8012906:	6003      	str	r3, [r0, #0]
 8012908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801290c:	bd38      	pop	{r3, r4, r5, pc}
 801290e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012910:	b112      	cbz	r2, 8012918 <_raise_r+0x1e>
 8012912:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012916:	b94b      	cbnz	r3, 801292c <_raise_r+0x32>
 8012918:	4620      	mov	r0, r4
 801291a:	f000 f853 	bl	80129c4 <_getpid_r>
 801291e:	462a      	mov	r2, r5
 8012920:	4601      	mov	r1, r0
 8012922:	4620      	mov	r0, r4
 8012924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012928:	f000 b83a 	b.w	80129a0 <_kill_r>
 801292c:	2b01      	cmp	r3, #1
 801292e:	d00a      	beq.n	8012946 <_raise_r+0x4c>
 8012930:	1c59      	adds	r1, r3, #1
 8012932:	d103      	bne.n	801293c <_raise_r+0x42>
 8012934:	2316      	movs	r3, #22
 8012936:	6003      	str	r3, [r0, #0]
 8012938:	2001      	movs	r0, #1
 801293a:	e7e7      	b.n	801290c <_raise_r+0x12>
 801293c:	2400      	movs	r4, #0
 801293e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012942:	4628      	mov	r0, r5
 8012944:	4798      	blx	r3
 8012946:	2000      	movs	r0, #0
 8012948:	e7e0      	b.n	801290c <_raise_r+0x12>
	...

0801294c <raise>:
 801294c:	4b02      	ldr	r3, [pc, #8]	; (8012958 <raise+0xc>)
 801294e:	4601      	mov	r1, r0
 8012950:	6818      	ldr	r0, [r3, #0]
 8012952:	f7ff bfd2 	b.w	80128fa <_raise_r>
 8012956:	bf00      	nop
 8012958:	20000114 	.word	0x20000114

0801295c <_fstat_r>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	4d07      	ldr	r5, [pc, #28]	; (801297c <_fstat_r+0x20>)
 8012960:	2300      	movs	r3, #0
 8012962:	4604      	mov	r4, r0
 8012964:	4608      	mov	r0, r1
 8012966:	4611      	mov	r1, r2
 8012968:	602b      	str	r3, [r5, #0]
 801296a:	f7ef f870 	bl	8001a4e <_fstat>
 801296e:	1c43      	adds	r3, r0, #1
 8012970:	d102      	bne.n	8012978 <_fstat_r+0x1c>
 8012972:	682b      	ldr	r3, [r5, #0]
 8012974:	b103      	cbz	r3, 8012978 <_fstat_r+0x1c>
 8012976:	6023      	str	r3, [r4, #0]
 8012978:	bd38      	pop	{r3, r4, r5, pc}
 801297a:	bf00      	nop
 801297c:	20009444 	.word	0x20009444

08012980 <_isatty_r>:
 8012980:	b538      	push	{r3, r4, r5, lr}
 8012982:	4d06      	ldr	r5, [pc, #24]	; (801299c <_isatty_r+0x1c>)
 8012984:	2300      	movs	r3, #0
 8012986:	4604      	mov	r4, r0
 8012988:	4608      	mov	r0, r1
 801298a:	602b      	str	r3, [r5, #0]
 801298c:	f7ef f86f 	bl	8001a6e <_isatty>
 8012990:	1c43      	adds	r3, r0, #1
 8012992:	d102      	bne.n	801299a <_isatty_r+0x1a>
 8012994:	682b      	ldr	r3, [r5, #0]
 8012996:	b103      	cbz	r3, 801299a <_isatty_r+0x1a>
 8012998:	6023      	str	r3, [r4, #0]
 801299a:	bd38      	pop	{r3, r4, r5, pc}
 801299c:	20009444 	.word	0x20009444

080129a0 <_kill_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4d07      	ldr	r5, [pc, #28]	; (80129c0 <_kill_r+0x20>)
 80129a4:	2300      	movs	r3, #0
 80129a6:	4604      	mov	r4, r0
 80129a8:	4608      	mov	r0, r1
 80129aa:	4611      	mov	r1, r2
 80129ac:	602b      	str	r3, [r5, #0]
 80129ae:	f7ee ffef 	bl	8001990 <_kill>
 80129b2:	1c43      	adds	r3, r0, #1
 80129b4:	d102      	bne.n	80129bc <_kill_r+0x1c>
 80129b6:	682b      	ldr	r3, [r5, #0]
 80129b8:	b103      	cbz	r3, 80129bc <_kill_r+0x1c>
 80129ba:	6023      	str	r3, [r4, #0]
 80129bc:	bd38      	pop	{r3, r4, r5, pc}
 80129be:	bf00      	nop
 80129c0:	20009444 	.word	0x20009444

080129c4 <_getpid_r>:
 80129c4:	f7ee bfdc 	b.w	8001980 <_getpid>

080129c8 <_init>:
 80129c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ca:	bf00      	nop
 80129cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ce:	bc08      	pop	{r3}
 80129d0:	469e      	mov	lr, r3
 80129d2:	4770      	bx	lr

080129d4 <_fini>:
 80129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d6:	bf00      	nop
 80129d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129da:	bc08      	pop	{r3}
 80129dc:	469e      	mov	lr, r3
 80129de:	4770      	bx	lr
